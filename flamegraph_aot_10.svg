<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1014" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="997.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="997.00"> </text><svg id="frames" x="10" width="1180" total_samples="65734"><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (30 samples, 0.05%)</title><rect x="0.0030%" y="933" width="0.0456%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="30"/><text x="0.2530%" y="943.50"></text></g><g><title>&lt;str as arrow_array::types::bytes::ByteArrayNativeType&gt;::from_bytes_unchecked (292 samples, 0.44%)</title><rect x="0.0639%" y="933" width="0.4442%" height="15" fill="rgb(217,0,24)" fg:x="42" fg:w="292"/><text x="0.3139%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.02%)</title><rect x="0.5340%" y="917" width="0.0243%" height="15" fill="rgb(221,193,54)" fg:x="351" fg:w="16"/><text x="0.7840%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (27 samples, 0.04%)</title><rect x="0.5583%" y="917" width="0.0411%" height="15" fill="rgb(248,212,6)" fg:x="367" fg:w="27"/><text x="0.8083%" y="927.50"></text></g><g><title>&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::UInt64Type&gt; as core::convert::From&lt;alloc::vec::Vec&lt;&lt;arrow_array::types::UInt64Type as arrow_array::array::primitive_array::ArrowPrimitiveType&gt;::Native&gt;&gt;&gt;::from (20 samples, 0.03%)</title><rect x="0.6009%" y="917" width="0.0304%" height="15" fill="rgb(208,68,35)" fg:x="395" fg:w="20"/><text x="0.8509%" y="927.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.04%)</title><rect x="0.6739%" y="917" width="0.0396%" height="15" fill="rgb(232,128,0)" fg:x="443" fg:w="26"/><text x="0.9239%" y="927.50"></text></g><g><title>__GI___libc_malloc (38 samples, 0.06%)</title><rect x="0.7363%" y="917" width="0.0578%" height="15" fill="rgb(207,160,47)" fg:x="484" fg:w="38"/><text x="0.9863%" y="927.50"></text></g><g><title>__memset_avx2_unaligned_erms (9 samples, 0.01%)</title><rect x="0.8093%" y="917" width="0.0137%" height="15" fill="rgb(228,23,34)" fg:x="532" fg:w="9"/><text x="1.0593%" y="927.50"></text></g><g><title>__posix_memalign (33 samples, 0.05%)</title><rect x="0.8230%" y="917" width="0.0502%" height="15" fill="rgb(218,30,26)" fg:x="541" fg:w="33"/><text x="1.0730%" y="927.50"></text></g><g><title>_int_free (95 samples, 0.14%)</title><rect x="0.8823%" y="917" width="0.1445%" height="15" fill="rgb(220,122,19)" fg:x="580" fg:w="95"/><text x="1.1323%" y="927.50"></text></g><g><title>_int_malloc (16 samples, 0.02%)</title><rect x="1.0269%" y="917" width="0.0243%" height="15" fill="rgb(250,228,42)" fg:x="675" fg:w="16"/><text x="1.2769%" y="927.50"></text></g><g><title>_int_memalign (23 samples, 0.03%)</title><rect x="1.0512%" y="917" width="0.0350%" height="15" fill="rgb(240,193,28)" fg:x="691" fg:w="23"/><text x="1.3012%" y="927.50"></text></g><g><title>arrow_array::record_batch::RecordBatch::try_new (9 samples, 0.01%)</title><rect x="1.1227%" y="917" width="0.0137%" height="15" fill="rgb(216,20,37)" fg:x="738" fg:w="9"/><text x="1.3727%" y="927.50"></text></g><g><title>art_tree::Art&lt;K,V&gt;::get_with_length (7 samples, 0.01%)</title><rect x="1.1486%" y="917" width="0.0106%" height="15" fill="rgb(206,188,39)" fg:x="755" fg:w="7"/><text x="1.3986%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (27 samples, 0.04%)</title><rect x="1.1760%" y="917" width="0.0411%" height="15" fill="rgb(217,207,13)" fg:x="773" fg:w="27"/><text x="1.4260%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_schema::datatype::DataType&gt; (19 samples, 0.03%)</title><rect x="1.2170%" y="917" width="0.0289%" height="15" fill="rgb(231,73,38)" fg:x="800" fg:w="19"/><text x="1.4670%" y="927.50"></text></g><g><title>core::str::converts::from_utf8 (8 samples, 0.01%)</title><rect x="1.2596%" y="917" width="0.0122%" height="15" fill="rgb(225,20,46)" fg:x="828" fg:w="8"/><text x="1.5096%" y="927.50"></text></g><g><title>fastfull_search::optimizer::planner::boolean_planner::BooleanPhysicalPlanner::create_boolean_plan::{{closure}} (11 samples, 0.02%)</title><rect x="1.3068%" y="917" width="0.0167%" height="15" fill="rgb(210,31,41)" fg:x="859" fg:w="11"/><text x="1.5568%" y="927.50"></text></g><g><title>fastfull_search::physical_expr::boolean_eval::PhysicalPredicate::eval_avx512 (7 samples, 0.01%)</title><rect x="1.3326%" y="917" width="0.0106%" height="15" fill="rgb(221,200,47)" fg:x="876" fg:w="7"/><text x="1.5826%" y="927.50"></text></g><g><title>tantivy::tokenizer::tokenizer::TextAnalyzer::token_stream (8 samples, 0.01%)</title><rect x="1.3783%" y="917" width="0.0122%" height="15" fill="rgb(226,26,5)" fg:x="906" fg:w="8"/><text x="1.6283%" y="927.50"></text></g><g><title>[[heap]] (611 samples, 0.93%)</title><rect x="0.5081%" y="933" width="0.9295%" height="15" fill="rgb(249,33,26)" fg:x="334" fg:w="611"/><text x="0.7581%" y="943.50"></text></g><g><title>unlink_chunk.isra.0 (31 samples, 0.05%)</title><rect x="1.3905%" y="917" width="0.0472%" height="15" fill="rgb(235,183,28)" fg:x="914" fg:w="31"/><text x="1.6405%" y="927.50"></text></g><g><title>[[kernel.kallsyms]] (190 samples, 0.29%)</title><rect x="1.4376%" y="933" width="0.2890%" height="15" fill="rgb(221,5,38)" fg:x="945" fg:w="190"/><text x="1.6876%" y="943.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (11 samples, 0.02%)</title><rect x="1.7267%" y="917" width="0.0167%" height="15" fill="rgb(247,18,42)" fg:x="1135" fg:w="11"/><text x="1.9767%" y="927.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (15 samples, 0.02%)</title><rect x="1.7434%" y="917" width="0.0228%" height="15" fill="rgb(241,131,45)" fg:x="1146" fg:w="15"/><text x="1.9934%" y="927.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (12 samples, 0.02%)</title><rect x="1.7677%" y="917" width="0.0183%" height="15" fill="rgb(249,31,29)" fg:x="1162" fg:w="12"/><text x="2.0177%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41 samples, 0.06%)</title><rect x="1.7921%" y="917" width="0.0624%" height="15" fill="rgb(225,111,53)" fg:x="1178" fg:w="41"/><text x="2.0421%" y="927.50"></text></g><g><title>&lt;fastfull_search::datasources::posting_table::PostingStream as futures_core::stream::Stream&gt;::poll_next (67 samples, 0.10%)</title><rect x="1.9016%" y="917" width="0.1019%" height="15" fill="rgb(238,160,17)" fg:x="1250" fg:w="67"/><text x="2.1516%" y="927.50"></text></g><g><title>&lt;fastfull_search::optimizer::planner::boolean_planner::BooleanPhysicalPlanner as datafusion::physical_plan::planner::PhysicalPlanner&gt;::create_physical_plan::_{{closure}} (9 samples, 0.01%)</title><rect x="2.0035%" y="917" width="0.0137%" height="15" fill="rgb(214,148,48)" fg:x="1317" fg:w="9"/><text x="2.2535%" y="927.50"></text></g><g><title>__GI___libc_malloc (49 samples, 0.07%)</title><rect x="2.0355%" y="917" width="0.0745%" height="15" fill="rgb(232,36,49)" fg:x="1338" fg:w="49"/><text x="2.2855%" y="927.50"></text></g><g><title>__rdl_alloc (12 samples, 0.02%)</title><rect x="2.1328%" y="917" width="0.0183%" height="15" fill="rgb(209,103,24)" fg:x="1402" fg:w="12"/><text x="2.3828%" y="927.50"></text></g><g><title>_int_free (24 samples, 0.04%)</title><rect x="2.1572%" y="917" width="0.0365%" height="15" fill="rgb(229,88,8)" fg:x="1418" fg:w="24"/><text x="2.4072%" y="927.50"></text></g><g><title>_int_malloc (7 samples, 0.01%)</title><rect x="2.1937%" y="917" width="0.0106%" height="15" fill="rgb(213,181,19)" fg:x="1442" fg:w="7"/><text x="2.4437%" y="927.50"></text></g><g><title>_int_memalign (13 samples, 0.02%)</title><rect x="2.2043%" y="917" width="0.0198%" height="15" fill="rgb(254,191,54)" fg:x="1449" fg:w="13"/><text x="2.4543%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.02%)</title><rect x="2.2348%" y="917" width="0.0167%" height="15" fill="rgb(241,83,37)" fg:x="1469" fg:w="11"/><text x="2.4848%" y="927.50"></text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 0.02%)</title><rect x="2.2515%" y="917" width="0.0228%" height="15" fill="rgb(233,36,39)" fg:x="1480" fg:w="15"/><text x="2.5015%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (10 samples, 0.02%)</title><rect x="2.2850%" y="917" width="0.0152%" height="15" fill="rgb(226,3,54)" fg:x="1502" fg:w="10"/><text x="2.5350%" y="927.50"></text></g><g><title>arrow_buffer::buffer::immutable::Buffer::from_slice_ref (19 samples, 0.03%)</title><rect x="2.3017%" y="917" width="0.0289%" height="15" fill="rgb(245,192,40)" fg:x="1513" fg:w="19"/><text x="2.5517%" y="927.50"></text></g><g><title>arrow_data::data::ArrayDataBuilder::build_unchecked (8 samples, 0.01%)</title><rect x="2.3321%" y="917" width="0.0122%" height="15" fill="rgb(238,167,29)" fg:x="1533" fg:w="8"/><text x="2.5821%" y="927.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (11 samples, 0.02%)</title><rect x="2.3656%" y="917" width="0.0167%" height="15" fill="rgb(232,182,51)" fg:x="1555" fg:w="11"/><text x="2.6156%" y="927.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (8 samples, 0.01%)</title><rect x="2.3702%" y="901" width="0.0122%" height="15" fill="rgb(231,60,39)" fg:x="1558" fg:w="8"/><text x="2.6202%" y="911.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (8 samples, 0.01%)</title><rect x="2.3702%" y="885" width="0.0122%" height="15" fill="rgb(208,69,12)" fg:x="1558" fg:w="8"/><text x="2.6202%" y="895.50"></text></g><g><title>core::fmt::write (7 samples, 0.01%)</title><rect x="2.3869%" y="917" width="0.0106%" height="15" fill="rgb(235,93,37)" fg:x="1569" fg:w="7"/><text x="2.6369%" y="927.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (10 samples, 0.02%)</title><rect x="2.3975%" y="917" width="0.0152%" height="15" fill="rgb(213,116,39)" fg:x="1576" fg:w="10"/><text x="2.6475%" y="927.50"></text></g><g><title>datafusion_optimizer::optimizer::Optimizer::optimize (8 samples, 0.01%)</title><rect x="2.4630%" y="917" width="0.0122%" height="15" fill="rgb(222,207,29)" fg:x="1619" fg:w="8"/><text x="2.7130%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (42 samples, 0.06%)</title><rect x="2.5132%" y="917" width="0.0639%" height="15" fill="rgb(206,96,30)" fg:x="1652" fg:w="42"/><text x="2.7632%" y="927.50"></text></g><g><title>[[stack]] (563 samples, 0.86%)</title><rect x="1.7267%" y="933" width="0.8565%" height="15" fill="rgb(218,138,4)" fg:x="1135" fg:w="563"/><text x="1.9767%" y="943.50"></text></g><g><title>[[vdso]] (11 samples, 0.02%)</title><rect x="2.5831%" y="933" width="0.0167%" height="15" fill="rgb(250,191,14)" fg:x="1698" fg:w="11"/><text x="2.8331%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.02%)</title><rect x="2.6181%" y="917" width="0.0183%" height="15" fill="rgb(239,60,40)" fg:x="1721" fg:w="12"/><text x="2.8681%" y="927.50"></text></g><g><title>&lt;fastfull_search::datasources::posting_table::PostingStream as futures_core::stream::Stream&gt;::poll_next (12 samples, 0.02%)</title><rect x="2.6425%" y="917" width="0.0183%" height="15" fill="rgb(206,27,48)" fg:x="1737" fg:w="12"/><text x="2.8925%" y="927.50"></text></g><g><title>__calloc (18 samples, 0.03%)</title><rect x="2.6744%" y="917" width="0.0274%" height="15" fill="rgb(225,35,8)" fg:x="1758" fg:w="18"/><text x="2.9244%" y="927.50"></text></g><g><title>_int_free (12 samples, 0.02%)</title><rect x="2.7079%" y="917" width="0.0183%" height="15" fill="rgb(250,213,24)" fg:x="1780" fg:w="12"/><text x="2.9579%" y="927.50"></text></g><g><title>[do_query] (107 samples, 0.16%)</title><rect x="2.6029%" y="933" width="0.1628%" height="15" fill="rgb(247,123,22)" fg:x="1711" fg:w="107"/><text x="2.8529%" y="943.50"></text></g><g><title>__rdl_alloc (7 samples, 0.01%)</title><rect x="2.7687%" y="917" width="0.0106%" height="15" fill="rgb(231,138,38)" fg:x="1820" fg:w="7"/><text x="3.0187%" y="927.50"></text></g><g><title>_int_malloc (9 samples, 0.01%)</title><rect x="2.7794%" y="917" width="0.0137%" height="15" fill="rgb(231,145,46)" fg:x="1827" fg:w="9"/><text x="3.0294%" y="927.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.03%)</title><rect x="2.7657%" y="933" width="0.0289%" height="15" fill="rgb(251,118,11)" fg:x="1818" fg:w="19"/><text x="3.0157%" y="943.50"></text></g><g><title>[[kernel.kallsyms]] (50 samples, 0.08%)</title><rect x="18.9780%" y="917" width="0.0761%" height="15" fill="rgb(217,147,25)" fg:x="12475" fg:w="50"/><text x="19.2280%" y="927.50"></text></g><g><title>[[kernel.kallsyms]] (50 samples, 0.08%)</title><rect x="18.9780%" y="901" width="0.0761%" height="15" fill="rgb(247,81,37)" fg:x="12475" fg:w="50"/><text x="19.2280%" y="911.50"></text></g><g><title>[[kernel.kallsyms]] (50 samples, 0.08%)</title><rect x="18.9780%" y="885" width="0.0761%" height="15" fill="rgb(209,12,38)" fg:x="12475" fg:w="50"/><text x="19.2280%" y="895.50"></text></g><g><title>[[kernel.kallsyms]] (49 samples, 0.07%)</title><rect x="18.9795%" y="869" width="0.0745%" height="15" fill="rgb(227,1,9)" fg:x="12476" fg:w="49"/><text x="19.2295%" y="879.50"></text></g><g><title>[[kernel.kallsyms]] (48 samples, 0.07%)</title><rect x="18.9810%" y="853" width="0.0730%" height="15" fill="rgb(248,47,43)" fg:x="12477" fg:w="48"/><text x="19.2310%" y="863.50"></text></g><g><title>[[kernel.kallsyms]] (47 samples, 0.07%)</title><rect x="18.9826%" y="837" width="0.0715%" height="15" fill="rgb(221,10,30)" fg:x="12478" fg:w="47"/><text x="19.2326%" y="847.50"></text></g><g><title>[[kernel.kallsyms]] (47 samples, 0.07%)</title><rect x="18.9826%" y="821" width="0.0715%" height="15" fill="rgb(210,229,1)" fg:x="12478" fg:w="47"/><text x="19.2326%" y="831.50"></text></g><g><title>[[kernel.kallsyms]] (46 samples, 0.07%)</title><rect x="18.9841%" y="805" width="0.0700%" height="15" fill="rgb(222,148,37)" fg:x="12479" fg:w="46"/><text x="19.2341%" y="815.50"></text></g><g><title>[[kernel.kallsyms]] (45 samples, 0.07%)</title><rect x="18.9856%" y="789" width="0.0685%" height="15" fill="rgb(234,67,33)" fg:x="12480" fg:w="45"/><text x="19.2356%" y="799.50"></text></g><g><title>[[kernel.kallsyms]] (44 samples, 0.07%)</title><rect x="18.9871%" y="773" width="0.0669%" height="15" fill="rgb(247,98,35)" fg:x="12481" fg:w="44"/><text x="19.2371%" y="783.50"></text></g><g><title>[[kernel.kallsyms]] (41 samples, 0.06%)</title><rect x="18.9917%" y="757" width="0.0624%" height="15" fill="rgb(247,138,52)" fg:x="12484" fg:w="41"/><text x="19.2417%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (17 samples, 0.03%)</title><rect x="19.0282%" y="741" width="0.0259%" height="15" fill="rgb(213,79,30)" fg:x="12508" fg:w="17"/><text x="19.2782%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (16 samples, 0.02%)</title><rect x="19.0297%" y="725" width="0.0243%" height="15" fill="rgb(246,177,23)" fg:x="12509" fg:w="16"/><text x="19.2797%" y="735.50"></text></g><g><title>[perf-733278.map] (10,689 samples, 16.26%)</title><rect x="2.7946%" y="933" width="16.2610%" height="15" fill="rgb(230,62,27)" fg:x="1837" fg:w="10689"/><text x="3.0446%" y="943.50">[perf-733278.map]</text></g><g><title>&lt;fastfull_search::datasources::posting_table::PostingStream as futures_core::stream::Stream&gt;::poll_next (12 samples, 0.02%)</title><rect x="19.1225%" y="917" width="0.0183%" height="15" fill="rgb(216,154,8)" fg:x="12570" fg:w="12"/><text x="19.3725%" y="927.50"></text></g><g><title>[do_query] (12 samples, 0.02%)</title><rect x="19.1225%" y="901" width="0.0183%" height="15" fill="rgb(244,35,45)" fg:x="12570" fg:w="12"/><text x="19.3725%" y="911.50"></text></g><g><title>__calloc (12 samples, 0.02%)</title><rect x="19.1225%" y="885" width="0.0183%" height="15" fill="rgb(251,115,12)" fg:x="12570" fg:w="12"/><text x="19.3725%" y="895.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="19.1545%" y="917" width="0.0152%" height="15" fill="rgb(240,54,50)" fg:x="12591" fg:w="10"/><text x="19.4045%" y="927.50"></text></g><g><title>__GI___libc_malloc (41 samples, 0.06%)</title><rect x="19.1803%" y="917" width="0.0624%" height="15" fill="rgb(233,84,52)" fg:x="12608" fg:w="41"/><text x="19.4303%" y="927.50"></text></g><g><title>__calloc (14 samples, 0.02%)</title><rect x="19.2503%" y="917" width="0.0213%" height="15" fill="rgb(207,117,47)" fg:x="12654" fg:w="14"/><text x="19.5003%" y="927.50"></text></g><g><title>__posix_memalign (10 samples, 0.02%)</title><rect x="19.2838%" y="917" width="0.0152%" height="15" fill="rgb(249,43,39)" fg:x="12676" fg:w="10"/><text x="19.5338%" y="927.50"></text></g><g><title>__rdl_alloc (40 samples, 0.06%)</title><rect x="19.2990%" y="917" width="0.0609%" height="15" fill="rgb(209,38,44)" fg:x="12686" fg:w="40"/><text x="19.5490%" y="927.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (29 samples, 0.04%)</title><rect x="19.3157%" y="901" width="0.0441%" height="15" fill="rgb(236,212,23)" fg:x="12697" fg:w="29"/><text x="19.5657%" y="911.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (28 samples, 0.04%)</title><rect x="19.3172%" y="885" width="0.0426%" height="15" fill="rgb(242,79,21)" fg:x="12698" fg:w="28"/><text x="19.5672%" y="895.50"></text></g><g><title>_int_free (166 samples, 0.25%)</title><rect x="19.3629%" y="917" width="0.2525%" height="15" fill="rgb(211,96,35)" fg:x="12728" fg:w="166"/><text x="19.6129%" y="927.50"></text></g><g><title>_int_malloc (163 samples, 0.25%)</title><rect x="19.6154%" y="917" width="0.2480%" height="15" fill="rgb(253,215,40)" fg:x="12894" fg:w="163"/><text x="19.8654%" y="927.50"></text></g><g><title>_int_memalign (81 samples, 0.12%)</title><rect x="19.8634%" y="917" width="0.1232%" height="15" fill="rgb(211,81,21)" fg:x="13057" fg:w="81"/><text x="20.1134%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (31 samples, 0.05%)</title><rect x="20.0338%" y="917" width="0.0472%" height="15" fill="rgb(208,190,38)" fg:x="13169" fg:w="31"/><text x="20.2838%" y="927.50"></text></g><g><title>arrow_array::record_batch::RecordBatch::try_new_impl (16 samples, 0.02%)</title><rect x="20.0977%" y="917" width="0.0243%" height="15" fill="rgb(235,213,38)" fg:x="13211" fg:w="16"/><text x="20.3477%" y="927.50"></text></g><g><title>arrow_buffer::buffer::immutable::Buffer::from_slice_ref (7 samples, 0.01%)</title><rect x="20.1296%" y="917" width="0.0106%" height="15" fill="rgb(237,122,38)" fg:x="13232" fg:w="7"/><text x="20.3796%" y="927.50"></text></g><g><title>arrow_data::data::ArrayData::new_unchecked (9 samples, 0.01%)</title><rect x="20.1494%" y="917" width="0.0137%" height="15" fill="rgb(244,218,35)" fg:x="13245" fg:w="9"/><text x="20.3994%" y="927.50"></text></g><g><title>arrow_schema::field::Field::new (13 samples, 0.02%)</title><rect x="20.1783%" y="917" width="0.0198%" height="15" fill="rgb(240,68,47)" fg:x="13264" fg:w="13"/><text x="20.4283%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (16 samples, 0.02%)</title><rect x="20.2544%" y="917" width="0.0243%" height="15" fill="rgb(210,16,53)" fg:x="13314" fg:w="16"/><text x="20.5044%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;datafusion_expr::logical_plan::plan::LogicalPlan&gt; (7 samples, 0.01%)</title><rect x="20.2970%" y="917" width="0.0106%" height="15" fill="rgb(235,124,12)" fg:x="13342" fg:w="7"/><text x="20.5470%" y="927.50"></text></g><g><title>&lt;fastfull_search::optimizer::physical_optimizer::min_operation_range::GetMinRange as datafusion::physical_plan::rewrite::TreeNodeRewriter&lt;alloc::sync::Arc&lt;dyn datafusion::physical_plan::ExecutionPlan&gt;&gt;&gt;::pre_visit (22 samples, 0.03%)</title><rect x="20.3745%" y="821" width="0.0335%" height="15" fill="rgb(224,169,11)" fg:x="13393" fg:w="22"/><text x="20.6245%" y="831.50"></text></g><g><title>&lt;datafusion::physical_plan::boolean::BooleanExec as datafusion::physical_plan::ExecutionPlan&gt;::children (55 samples, 0.08%)</title><rect x="20.4202%" y="805" width="0.0837%" height="15" fill="rgb(250,166,2)" fg:x="13423" fg:w="55"/><text x="20.6702%" y="815.50"></text></g><g><title>__GI___libc_malloc (55 samples, 0.08%)</title><rect x="20.4202%" y="789" width="0.0837%" height="15" fill="rgb(242,216,29)" fg:x="13423" fg:w="55"/><text x="20.6702%" y="799.50"></text></g><g><title>_int_malloc (48 samples, 0.07%)</title><rect x="20.4308%" y="773" width="0.0730%" height="15" fill="rgb(230,116,27)" fg:x="13430" fg:w="48"/><text x="20.6808%" y="783.50"></text></g><g><title>__GI___libc_free (9 samples, 0.01%)</title><rect x="20.5221%" y="773" width="0.0137%" height="15" fill="rgb(228,99,48)" fg:x="13490" fg:w="9"/><text x="20.7721%" y="783.50"></text></g><g><title>&lt;fastfull_search::optimizer::physical_optimizer::min_operation_range::MinOperationRange as datafusion::physical_optimizer::optimizer::PhysicalOptimizerRule&gt;::optimize (123 samples, 0.19%)</title><rect x="20.3593%" y="853" width="0.1871%" height="15" fill="rgb(253,11,6)" fg:x="13383" fg:w="123"/><text x="20.6093%" y="863.50"></text></g><g><title>datafusion::physical_plan::rewrite::TreeNodeRewritable::transform_using (123 samples, 0.19%)</title><rect x="20.3593%" y="837" width="0.1871%" height="15" fill="rgb(247,143,39)" fg:x="13383" fg:w="123"/><text x="20.6093%" y="847.50"></text></g><g><title>datafusion::physical_plan::with_new_children_if_necessary (85 samples, 0.13%)</title><rect x="20.4171%" y="821" width="0.1293%" height="15" fill="rgb(236,97,10)" fg:x="13421" fg:w="85"/><text x="20.6671%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (18 samples, 0.03%)</title><rect x="20.5191%" y="805" width="0.0274%" height="15" fill="rgb(233,208,19)" fg:x="13488" fg:w="18"/><text x="20.7691%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastfull_search::datasources::posting_table::PostingExec&gt; (18 samples, 0.03%)</title><rect x="20.5191%" y="789" width="0.0274%" height="15" fill="rgb(216,164,2)" fg:x="13488" fg:w="18"/><text x="20.7691%" y="799.50"></text></g><g><title>&lt;dashmap::iter::OwningIter&lt;K,V,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (637 samples, 0.97%)</title><rect x="20.5464%" y="821" width="0.9691%" height="15" fill="rgb(220,129,5)" fg:x="13506" fg:w="637"/><text x="20.7964%" y="831.50"></text></g><g><title>_int_free (10 samples, 0.02%)</title><rect x="21.5155%" y="821" width="0.0152%" height="15" fill="rgb(242,17,10)" fg:x="14143" fg:w="10"/><text x="21.7655%" y="831.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::insert (15 samples, 0.02%)</title><rect x="21.5307%" y="821" width="0.0228%" height="15" fill="rgb(242,107,0)" fg:x="14153" fg:w="15"/><text x="21.7807%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10 samples, 0.02%)</title><rect x="21.5383%" y="805" width="0.0152%" height="15" fill="rgb(251,28,31)" fg:x="14158" fg:w="10"/><text x="21.7883%" y="815.50"></text></g><g><title>__GI___libc_free (7 samples, 0.01%)</title><rect x="21.5672%" y="805" width="0.0106%" height="15" fill="rgb(233,223,10)" fg:x="14177" fg:w="7"/><text x="21.8172%" y="815.50"></text></g><g><title>_int_free (7 samples, 0.01%)</title><rect x="21.5779%" y="805" width="0.0106%" height="15" fill="rgb(215,21,27)" fg:x="14184" fg:w="7"/><text x="21.8279%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 0.02%)</title><rect x="21.5885%" y="805" width="0.0198%" height="15" fill="rgb(232,23,21)" fg:x="14191" fg:w="13"/><text x="21.8385%" y="815.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.01%)</title><rect x="21.5961%" y="789" width="0.0122%" height="15" fill="rgb(244,5,23)" fg:x="14196" fg:w="8"/><text x="21.8461%" y="799.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.01%)</title><rect x="21.5961%" y="773" width="0.0122%" height="15" fill="rgb(226,81,46)" fg:x="14196" fg:w="8"/><text x="21.8461%" y="783.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::insert (32 samples, 0.05%)</title><rect x="21.6083%" y="805" width="0.0487%" height="15" fill="rgb(247,70,30)" fg:x="14204" fg:w="32"/><text x="21.8583%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (19 samples, 0.03%)</title><rect x="21.6281%" y="789" width="0.0289%" height="15" fill="rgb(212,68,19)" fg:x="14217" fg:w="19"/><text x="21.8781%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (14 samples, 0.02%)</title><rect x="21.6357%" y="773" width="0.0213%" height="15" fill="rgb(240,187,13)" fg:x="14222" fg:w="14"/><text x="21.8857%" y="783.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="22.0769%" y="773" width="0.0106%" height="15" fill="rgb(223,113,26)" fg:x="14512" fg:w="7"/><text x="22.3269%" y="783.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="22.0769%" y="757" width="0.0106%" height="15" fill="rgb(206,192,2)" fg:x="14512" fg:w="7"/><text x="22.3269%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="22.0769%" y="741" width="0.0106%" height="15" fill="rgb(241,108,4)" fg:x="14512" fg:w="7"/><text x="22.3269%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="22.0769%" y="725" width="0.0106%" height="15" fill="rgb(247,173,49)" fg:x="14512" fg:w="7"/><text x="22.3269%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="22.0769%" y="709" width="0.0106%" height="15" fill="rgb(224,114,35)" fg:x="14512" fg:w="7"/><text x="22.3269%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="22.0769%" y="693" width="0.0106%" height="15" fill="rgb(245,159,27)" fg:x="14512" fg:w="7"/><text x="22.3269%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="22.0769%" y="677" width="0.0106%" height="15" fill="rgb(245,172,44)" fg:x="14512" fg:w="7"/><text x="22.3269%" y="687.50"></text></g><g><title>dashmap::set::DashSet&lt;K&gt;::new (331 samples, 0.50%)</title><rect x="21.6570%" y="805" width="0.5035%" height="15" fill="rgb(236,23,11)" fg:x="14236" fg:w="331"/><text x="21.9070%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (330 samples, 0.50%)</title><rect x="21.6585%" y="789" width="0.5020%" height="15" fill="rgb(205,117,38)" fg:x="14237" fg:w="330"/><text x="21.9085%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (45 samples, 0.07%)</title><rect x="22.0921%" y="773" width="0.0685%" height="15" fill="rgb(237,72,25)" fg:x="14522" fg:w="45"/><text x="22.3421%" y="783.50"></text></g><g><title>&lt;fastfull_search::context::boolean_context::BooleanPlanner as datafusion::execution::context::QueryPlanner&gt;::create_physical_plan::{{closure}} (1,202 samples, 1.83%)</title><rect x="20.3593%" y="885" width="1.8286%" height="15" fill="rgb(244,70,9)" fg:x="13383" fg:w="1202"/><text x="20.6093%" y="895.50">&lt;..</text></g><g><title>&lt;fastfull_search::optimizer::planner::boolean_planner::BooleanPhysicalPlanner as datafusion::physical_plan::planner::PhysicalPlanner&gt;::create_physical_plan::_{{closure}} (1,202 samples, 1.83%)</title><rect x="20.3593%" y="869" width="1.8286%" height="15" fill="rgb(217,125,39)" fg:x="13383" fg:w="1202"/><text x="20.6093%" y="879.50">&lt;..</text></g><g><title>&lt;fastfull_search::optimizer::physical_optimizer::primitives_combination::PrimitivesCombination as datafusion::physical_optimizer::optimizer::PhysicalOptimizerRule&gt;::optimize (1,079 samples, 1.64%)</title><rect x="20.5464%" y="853" width="1.6415%" height="15" fill="rgb(235,36,10)" fg:x="13506" fg:w="1079"/><text x="20.7964%" y="863.50"></text></g><g><title>datafusion::physical_plan::rewrite::TreeNodeRewritable::transform_down (1,079 samples, 1.64%)</title><rect x="20.5464%" y="837" width="1.6415%" height="15" fill="rgb(251,123,47)" fg:x="13506" fg:w="1079"/><text x="20.7964%" y="847.50"></text></g><g><title>fastfull_search::optimizer::physical_optimizer::primitives_combination::optimize_predicate_inner (417 samples, 0.63%)</title><rect x="21.5535%" y="821" width="0.6344%" height="15" fill="rgb(221,13,13)" fg:x="14168" fg:w="417"/><text x="21.8035%" y="831.50"></text></g><g><title>fastfull_search::physical_expr::short_circuit_primitives::ShortCircuit::new (18 samples, 0.03%)</title><rect x="22.1605%" y="805" width="0.0274%" height="15" fill="rgb(238,131,9)" fg:x="14567" fg:w="18"/><text x="22.4105%" y="815.50"></text></g><g><title>[[kernel.kallsyms]] (9 samples, 0.01%)</title><rect x="24.9779%" y="725" width="0.0137%" height="15" fill="rgb(211,50,8)" fg:x="16419" fg:w="9"/><text x="25.2279%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (9 samples, 0.01%)</title><rect x="24.9779%" y="709" width="0.0137%" height="15" fill="rgb(245,182,24)" fg:x="16419" fg:w="9"/><text x="25.2279%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (9 samples, 0.01%)</title><rect x="24.9779%" y="693" width="0.0137%" height="15" fill="rgb(242,14,37)" fg:x="16419" fg:w="9"/><text x="25.2279%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (9 samples, 0.01%)</title><rect x="24.9779%" y="677" width="0.0137%" height="15" fill="rgb(246,228,12)" fg:x="16419" fg:w="9"/><text x="25.2279%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (9 samples, 0.01%)</title><rect x="24.9779%" y="661" width="0.0137%" height="15" fill="rgb(213,55,15)" fg:x="16419" fg:w="9"/><text x="25.2279%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (9 samples, 0.01%)</title><rect x="24.9779%" y="645" width="0.0137%" height="15" fill="rgb(209,9,3)" fg:x="16419" fg:w="9"/><text x="25.2279%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (9 samples, 0.01%)</title><rect x="24.9779%" y="629" width="0.0137%" height="15" fill="rgb(230,59,30)" fg:x="16419" fg:w="9"/><text x="25.2279%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.01%)</title><rect x="24.9795%" y="613" width="0.0122%" height="15" fill="rgb(209,121,21)" fg:x="16420" fg:w="8"/><text x="25.2295%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.01%)</title><rect x="24.9795%" y="597" width="0.0122%" height="15" fill="rgb(220,109,13)" fg:x="16420" fg:w="8"/><text x="25.2295%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.01%)</title><rect x="24.9795%" y="581" width="0.0122%" height="15" fill="rgb(232,18,1)" fg:x="16420" fg:w="8"/><text x="25.2295%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.01%)</title><rect x="24.9795%" y="565" width="0.0122%" height="15" fill="rgb(215,41,42)" fg:x="16420" fg:w="8"/><text x="25.2295%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (41 samples, 0.06%)</title><rect x="27.4683%" y="709" width="0.0624%" height="15" fill="rgb(224,123,36)" fg:x="18056" fg:w="41"/><text x="27.7183%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (39 samples, 0.06%)</title><rect x="27.4713%" y="693" width="0.0593%" height="15" fill="rgb(240,125,3)" fg:x="18058" fg:w="39"/><text x="27.7213%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (39 samples, 0.06%)</title><rect x="27.4713%" y="677" width="0.0593%" height="15" fill="rgb(205,98,50)" fg:x="18058" fg:w="39"/><text x="27.7213%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (39 samples, 0.06%)</title><rect x="27.4713%" y="661" width="0.0593%" height="15" fill="rgb(205,185,37)" fg:x="18058" fg:w="39"/><text x="27.7213%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (39 samples, 0.06%)</title><rect x="27.4713%" y="645" width="0.0593%" height="15" fill="rgb(238,207,15)" fg:x="18058" fg:w="39"/><text x="27.7213%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (37 samples, 0.06%)</title><rect x="27.4744%" y="629" width="0.0563%" height="15" fill="rgb(213,199,42)" fg:x="18060" fg:w="37"/><text x="27.7244%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (35 samples, 0.05%)</title><rect x="27.4774%" y="613" width="0.0532%" height="15" fill="rgb(235,201,11)" fg:x="18062" fg:w="35"/><text x="27.7274%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (34 samples, 0.05%)</title><rect x="27.4789%" y="597" width="0.0517%" height="15" fill="rgb(207,46,11)" fg:x="18063" fg:w="34"/><text x="27.7289%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (31 samples, 0.05%)</title><rect x="27.4835%" y="581" width="0.0472%" height="15" fill="rgb(241,35,35)" fg:x="18066" fg:w="31"/><text x="27.7335%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (30 samples, 0.05%)</title><rect x="27.4850%" y="565" width="0.0456%" height="15" fill="rgb(243,32,47)" fg:x="18067" fg:w="30"/><text x="27.7350%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (30 samples, 0.05%)</title><rect x="27.4850%" y="549" width="0.0456%" height="15" fill="rgb(247,202,23)" fg:x="18067" fg:w="30"/><text x="27.7350%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (12 samples, 0.02%)</title><rect x="27.5124%" y="533" width="0.0183%" height="15" fill="rgb(219,102,11)" fg:x="18085" fg:w="12"/><text x="27.7624%" y="543.50"></text></g><g><title>malloc_consolidate (1,749 samples, 2.66%)</title><rect x="24.9916%" y="725" width="2.6607%" height="15" fill="rgb(243,110,44)" fg:x="16428" fg:w="1749"/><text x="25.2416%" y="735.50">ma..</text></g><g><title>unlink_chunk.isra.0 (80 samples, 0.12%)</title><rect x="27.5307%" y="709" width="0.1217%" height="15" fill="rgb(222,74,54)" fg:x="18097" fg:w="80"/><text x="27.7807%" y="719.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3,779 samples, 5.75%)</title><rect x="22.1879%" y="837" width="5.7489%" height="15" fill="rgb(216,99,12)" fg:x="14585" fg:w="3779"/><text x="22.4379%" y="847.50">&lt;T as a..</text></g><g><title>__rdl_alloc (3,779 samples, 5.75%)</title><rect x="22.1879%" y="821" width="5.7489%" height="15" fill="rgb(226,22,26)" fg:x="14585" fg:w="3779"/><text x="22.4379%" y="831.50">__rdl_a..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,779 samples, 5.75%)</title><rect x="22.1879%" y="805" width="5.7489%" height="15" fill="rgb(217,163,10)" fg:x="14585" fg:w="3779"/><text x="22.4379%" y="815.50">std::sy..</text></g><g><title>std::sys::unix::alloc::aligned_malloc (3,779 samples, 5.75%)</title><rect x="22.1879%" y="789" width="5.7489%" height="15" fill="rgb(213,25,53)" fg:x="14585" fg:w="3779"/><text x="22.4379%" y="799.50">std::sy..</text></g><g><title>__posix_memalign (3,779 samples, 5.75%)</title><rect x="22.1879%" y="773" width="5.7489%" height="15" fill="rgb(252,105,26)" fg:x="14585" fg:w="3779"/><text x="22.4379%" y="783.50">__posix..</text></g><g><title>_int_memalign (3,779 samples, 5.75%)</title><rect x="22.1879%" y="757" width="5.7489%" height="15" fill="rgb(220,39,43)" fg:x="14585" fg:w="3779"/><text x="22.4379%" y="767.50">_int_me..</text></g><g><title>_int_malloc (3,779 samples, 5.75%)</title><rect x="22.1879%" y="741" width="5.7489%" height="15" fill="rgb(229,68,48)" fg:x="14585" fg:w="3779"/><text x="22.4379%" y="751.50">_int_ma..</text></g><g><title>unlink_chunk.isra.0 (187 samples, 0.28%)</title><rect x="27.6524%" y="725" width="0.2845%" height="15" fill="rgb(252,8,32)" fg:x="18177" fg:w="187"/><text x="27.9024%" y="735.50"></text></g><g><title>__rdl_alloc (240 samples, 0.37%)</title><rect x="27.9368%" y="837" width="0.3651%" height="15" fill="rgb(223,20,43)" fg:x="18364" fg:w="240"/><text x="28.1868%" y="847.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (240 samples, 0.37%)</title><rect x="27.9368%" y="821" width="0.3651%" height="15" fill="rgb(229,81,49)" fg:x="18364" fg:w="240"/><text x="28.1868%" y="831.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (240 samples, 0.37%)</title><rect x="27.9368%" y="805" width="0.3651%" height="15" fill="rgb(236,28,36)" fg:x="18364" fg:w="240"/><text x="28.1868%" y="815.50"></text></g><g><title>__posix_memalign (240 samples, 0.37%)</title><rect x="27.9368%" y="789" width="0.3651%" height="15" fill="rgb(249,185,26)" fg:x="18364" fg:w="240"/><text x="28.1868%" y="799.50"></text></g><g><title>_int_memalign (240 samples, 0.37%)</title><rect x="27.9368%" y="773" width="0.3651%" height="15" fill="rgb(249,174,33)" fg:x="18364" fg:w="240"/><text x="28.1868%" y="783.50"></text></g><g><title>_int_malloc (240 samples, 0.37%)</title><rect x="27.9368%" y="757" width="0.3651%" height="15" fill="rgb(233,201,37)" fg:x="18364" fg:w="240"/><text x="28.1868%" y="767.50"></text></g><g><title>malloc_consolidate (240 samples, 0.37%)</title><rect x="27.9368%" y="741" width="0.3651%" height="15" fill="rgb(221,78,26)" fg:x="18364" fg:w="240"/><text x="28.1868%" y="751.50"></text></g><g><title>unlink_chunk.isra.0 (15 samples, 0.02%)</title><rect x="28.2791%" y="725" width="0.0228%" height="15" fill="rgb(250,127,30)" fg:x="18589" fg:w="15"/><text x="28.5291%" y="735.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (4,157 samples, 6.32%)</title><rect x="22.1879%" y="885" width="6.3240%" height="15" fill="rgb(230,49,44)" fg:x="14585" fg:w="4157"/><text x="22.4379%" y="895.50">&lt;futures..</text></g><g><title>&lt;fastfull_search::datasources::posting_table::PostingStream as futures_core::stream::Stream&gt;::poll_next (4,157 samples, 6.32%)</title><rect x="22.1879%" y="869" width="6.3240%" height="15" fill="rgb(229,67,23)" fg:x="14585" fg:w="4157"/><text x="22.4379%" y="879.50">&lt;fastful..</text></g><g><title>fastfull_search::batch::posting_batch::PostingBatch::project_with_predicate (4,157 samples, 6.32%)</title><rect x="22.1879%" y="853" width="6.3240%" height="15" fill="rgb(249,83,47)" fg:x="14585" fg:w="4157"/><text x="22.4379%" y="863.50">fastfull..</text></g><g><title>fastfull_search::physical_expr::boolean_eval::PhysicalPredicate::eval_avx512 (138 samples, 0.21%)</title><rect x="28.3019%" y="837" width="0.2099%" height="15" fill="rgb(215,43,3)" fg:x="18604" fg:w="138"/><text x="28.5519%" y="847.50"></text></g><g><title>fastfull_search::physical_expr::boolean_eval::PhysicalPredicate::eval_avx512 (42 samples, 0.06%)</title><rect x="28.4480%" y="821" width="0.0639%" height="15" fill="rgb(238,154,13)" fg:x="18700" fg:w="42"/><text x="28.6980%" y="831.50"></text></g><g><title>fastfull_search::physical_expr::short_circuit_primitives::ShortCircuit::eval_avx512 (7 samples, 0.01%)</title><rect x="28.5012%" y="805" width="0.0106%" height="15" fill="rgb(219,56,2)" fg:x="18735" fg:w="7"/><text x="28.7512%" y="815.50"></text></g><g><title>_int_free (11 samples, 0.02%)</title><rect x="28.5225%" y="853" width="0.0167%" height="15" fill="rgb(233,0,4)" fg:x="18749" fg:w="11"/><text x="28.7725%" y="863.50"></text></g><g><title>core::fmt::Write::write_fmt (14 samples, 0.02%)</title><rect x="28.5499%" y="837" width="0.0213%" height="15" fill="rgb(235,30,7)" fg:x="18767" fg:w="14"/><text x="28.7999%" y="847.50"></text></g><g><title>core::fmt::write (11 samples, 0.02%)</title><rect x="28.5545%" y="821" width="0.0167%" height="15" fill="rgb(250,79,13)" fg:x="18770" fg:w="11"/><text x="28.8045%" y="831.50"></text></g><g><title>alloc::fmt::format::format_inner (23 samples, 0.03%)</title><rect x="28.5393%" y="853" width="0.0350%" height="15" fill="rgb(211,146,34)" fg:x="18760" fg:w="23"/><text x="28.7893%" y="863.50"></text></g><g><title>__GI___libc_free (7 samples, 0.01%)</title><rect x="28.5849%" y="821" width="0.0106%" height="15" fill="rgb(228,22,38)" fg:x="18790" fg:w="7"/><text x="28.8349%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;datafusion_expr::logical_plan::plan::LogicalPlan&gt; (30 samples, 0.05%)</title><rect x="28.5743%" y="853" width="0.0456%" height="15" fill="rgb(235,168,5)" fg:x="18783" fg:w="30"/><text x="28.8243%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;datafusion_expr::expr::Expr&gt; (23 samples, 0.03%)</title><rect x="28.5849%" y="837" width="0.0350%" height="15" fill="rgb(221,155,16)" fg:x="18790" fg:w="23"/><text x="28.8349%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;datafusion_expr::expr::Expr&gt; (15 samples, 0.02%)</title><rect x="28.5971%" y="821" width="0.0228%" height="15" fill="rgb(215,215,53)" fg:x="18798" fg:w="15"/><text x="28.8471%" y="831.50"></text></g><g><title>datafusion_common::dfschema::DFSchema::equivalent_names_and_types (12 samples, 0.02%)</title><rect x="28.6199%" y="853" width="0.0183%" height="15" fill="rgb(223,4,10)" fg:x="18813" fg:w="12"/><text x="28.8699%" y="863.50"></text></g><g><title>datafusion_expr::logical_plan::plan::LogicalPlan::schema (7 samples, 0.01%)</title><rect x="28.6381%" y="853" width="0.0106%" height="15" fill="rgb(234,103,6)" fg:x="18825" fg:w="7"/><text x="28.8881%" y="863.50"></text></g><g><title>datafusion::execution::context::SessionState::optimize (94 samples, 0.14%)</title><rect x="28.5119%" y="885" width="0.1430%" height="15" fill="rgb(227,97,0)" fg:x="18742" fg:w="94"/><text x="28.7619%" y="895.50"></text></g><g><title>datafusion_optimizer::optimizer::Optimizer::optimize (94 samples, 0.14%)</title><rect x="28.5119%" y="869" width="0.1430%" height="15" fill="rgb(234,150,53)" fg:x="18742" fg:w="94"/><text x="28.7619%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (7 samples, 0.01%)</title><rect x="28.6579%" y="613" width="0.0106%" height="15" fill="rgb(228,201,54)" fg:x="18838" fg:w="7"/><text x="28.9079%" y="623.50"></text></g><g><title>alloc::alloc::Global::grow_impl (7 samples, 0.01%)</title><rect x="28.6579%" y="597" width="0.0106%" height="15" fill="rgb(222,22,37)" fg:x="18838" fg:w="7"/><text x="28.9079%" y="607.50"></text></g><g><title>alloc::alloc::realloc (7 samples, 0.01%)</title><rect x="28.6579%" y="581" width="0.0106%" height="15" fill="rgb(237,53,32)" fg:x="18838" fg:w="7"/><text x="28.9079%" y="591.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.01%)</title><rect x="28.6579%" y="565" width="0.0106%" height="15" fill="rgb(233,25,53)" fg:x="18838" fg:w="7"/><text x="28.9079%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="28.6564%" y="629" width="0.0137%" height="15" fill="rgb(210,40,34)" fg:x="18837" fg:w="9"/><text x="28.9064%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (11 samples, 0.02%)</title><rect x="28.6549%" y="789" width="0.0167%" height="15" fill="rgb(241,220,44)" fg:x="18836" fg:w="11"/><text x="28.9049%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (11 samples, 0.02%)</title><rect x="28.6549%" y="773" width="0.0167%" height="15" fill="rgb(235,28,35)" fg:x="18836" fg:w="11"/><text x="28.9049%" y="783.50"></text></g><g><title>alloc::string::String::push_str (11 samples, 0.02%)</title><rect x="28.6549%" y="757" width="0.0167%" height="15" fill="rgb(210,56,17)" fg:x="18836" fg:w="11"/><text x="28.9049%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (11 samples, 0.02%)</title><rect x="28.6549%" y="741" width="0.0167%" height="15" fill="rgb(224,130,29)" fg:x="18836" fg:w="11"/><text x="28.9049%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11 samples, 0.02%)</title><rect x="28.6549%" y="725" width="0.0167%" height="15" fill="rgb(235,212,8)" fg:x="18836" fg:w="11"/><text x="28.9049%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (11 samples, 0.02%)</title><rect x="28.6549%" y="709" width="0.0167%" height="15" fill="rgb(223,33,50)" fg:x="18836" fg:w="11"/><text x="28.9049%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (11 samples, 0.02%)</title><rect x="28.6549%" y="693" width="0.0167%" height="15" fill="rgb(219,149,13)" fg:x="18836" fg:w="11"/><text x="28.9049%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.02%)</title><rect x="28.6549%" y="677" width="0.0167%" height="15" fill="rgb(250,156,29)" fg:x="18836" fg:w="11"/><text x="28.9049%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 0.02%)</title><rect x="28.6549%" y="661" width="0.0167%" height="15" fill="rgb(216,193,19)" fg:x="18836" fg:w="11"/><text x="28.9049%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (11 samples, 0.02%)</title><rect x="28.6549%" y="645" width="0.0167%" height="15" fill="rgb(216,135,14)" fg:x="18836" fg:w="11"/><text x="28.9049%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (12 samples, 0.02%)</title><rect x="28.6549%" y="837" width="0.0183%" height="15" fill="rgb(241,47,5)" fg:x="18836" fg:w="12"/><text x="28.9049%" y="847.50"></text></g><g><title>core::fmt::Write::write_fmt (12 samples, 0.02%)</title><rect x="28.6549%" y="821" width="0.0183%" height="15" fill="rgb(233,42,35)" fg:x="18836" fg:w="12"/><text x="28.9049%" y="831.50"></text></g><g><title>core::fmt::write (12 samples, 0.02%)</title><rect x="28.6549%" y="805" width="0.0183%" height="15" fill="rgb(231,13,6)" fg:x="18836" fg:w="12"/><text x="28.9049%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (17 samples, 0.03%)</title><rect x="28.7066%" y="597" width="0.0259%" height="15" fill="rgb(207,181,40)" fg:x="18870" fg:w="17"/><text x="28.9566%" y="607.50"></text></g><g><title>alloc::alloc::Global::grow_impl (17 samples, 0.03%)</title><rect x="28.7066%" y="581" width="0.0259%" height="15" fill="rgb(254,173,49)" fg:x="18870" fg:w="17"/><text x="28.9566%" y="591.50"></text></g><g><title>alloc::alloc::realloc (17 samples, 0.03%)</title><rect x="28.7066%" y="565" width="0.0259%" height="15" fill="rgb(221,1,38)" fg:x="18870" fg:w="17"/><text x="28.9566%" y="575.50"></text></g><g><title>__GI___libc_realloc (17 samples, 0.03%)</title><rect x="28.7066%" y="549" width="0.0259%" height="15" fill="rgb(206,124,46)" fg:x="18870" fg:w="17"/><text x="28.9566%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (23 samples, 0.03%)</title><rect x="28.7066%" y="677" width="0.0350%" height="15" fill="rgb(249,21,11)" fg:x="18870" fg:w="23"/><text x="28.9566%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (23 samples, 0.03%)</title><rect x="28.7066%" y="661" width="0.0350%" height="15" fill="rgb(222,201,40)" fg:x="18870" fg:w="23"/><text x="28.9566%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (23 samples, 0.03%)</title><rect x="28.7066%" y="645" width="0.0350%" height="15" fill="rgb(235,61,29)" fg:x="18870" fg:w="23"/><text x="28.9566%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (23 samples, 0.03%)</title><rect x="28.7066%" y="629" width="0.0350%" height="15" fill="rgb(219,207,3)" fg:x="18870" fg:w="23"/><text x="28.9566%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (23 samples, 0.03%)</title><rect x="28.7066%" y="613" width="0.0350%" height="15" fill="rgb(222,56,46)" fg:x="18870" fg:w="23"/><text x="28.9566%" y="623.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (28 samples, 0.04%)</title><rect x="28.7051%" y="773" width="0.0426%" height="15" fill="rgb(239,76,54)" fg:x="18869" fg:w="28"/><text x="28.9551%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (27 samples, 0.04%)</title><rect x="28.7066%" y="757" width="0.0411%" height="15" fill="rgb(231,124,27)" fg:x="18870" fg:w="27"/><text x="28.9566%" y="767.50"></text></g><g><title>alloc::string::String::push_str (27 samples, 0.04%)</title><rect x="28.7066%" y="741" width="0.0411%" height="15" fill="rgb(249,195,6)" fg:x="18870" fg:w="27"/><text x="28.9566%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (27 samples, 0.04%)</title><rect x="28.7066%" y="725" width="0.0411%" height="15" fill="rgb(237,174,47)" fg:x="18870" fg:w="27"/><text x="28.9566%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (27 samples, 0.04%)</title><rect x="28.7066%" y="709" width="0.0411%" height="15" fill="rgb(206,201,31)" fg:x="18870" fg:w="27"/><text x="28.9566%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (27 samples, 0.04%)</title><rect x="28.7066%" y="693" width="0.0411%" height="15" fill="rgb(231,57,52)" fg:x="18870" fg:w="27"/><text x="28.9566%" y="703.50"></text></g><g><title>datafusion_expr::logical_plan::builder::LogicalPlanBuilder::scan (71 samples, 0.11%)</title><rect x="28.6549%" y="885" width="0.1080%" height="15" fill="rgb(248,177,22)" fg:x="18836" fg:w="71"/><text x="28.9049%" y="895.50"></text></g><g><title>datafusion_common::dfschema::DFSchema::new_with_metadata (71 samples, 0.11%)</title><rect x="28.6549%" y="869" width="0.1080%" height="15" fill="rgb(215,211,37)" fg:x="18836" fg:w="71"/><text x="28.9049%" y="879.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (71 samples, 0.11%)</title><rect x="28.6549%" y="853" width="0.1080%" height="15" fill="rgb(241,128,51)" fg:x="18836" fg:w="71"/><text x="28.9049%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (59 samples, 0.09%)</title><rect x="28.6731%" y="837" width="0.0898%" height="15" fill="rgb(227,165,31)" fg:x="18848" fg:w="59"/><text x="28.9231%" y="847.50"></text></g><g><title>alloc::fmt::format::format_inner (53 samples, 0.08%)</title><rect x="28.6823%" y="821" width="0.0806%" height="15" fill="rgb(228,167,24)" fg:x="18854" fg:w="53"/><text x="28.9323%" y="831.50"></text></g><g><title>core::fmt::Write::write_fmt (49 samples, 0.07%)</title><rect x="28.6884%" y="805" width="0.0745%" height="15" fill="rgb(228,143,12)" fg:x="18858" fg:w="49"/><text x="28.9384%" y="815.50"></text></g><g><title>core::fmt::write (44 samples, 0.07%)</title><rect x="28.6960%" y="789" width="0.0669%" height="15" fill="rgb(249,149,8)" fg:x="18863" fg:w="44"/><text x="28.9460%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (11 samples, 0.02%)</title><rect x="28.7629%" y="805" width="0.0167%" height="15" fill="rgb(243,35,44)" fg:x="18907" fg:w="11"/><text x="29.0129%" y="815.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.02%)</title><rect x="28.7629%" y="789" width="0.0167%" height="15" fill="rgb(246,89,9)" fg:x="18907" fg:w="11"/><text x="29.0129%" y="799.50"></text></g><g><title>_int_malloc (11 samples, 0.02%)</title><rect x="28.7629%" y="773" width="0.0167%" height="15" fill="rgb(233,213,13)" fg:x="18907" fg:w="11"/><text x="29.0129%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="28.7827%" y="789" width="0.0106%" height="15" fill="rgb(233,141,41)" fg:x="18920" fg:w="7"/><text x="29.0327%" y="799.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="28.7827%" y="773" width="0.0106%" height="15" fill="rgb(239,167,4)" fg:x="18920" fg:w="7"/><text x="29.0327%" y="783.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.01%)</title><rect x="28.7827%" y="757" width="0.0106%" height="15" fill="rgb(209,217,16)" fg:x="18920" fg:w="7"/><text x="29.0327%" y="767.50"></text></g><g><title>do_query::main::_{{closure}} (5,550 samples, 8.44%)</title><rect x="20.3593%" y="917" width="8.4431%" height="15" fill="rgb(219,88,35)" fg:x="13383" fg:w="5550"/><text x="20.6093%" y="927.50">do_query::ma..</text></g><g><title>do_query::main_inner::{{closure}} (5,550 samples, 8.44%)</title><rect x="20.3593%" y="901" width="8.4431%" height="15" fill="rgb(220,193,23)" fg:x="13383" fg:w="5550"/><text x="20.6093%" y="911.50">do_query::ma..</text></g><g><title>fastfull_search::query::boolean_query::BooleanPredicateBuilder::must (26 samples, 0.04%)</title><rect x="28.7629%" y="885" width="0.0396%" height="15" fill="rgb(230,90,52)" fg:x="18907" fg:w="26"/><text x="29.0129%" y="895.50"></text></g><g><title>&lt;datafusion_common::column::Column as core::convert::From&lt;&amp;str&gt;&gt;::from (26 samples, 0.04%)</title><rect x="28.7629%" y="869" width="0.0396%" height="15" fill="rgb(252,106,19)" fg:x="18907" fg:w="26"/><text x="29.0129%" y="879.50"></text></g><g><title>sqlparser::tokenizer::Tokenizer::tokenize (26 samples, 0.04%)</title><rect x="28.7629%" y="853" width="0.0396%" height="15" fill="rgb(206,74,20)" fg:x="18907" fg:w="26"/><text x="29.0129%" y="863.50"></text></g><g><title>sqlparser::tokenizer::Tokenizer::tokenize_with_location (26 samples, 0.04%)</title><rect x="28.7629%" y="837" width="0.0396%" height="15" fill="rgb(230,138,44)" fg:x="18907" fg:w="26"/><text x="29.0129%" y="847.50"></text></g><g><title>sqlparser::tokenizer::Tokenizer::next_token (26 samples, 0.04%)</title><rect x="28.7629%" y="821" width="0.0396%" height="15" fill="rgb(235,182,43)" fg:x="18907" fg:w="26"/><text x="29.0129%" y="831.50"></text></g><g><title>sqlparser::tokenizer::Tokenizer::tokenize_word (15 samples, 0.02%)</title><rect x="28.7796%" y="805" width="0.0228%" height="15" fill="rgb(242,16,51)" fg:x="18918" fg:w="15"/><text x="29.0296%" y="815.50"></text></g><g><title>&lt;fastfull_search::optimizer::physical_optimizer::min_operation_range::GetMinRange as datafusion::physical_plan::rewrite::TreeNodeRewriter&lt;alloc::sync::Arc&lt;dyn datafusion::physical_plan::ExecutionPlan&gt;&gt;&gt;::mutate (12 samples, 0.02%)</title><rect x="28.8024%" y="837" width="0.0183%" height="15" fill="rgb(248,9,4)" fg:x="18933" fg:w="12"/><text x="29.0524%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (12 samples, 0.02%)</title><rect x="28.8024%" y="821" width="0.0183%" height="15" fill="rgb(210,31,22)" fg:x="18933" fg:w="12"/><text x="29.0524%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;datafusion::physical_plan::boolean::BooleanExec&gt; (12 samples, 0.02%)</title><rect x="28.8024%" y="805" width="0.0183%" height="15" fill="rgb(239,54,39)" fg:x="18933" fg:w="12"/><text x="29.0524%" y="815.50"></text></g><g><title>__GI___libc_malloc (31 samples, 0.05%)</title><rect x="28.8557%" y="741" width="0.0472%" height="15" fill="rgb(230,99,41)" fg:x="18968" fg:w="31"/><text x="29.1057%" y="751.50"></text></g><g><title>_int_malloc (24 samples, 0.04%)</title><rect x="28.8663%" y="725" width="0.0365%" height="15" fill="rgb(253,106,12)" fg:x="18975" fg:w="24"/><text x="29.1163%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (39 samples, 0.06%)</title><rect x="28.8450%" y="757" width="0.0593%" height="15" fill="rgb(213,46,41)" fg:x="18961" fg:w="39"/><text x="29.0950%" y="767.50"></text></g><g><title>&lt;fastfull_search::optimizer::physical_optimizer::min_operation_range::GetMinRange as datafusion::physical_plan::rewrite::TreeNodeRewriter&lt;alloc::sync::Arc&lt;dyn datafusion::physical_plan::ExecutionPlan&gt;&gt;&gt;::mutate (53 samples, 0.08%)</title><rect x="28.8253%" y="773" width="0.0806%" height="15" fill="rgb(215,133,35)" fg:x="18948" fg:w="53"/><text x="29.0753%" y="783.50"></text></g><g><title>arrow_buffer::buffer::immutable::Buffer::from_slice_ref (76 samples, 0.12%)</title><rect x="29.0519%" y="709" width="0.1156%" height="15" fill="rgb(213,28,5)" fg:x="19097" fg:w="76"/><text x="29.3019%" y="719.50"></text></g><g><title>arrow_buffer::alloc::allocate_aligned (58 samples, 0.09%)</title><rect x="29.0793%" y="693" width="0.0882%" height="15" fill="rgb(215,77,49)" fg:x="19115" fg:w="58"/><text x="29.3293%" y="703.50"></text></g><g><title>__rdl_alloc (58 samples, 0.09%)</title><rect x="29.0793%" y="677" width="0.0882%" height="15" fill="rgb(248,100,22)" fg:x="19115" fg:w="58"/><text x="29.3293%" y="687.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (58 samples, 0.09%)</title><rect x="29.0793%" y="661" width="0.0882%" height="15" fill="rgb(208,67,9)" fg:x="19115" fg:w="58"/><text x="29.3293%" y="671.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (58 samples, 0.09%)</title><rect x="29.0793%" y="645" width="0.0882%" height="15" fill="rgb(219,133,21)" fg:x="19115" fg:w="58"/><text x="29.3293%" y="655.50"></text></g><g><title>__posix_memalign (58 samples, 0.09%)</title><rect x="29.0793%" y="629" width="0.0882%" height="15" fill="rgb(246,46,29)" fg:x="19115" fg:w="58"/><text x="29.3293%" y="639.50"></text></g><g><title>_int_memalign (7 samples, 0.01%)</title><rect x="29.1569%" y="613" width="0.0106%" height="15" fill="rgb(246,185,52)" fg:x="19166" fg:w="7"/><text x="29.4069%" y="623.50"></text></g><g><title>&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::UInt64Type&gt; as core::convert::From&lt;alloc::vec::Vec&lt;&lt;arrow_array::types::UInt64Type as arrow_array::array::primitive_array::ArrowPrimitiveType&gt;::Native&gt;&gt;&gt;::from (84 samples, 0.13%)</title><rect x="29.0413%" y="725" width="0.1278%" height="15" fill="rgb(252,136,11)" fg:x="19090" fg:w="84"/><text x="29.2913%" y="735.50"></text></g><g><title>__rdl_alloc (12 samples, 0.02%)</title><rect x="29.1995%" y="661" width="0.0183%" height="15" fill="rgb(219,138,53)" fg:x="19194" fg:w="12"/><text x="29.4495%" y="671.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (12 samples, 0.02%)</title><rect x="29.1995%" y="645" width="0.0183%" height="15" fill="rgb(211,51,23)" fg:x="19194" fg:w="12"/><text x="29.4495%" y="655.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (12 samples, 0.02%)</title><rect x="29.1995%" y="629" width="0.0183%" height="15" fill="rgb(247,221,28)" fg:x="19194" fg:w="12"/><text x="29.4495%" y="639.50"></text></g><g><title>__posix_memalign (12 samples, 0.02%)</title><rect x="29.1995%" y="613" width="0.0183%" height="15" fill="rgb(251,222,45)" fg:x="19194" fg:w="12"/><text x="29.4495%" y="623.50"></text></g><g><title>_int_memalign (9 samples, 0.01%)</title><rect x="29.2041%" y="597" width="0.0137%" height="15" fill="rgb(217,162,53)" fg:x="19197" fg:w="9"/><text x="29.4541%" y="607.50"></text></g><g><title>arrow_buffer::buffer::immutable::Buffer::from_slice_ref (26 samples, 0.04%)</title><rect x="29.1797%" y="693" width="0.0396%" height="15" fill="rgb(229,93,14)" fg:x="19181" fg:w="26"/><text x="29.4297%" y="703.50"></text></g><g><title>arrow_buffer::alloc::allocate_aligned (13 samples, 0.02%)</title><rect x="29.1995%" y="677" width="0.0198%" height="15" fill="rgb(209,67,49)" fg:x="19194" fg:w="13"/><text x="29.4495%" y="687.50"></text></g><g><title>&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::UInt64Type&gt; as core::convert::From&lt;alloc::vec::Vec&lt;&lt;arrow_array::types::UInt64Type as arrow_array::array::primitive_array::ArrowPrimitiveType&gt;::Native&gt;&gt;&gt;::from (35 samples, 0.05%)</title><rect x="29.1736%" y="709" width="0.0532%" height="15" fill="rgb(213,87,29)" fg:x="19177" fg:w="35"/><text x="29.4236%" y="719.50"></text></g><g><title>&lt;fastfull_search::physical_expr::boolean_eval::BooleanEvalExpr as datafusion_physical_expr::physical_expr::PhysicalExpr&gt;::evaluate (96 samples, 0.15%)</title><rect x="29.1691%" y="725" width="0.1460%" height="15" fill="rgb(205,151,52)" fg:x="19174" fg:w="96"/><text x="29.4191%" y="735.50"></text></g><g><title>fastfull_search::physical_expr::boolean_eval::PhysicalPredicate::eval (52 samples, 0.08%)</title><rect x="29.2360%" y="709" width="0.0791%" height="15" fill="rgb(253,215,39)" fg:x="19218" fg:w="52"/><text x="29.4860%" y="719.50"></text></g><g><title>fastfull_search::physical_expr::boolean_eval::PhysicalPredicate::eval (50 samples, 0.08%)</title><rect x="29.2391%" y="693" width="0.0761%" height="15" fill="rgb(221,220,41)" fg:x="19220" fg:w="50"/><text x="29.4891%" y="703.50"></text></g><g><title>__calloc (20 samples, 0.03%)</title><rect x="29.3182%" y="725" width="0.0304%" height="15" fill="rgb(218,133,21)" fg:x="19272" fg:w="20"/><text x="29.5682%" y="735.50"></text></g><g><title>_int_malloc (17 samples, 0.03%)</title><rect x="29.3227%" y="709" width="0.0259%" height="15" fill="rgb(221,193,43)" fg:x="19275" fg:w="17"/><text x="29.5727%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (11 samples, 0.02%)</title><rect x="29.3532%" y="725" width="0.0167%" height="15" fill="rgb(240,128,52)" fg:x="19295" fg:w="11"/><text x="29.6032%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (10 samples, 0.02%)</title><rect x="29.3547%" y="709" width="0.0152%" height="15" fill="rgb(253,114,12)" fg:x="19296" fg:w="10"/><text x="29.6047%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (297 samples, 0.45%)</title><rect x="28.9287%" y="741" width="0.4518%" height="15" fill="rgb(215,223,47)" fg:x="19016" fg:w="297"/><text x="29.1787%" y="751.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.01%)</title><rect x="29.4718%" y="661" width="0.0106%" height="15" fill="rgb(248,225,23)" fg:x="19373" fg:w="7"/><text x="29.7218%" y="671.50"></text></g><g><title>&lt;art_tree::keys::ByteString as art_tree::keys::Key&gt;::to_bytes (15 samples, 0.02%)</title><rect x="29.4718%" y="677" width="0.0228%" height="15" fill="rgb(250,108,0)" fg:x="19373" fg:w="15"/><text x="29.7218%" y="687.50"></text></g><g><title>art_tree::Art&lt;K,V&gt;::get_with_length (72 samples, 0.11%)</title><rect x="29.4155%" y="693" width="0.1095%" height="15" fill="rgb(228,208,7)" fg:x="19336" fg:w="72"/><text x="29.6655%" y="703.50"></text></g><g><title>adaptive_hybrid_trie::ah_trie::AHTrieInner&lt;T&gt;::get (83 samples, 0.13%)</title><rect x="29.4049%" y="709" width="0.1263%" height="15" fill="rgb(244,45,10)" fg:x="19329" fg:w="83"/><text x="29.6549%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (418 samples, 0.64%)</title><rect x="28.9226%" y="757" width="0.6359%" height="15" fill="rgb(207,125,25)" fg:x="19012" fg:w="418"/><text x="29.1726%" y="767.50"></text></g><g><title>adaptive_hybrid_trie::ah_trie::ah_trie::AHTrie&lt;T&gt;::get (110 samples, 0.17%)</title><rect x="29.3912%" y="741" width="0.1673%" height="15" fill="rgb(210,195,18)" fg:x="19320" fg:w="110"/><text x="29.6412%" y="751.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (107 samples, 0.16%)</title><rect x="29.3957%" y="725" width="0.1628%" height="15" fill="rgb(249,80,12)" fg:x="19323" fg:w="107"/><text x="29.6457%" y="735.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (18 samples, 0.03%)</title><rect x="29.5311%" y="709" width="0.0274%" height="15" fill="rgb(221,65,9)" fg:x="19412" fg:w="18"/><text x="29.7811%" y="719.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.02%)</title><rect x="29.5342%" y="693" width="0.0243%" height="15" fill="rgb(235,49,36)" fg:x="19414" fg:w="16"/><text x="29.7842%" y="703.50"></text></g><g><title>_int_malloc (10 samples, 0.02%)</title><rect x="29.5433%" y="677" width="0.0152%" height="15" fill="rgb(225,32,20)" fg:x="19420" fg:w="10"/><text x="29.7933%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (489 samples, 0.74%)</title><rect x="28.8207%" y="837" width="0.7439%" height="15" fill="rgb(215,141,46)" fg:x="18945" fg:w="489"/><text x="29.0707%" y="847.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (489 samples, 0.74%)</title><rect x="28.8207%" y="821" width="0.7439%" height="15" fill="rgb(250,160,47)" fg:x="18945" fg:w="489"/><text x="29.0707%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (489 samples, 0.74%)</title><rect x="28.8207%" y="805" width="0.7439%" height="15" fill="rgb(216,222,40)" fg:x="18945" fg:w="489"/><text x="29.0707%" y="815.50"></text></g><g><title>datafusion::physical_plan::rewrite::TreeNodeRewritable::transform_using (489 samples, 0.74%)</title><rect x="28.8207%" y="789" width="0.7439%" height="15" fill="rgb(234,217,39)" fg:x="18945" fg:w="489"/><text x="29.0707%" y="799.50"></text></g><g><title>&lt;fastfull_search::optimizer::physical_optimizer::min_operation_range::GetMinRange as datafusion::physical_plan::rewrite::TreeNodeRewriter&lt;alloc::sync::Arc&lt;dyn datafusion::physical_plan::ExecutionPlan&gt;&gt;&gt;::pre_visit (433 samples, 0.66%)</title><rect x="28.9059%" y="773" width="0.6587%" height="15" fill="rgb(207,178,40)" fg:x="19001" fg:w="433"/><text x="29.1559%" y="783.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (7 samples, 0.01%)</title><rect x="29.5722%" y="805" width="0.0106%" height="15" fill="rgb(221,136,13)" fg:x="19439" fg:w="7"/><text x="29.8222%" y="815.50"></text></g><g><title>&lt;fastfull_search::optimizer::physical_optimizer::min_operation_range::MinOperationRange as datafusion::physical_optimizer::optimizer::PhysicalOptimizerRule&gt;::optimize (516 samples, 0.78%)</title><rect x="28.8024%" y="869" width="0.7850%" height="15" fill="rgb(249,199,10)" fg:x="18933" fg:w="516"/><text x="29.0524%" y="879.50"></text></g><g><title>datafusion::physical_plan::rewrite::TreeNodeRewritable::transform_using (516 samples, 0.78%)</title><rect x="28.8024%" y="853" width="0.7850%" height="15" fill="rgb(249,222,13)" fg:x="18933" fg:w="516"/><text x="29.0524%" y="863.50"></text></g><g><title>datafusion::physical_plan::with_new_children_if_necessary (15 samples, 0.02%)</title><rect x="29.5646%" y="837" width="0.0228%" height="15" fill="rgb(244,185,38)" fg:x="19434" fg:w="15"/><text x="29.8146%" y="847.50"></text></g><g><title>&lt;datafusion::physical_plan::boolean::BooleanExec as datafusion::physical_plan::ExecutionPlan&gt;::with_new_children (15 samples, 0.02%)</title><rect x="29.5646%" y="821" width="0.0228%" height="15" fill="rgb(236,202,9)" fg:x="19434" fg:w="15"/><text x="29.8146%" y="831.50"></text></g><g><title>dashmap::set::DashSet&lt;K&gt;::new (48 samples, 0.07%)</title><rect x="29.5874%" y="821" width="0.0730%" height="15" fill="rgb(250,229,37)" fg:x="19449" fg:w="48"/><text x="29.8374%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (48 samples, 0.07%)</title><rect x="29.5874%" y="805" width="0.0730%" height="15" fill="rgb(206,174,23)" fg:x="19449" fg:w="48"/><text x="29.8374%" y="815.50"></text></g><g><title>__GI___libc_malloc (48 samples, 0.07%)</title><rect x="29.5874%" y="789" width="0.0730%" height="15" fill="rgb(211,33,43)" fg:x="19449" fg:w="48"/><text x="29.8374%" y="799.50"></text></g><g><title>_int_malloc (48 samples, 0.07%)</title><rect x="29.5874%" y="773" width="0.0730%" height="15" fill="rgb(245,58,50)" fg:x="19449" fg:w="48"/><text x="29.8374%" y="783.50"></text></g><g><title>malloc_consolidate (31 samples, 0.05%)</title><rect x="29.6133%" y="757" width="0.0472%" height="15" fill="rgb(244,68,36)" fg:x="19466" fg:w="31"/><text x="29.8633%" y="767.50"></text></g><g><title>&lt;fastfull_search::optimizer::physical_optimizer::primitives_combination::PrimitivesCombination as datafusion::physical_optimizer::optimizer::PhysicalOptimizerRule&gt;::optimize (60 samples, 0.09%)</title><rect x="29.5874%" y="869" width="0.0913%" height="15" fill="rgb(232,229,15)" fg:x="19449" fg:w="60"/><text x="29.8374%" y="879.50"></text></g><g><title>datafusion::physical_plan::rewrite::TreeNodeRewritable::transform_down (60 samples, 0.09%)</title><rect x="29.5874%" y="853" width="0.0913%" height="15" fill="rgb(254,30,23)" fg:x="19449" fg:w="60"/><text x="29.8374%" y="863.50"></text></g><g><title>fastfull_search::optimizer::physical_optimizer::primitives_combination::optimize_predicate_inner (60 samples, 0.09%)</title><rect x="29.5874%" y="837" width="0.0913%" height="15" fill="rgb(235,160,14)" fg:x="19449" fg:w="60"/><text x="29.8374%" y="847.50"></text></g><g><title>fastfull_search::physical_expr::short_circuit_primitives::ShortCircuit::new (12 samples, 0.02%)</title><rect x="29.6604%" y="821" width="0.0183%" height="15" fill="rgb(212,155,44)" fg:x="19497" fg:w="12"/><text x="29.9104%" y="831.50"></text></g><g><title>fastfull_search::physical_expr::short_circuit_primitives::convert_predicate (8 samples, 0.01%)</title><rect x="29.6665%" y="805" width="0.0122%" height="15" fill="rgb(226,2,50)" fg:x="19501" fg:w="8"/><text x="29.9165%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (24 samples, 0.04%)</title><rect x="29.7350%" y="837" width="0.0365%" height="15" fill="rgb(234,177,6)" fg:x="19546" fg:w="24"/><text x="29.9850%" y="847.50"></text></g><g><title>__GI___libc_malloc (21 samples, 0.03%)</title><rect x="29.7396%" y="821" width="0.0319%" height="15" fill="rgb(217,24,9)" fg:x="19549" fg:w="21"/><text x="29.9896%" y="831.50"></text></g><g><title>_int_malloc (15 samples, 0.02%)</title><rect x="29.7487%" y="805" width="0.0228%" height="15" fill="rgb(220,13,46)" fg:x="19555" fg:w="15"/><text x="29.9987%" y="815.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (31 samples, 0.05%)</title><rect x="29.7274%" y="853" width="0.0472%" height="15" fill="rgb(239,221,27)" fg:x="19541" fg:w="31"/><text x="29.9774%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.01%)</title><rect x="29.7791%" y="853" width="0.0122%" height="15" fill="rgb(222,198,25)" fg:x="19575" fg:w="8"/><text x="30.0291%" y="863.50"></text></g><g><title>&lt;art_tree::keys::ByteString as art_tree::keys::Key&gt;::to_bytes (69 samples, 0.10%)</title><rect x="30.6356%" y="773" width="0.1050%" height="15" fill="rgb(211,99,13)" fg:x="20138" fg:w="69"/><text x="30.8856%" y="783.50"></text></g><g><title>__memmove_avx_unaligned_erms (62 samples, 0.09%)</title><rect x="30.6462%" y="757" width="0.0943%" height="15" fill="rgb(232,111,31)" fg:x="20145" fg:w="62"/><text x="30.8962%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (12 samples, 0.02%)</title><rect x="30.7406%" y="773" width="0.0183%" height="15" fill="rgb(245,82,37)" fg:x="20207" fg:w="12"/><text x="30.9906%" y="783.50"></text></g><g><title>[[kernel.kallsyms]] (12 samples, 0.02%)</title><rect x="30.7406%" y="757" width="0.0183%" height="15" fill="rgb(227,149,46)" fg:x="20207" fg:w="12"/><text x="30.9906%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (12 samples, 0.02%)</title><rect x="30.7406%" y="741" width="0.0183%" height="15" fill="rgb(218,36,50)" fg:x="20207" fg:w="12"/><text x="30.9906%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (12 samples, 0.02%)</title><rect x="30.7406%" y="725" width="0.0183%" height="15" fill="rgb(226,80,48)" fg:x="20207" fg:w="12"/><text x="30.9906%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (12 samples, 0.02%)</title><rect x="30.7406%" y="709" width="0.0183%" height="15" fill="rgb(238,224,15)" fg:x="20207" fg:w="12"/><text x="30.9906%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (10 samples, 0.02%)</title><rect x="30.7436%" y="693" width="0.0152%" height="15" fill="rgb(241,136,10)" fg:x="20209" fg:w="10"/><text x="30.9936%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (9 samples, 0.01%)</title><rect x="30.7451%" y="677" width="0.0137%" height="15" fill="rgb(208,32,45)" fg:x="20210" fg:w="9"/><text x="30.9951%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (9 samples, 0.01%)</title><rect x="30.7451%" y="661" width="0.0137%" height="15" fill="rgb(207,135,9)" fg:x="20210" fg:w="9"/><text x="30.9951%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.01%)</title><rect x="30.7466%" y="645" width="0.0122%" height="15" fill="rgb(206,86,44)" fg:x="20211" fg:w="8"/><text x="30.9966%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="30.7482%" y="629" width="0.0106%" height="15" fill="rgb(245,177,15)" fg:x="20212" fg:w="7"/><text x="30.9982%" y="639.50"></text></g><g><title>__memmove_avx_unaligned_erms (7 samples, 0.01%)</title><rect x="30.7649%" y="773" width="0.0106%" height="15" fill="rgb(206,64,50)" fg:x="20223" fg:w="7"/><text x="31.0149%" y="783.50"></text></g><g><title>art_tree::Art&lt;K,V&gt;::get_with_length (766 samples, 1.17%)</title><rect x="29.8689%" y="789" width="1.1653%" height="15" fill="rgb(234,36,40)" fg:x="19634" fg:w="766"/><text x="30.1189%" y="799.50"></text></g><g><title>art_tree::node::BoxedNode&lt;V&gt;::get_mut (163 samples, 0.25%)</title><rect x="30.7862%" y="773" width="0.2480%" height="15" fill="rgb(213,64,8)" fg:x="20237" fg:w="163"/><text x="31.0362%" y="783.50"></text></g><g><title>adaptive_hybrid_trie::ah_trie::AHTrieInner&lt;T&gt;::get (794 samples, 1.21%)</title><rect x="29.8293%" y="805" width="1.2079%" height="15" fill="rgb(210,75,36)" fg:x="19608" fg:w="794"/><text x="30.0793%" y="815.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (118 samples, 0.18%)</title><rect x="31.0372%" y="805" width="0.1795%" height="15" fill="rgb(229,88,21)" fg:x="20402" fg:w="118"/><text x="31.2872%" y="815.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.01%)</title><rect x="31.2061%" y="789" width="0.0106%" height="15" fill="rgb(252,204,47)" fg:x="20513" fg:w="7"/><text x="31.4561%" y="799.50"></text></g><g><title>adaptive_hybrid_trie::ah_trie::ah_trie::AHTrie&lt;T&gt;::get (929 samples, 1.41%)</title><rect x="29.8065%" y="837" width="1.4133%" height="15" fill="rgb(208,77,27)" fg:x="19593" fg:w="929"/><text x="30.0565%" y="847.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (928 samples, 1.41%)</title><rect x="29.8080%" y="821" width="1.4118%" height="15" fill="rgb(221,76,26)" fg:x="19594" fg:w="928"/><text x="30.0580%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.02%)</title><rect x="31.2350%" y="821" width="0.0167%" height="15" fill="rgb(225,139,18)" fg:x="20532" fg:w="11"/><text x="31.4850%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (990 samples, 1.51%)</title><rect x="29.7913%" y="853" width="1.5061%" height="15" fill="rgb(230,137,11)" fg:x="19583" fg:w="990"/><text x="30.0413%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (50 samples, 0.08%)</title><rect x="31.2213%" y="837" width="0.0761%" height="15" fill="rgb(212,28,1)" fg:x="20523" fg:w="50"/><text x="31.4713%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (30 samples, 0.05%)</title><rect x="31.2517%" y="821" width="0.0456%" height="15" fill="rgb(248,164,17)" fg:x="20543" fg:w="30"/><text x="31.5017%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (21 samples, 0.03%)</title><rect x="31.2654%" y="805" width="0.0319%" height="15" fill="rgb(222,171,42)" fg:x="20552" fg:w="21"/><text x="31.5154%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9 samples, 0.01%)</title><rect x="31.3065%" y="837" width="0.0137%" height="15" fill="rgb(243,84,45)" fg:x="20579" fg:w="9"/><text x="31.5565%" y="847.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (20 samples, 0.03%)</title><rect x="31.3004%" y="853" width="0.0304%" height="15" fill="rgb(252,49,23)" fg:x="20575" fg:w="20"/><text x="31.5504%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.01%)</title><rect x="31.3202%" y="837" width="0.0106%" height="15" fill="rgb(215,19,7)" fg:x="20588" fg:w="7"/><text x="31.5702%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.01%)</title><rect x="31.3947%" y="821" width="0.0122%" height="15" fill="rgb(238,81,41)" fg:x="20637" fg:w="8"/><text x="31.6447%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (67 samples, 0.10%)</title><rect x="31.4464%" y="661" width="0.1019%" height="15" fill="rgb(210,199,37)" fg:x="20671" fg:w="67"/><text x="31.6964%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (67 samples, 0.10%)</title><rect x="31.4464%" y="645" width="0.1019%" height="15" fill="rgb(244,192,49)" fg:x="20671" fg:w="67"/><text x="31.6964%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (67 samples, 0.10%)</title><rect x="31.4464%" y="629" width="0.1019%" height="15" fill="rgb(226,211,11)" fg:x="20671" fg:w="67"/><text x="31.6964%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (67 samples, 0.10%)</title><rect x="31.4464%" y="613" width="0.1019%" height="15" fill="rgb(236,162,54)" fg:x="20671" fg:w="67"/><text x="31.6964%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (67 samples, 0.10%)</title><rect x="31.4464%" y="597" width="0.1019%" height="15" fill="rgb(220,229,9)" fg:x="20671" fg:w="67"/><text x="31.6964%" y="607.50"></text></g><g><title>alloc::alloc::alloc (67 samples, 0.10%)</title><rect x="31.4464%" y="581" width="0.1019%" height="15" fill="rgb(250,87,22)" fg:x="20671" fg:w="67"/><text x="31.6964%" y="591.50"></text></g><g><title>__GI___libc_malloc (67 samples, 0.10%)</title><rect x="31.4464%" y="565" width="0.1019%" height="15" fill="rgb(239,43,17)" fg:x="20671" fg:w="67"/><text x="31.6964%" y="575.50"></text></g><g><title>_int_malloc (57 samples, 0.09%)</title><rect x="31.4616%" y="549" width="0.0867%" height="15" fill="rgb(231,177,25)" fg:x="20681" fg:w="57"/><text x="31.7116%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (68 samples, 0.10%)</title><rect x="31.4464%" y="741" width="0.1034%" height="15" fill="rgb(219,179,1)" fg:x="20671" fg:w="68"/><text x="31.6964%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (68 samples, 0.10%)</title><rect x="31.4464%" y="725" width="0.1034%" height="15" fill="rgb(238,219,53)" fg:x="20671" fg:w="68"/><text x="31.6964%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (68 samples, 0.10%)</title><rect x="31.4464%" y="709" width="0.1034%" height="15" fill="rgb(232,167,36)" fg:x="20671" fg:w="68"/><text x="31.6964%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (68 samples, 0.10%)</title><rect x="31.4464%" y="693" width="0.1034%" height="15" fill="rgb(244,19,51)" fg:x="20671" fg:w="68"/><text x="31.6964%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (68 samples, 0.10%)</title><rect x="31.4464%" y="677" width="0.1034%" height="15" fill="rgb(224,6,22)" fg:x="20671" fg:w="68"/><text x="31.6964%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (85 samples, 0.13%)</title><rect x="31.4312%" y="773" width="0.1293%" height="15" fill="rgb(224,145,5)" fg:x="20661" fg:w="85"/><text x="31.6812%" y="783.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (81 samples, 0.12%)</title><rect x="31.4373%" y="757" width="0.1232%" height="15" fill="rgb(234,130,49)" fg:x="20665" fg:w="81"/><text x="31.6873%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (101 samples, 0.15%)</title><rect x="31.4160%" y="789" width="0.1536%" height="15" fill="rgb(254,6,2)" fg:x="20651" fg:w="101"/><text x="31.6660%" y="799.50"></text></g><g><title>&lt;fastfull_search::datasources::posting_table::PostingTable as datafusion::datasource::datasource::TableProvider&gt;::scan::{{closure}} (119 samples, 0.18%)</title><rect x="31.3917%" y="837" width="0.1810%" height="15" fill="rgb(208,96,46)" fg:x="20635" fg:w="119"/><text x="31.6417%" y="847.50"></text></g><g><title>fastfull_search::datasources::posting_table::PostingExec::try_new (109 samples, 0.17%)</title><rect x="31.4069%" y="821" width="0.1658%" height="15" fill="rgb(239,3,39)" fg:x="20645" fg:w="109"/><text x="31.6569%" y="831.50"></text></g><g><title>datafusion::physical_plan::project_schema (109 samples, 0.17%)</title><rect x="31.4069%" y="805" width="0.1658%" height="15" fill="rgb(233,210,1)" fg:x="20645" fg:w="109"/><text x="31.6569%" y="815.50"></text></g><g><title>fastfull_search::optimizer::planner::boolean_planner::BooleanPhysicalPlanner::create_boolean_plan::{{closure}} (133 samples, 0.20%)</title><rect x="31.3749%" y="853" width="0.2023%" height="15" fill="rgb(244,137,37)" fg:x="20624" fg:w="133"/><text x="31.6249%" y="863.50"></text></g><g><title>_int_free (8 samples, 0.01%)</title><rect x="31.6229%" y="821" width="0.0122%" height="15" fill="rgb(240,136,2)" fg:x="20787" fg:w="8"/><text x="31.8729%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.02%)</title><rect x="31.6351%" y="821" width="0.0198%" height="15" fill="rgb(239,18,37)" fg:x="20795" fg:w="13"/><text x="31.8851%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.01%)</title><rect x="31.6412%" y="805" width="0.0137%" height="15" fill="rgb(218,185,22)" fg:x="20799" fg:w="9"/><text x="31.8912%" y="815.50"></text></g><g><title>datafusion_expr::expr::Expr::display_name (17 samples, 0.03%)</title><rect x="31.6549%" y="821" width="0.0259%" height="15" fill="rgb(225,218,4)" fg:x="20808" fg:w="17"/><text x="31.9049%" y="831.50"></text></g><g><title>datafusion_expr::expr::create_name (17 samples, 0.03%)</title><rect x="31.6549%" y="805" width="0.0259%" height="15" fill="rgb(230,182,32)" fg:x="20808" fg:w="17"/><text x="31.9049%" y="815.50"></text></g><g><title>fastfull_search::optimizer::planner::boolean_planner::PhysicalPredicateBuilder::convert_physical (134 samples, 0.20%)</title><rect x="31.5773%" y="853" width="0.2039%" height="15" fill="rgb(242,56,43)" fg:x="20757" fg:w="134"/><text x="31.8273%" y="863.50"></text></g><g><title>fastfull_search::optimizer::planner::boolean_planner::PhysicalPredicateBuilder::convert_physical (122 samples, 0.19%)</title><rect x="31.5955%" y="837" width="0.1856%" height="15" fill="rgb(233,99,24)" fg:x="20769" fg:w="122"/><text x="31.8455%" y="847.50"></text></g><g><title>datafusion_physical_expr::expressions::column::Column::new (66 samples, 0.10%)</title><rect x="31.6807%" y="821" width="0.1004%" height="15" fill="rgb(234,209,42)" fg:x="20825" fg:w="66"/><text x="31.9307%" y="831.50"></text></g><g><title>__GI___libc_malloc (66 samples, 0.10%)</title><rect x="31.6807%" y="805" width="0.1004%" height="15" fill="rgb(227,7,12)" fg:x="20825" fg:w="66"/><text x="31.9307%" y="815.50"></text></g><g><title>_int_malloc (60 samples, 0.09%)</title><rect x="31.6898%" y="789" width="0.0913%" height="15" fill="rgb(245,203,43)" fg:x="20831" fg:w="60"/><text x="31.9398%" y="799.50"></text></g><g><title>__GI___libc_malloc (63 samples, 0.10%)</title><rect x="32.2984%" y="805" width="0.0958%" height="15" fill="rgb(238,205,33)" fg:x="21231" fg:w="63"/><text x="32.5484%" y="815.50"></text></g><g><title>_int_malloc (61 samples, 0.09%)</title><rect x="32.3014%" y="789" width="0.0928%" height="15" fill="rgb(231,56,7)" fg:x="21233" fg:w="61"/><text x="32.5514%" y="799.50"></text></g><g><title>malloc_consolidate (29 samples, 0.04%)</title><rect x="32.3501%" y="773" width="0.0441%" height="15" fill="rgb(244,186,29)" fg:x="21265" fg:w="29"/><text x="32.6001%" y="783.50"></text></g><g><title>&lt;fastfull_search::context::boolean_context::BooleanPlanner as datafusion::execution::context::QueryPlanner&gt;::create_physical_plan::{{closure}} (2,400 samples, 3.65%)</title><rect x="28.8024%" y="901" width="3.6511%" height="15" fill="rgb(234,111,31)" fg:x="18933" fg:w="2400"/><text x="29.0524%" y="911.50">&lt;fas..</text></g><g><title>&lt;fastfull_search::optimizer::planner::boolean_planner::BooleanPhysicalPlanner as datafusion::physical_plan::planner::PhysicalPlanner&gt;::create_physical_plan::_{{closure}} (2,400 samples, 3.65%)</title><rect x="28.8024%" y="885" width="3.6511%" height="15" fill="rgb(241,149,10)" fg:x="18933" fg:w="2400"/><text x="29.0524%" y="895.50">&lt;fas..</text></g><g><title>fastfull_search::optimizer::planner::boolean_planner::BooleanPhysicalPlanner::create_boolean_plan::{{closure}} (1,824 samples, 2.77%)</title><rect x="29.6787%" y="869" width="2.7748%" height="15" fill="rgb(249,206,44)" fg:x="19509" fg:w="1824"/><text x="29.9287%" y="879.50">fa..</text></g><g><title>fastfull_search::physical_expr::boolean_eval::BooleanEvalExpr::new (442 samples, 0.67%)</title><rect x="31.7811%" y="853" width="0.6724%" height="15" fill="rgb(251,153,30)" fg:x="20891" fg:w="442"/><text x="32.0311%" y="863.50"></text></g><g><title>dashmap::set::DashSet&lt;K&gt;::new (439 samples, 0.67%)</title><rect x="31.7857%" y="837" width="0.6678%" height="15" fill="rgb(239,152,38)" fg:x="20894" fg:w="439"/><text x="32.0357%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (438 samples, 0.67%)</title><rect x="31.7872%" y="821" width="0.6663%" height="15" fill="rgb(249,139,47)" fg:x="20895" fg:w="438"/><text x="32.0372%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (39 samples, 0.06%)</title><rect x="32.3942%" y="805" width="0.0593%" height="15" fill="rgb(244,64,35)" fg:x="21294" fg:w="39"/><text x="32.6442%" y="815.50"></text></g><g><title>__GI___libc_malloc (34 samples, 0.05%)</title><rect x="33.4211%" y="789" width="0.0517%" height="15" fill="rgb(216,46,15)" fg:x="21969" fg:w="34"/><text x="33.6711%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (101 samples, 0.15%)</title><rect x="33.3298%" y="805" width="0.1536%" height="15" fill="rgb(250,74,19)" fg:x="21909" fg:w="101"/><text x="33.5798%" y="815.50"></text></g><g><title>__GI___libc_free (36 samples, 0.05%)</title><rect x="33.4865%" y="805" width="0.0548%" height="15" fill="rgb(249,42,33)" fg:x="22012" fg:w="36"/><text x="33.7365%" y="815.50"></text></g><g><title>__memset_avx2_erms (121 samples, 0.18%)</title><rect x="33.8166%" y="789" width="0.1841%" height="15" fill="rgb(242,149,17)" fg:x="22229" fg:w="121"/><text x="34.0666%" y="799.50"></text></g><g><title>__memset_avx2_unaligned_erms (35 samples, 0.05%)</title><rect x="34.0007%" y="789" width="0.0532%" height="15" fill="rgb(244,29,21)" fg:x="22350" fg:w="35"/><text x="34.2507%" y="799.50"></text></g><g><title>[[kernel.kallsyms]] (39 samples, 0.06%)</title><rect x="35.1082%" y="773" width="0.0593%" height="15" fill="rgb(220,130,37)" fg:x="23078" fg:w="39"/><text x="35.3582%" y="783.50"></text></g><g><title>[[kernel.kallsyms]] (32 samples, 0.05%)</title><rect x="35.1188%" y="757" width="0.0487%" height="15" fill="rgb(211,67,2)" fg:x="23085" fg:w="32"/><text x="35.3688%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (32 samples, 0.05%)</title><rect x="35.1188%" y="741" width="0.0487%" height="15" fill="rgb(235,68,52)" fg:x="23085" fg:w="32"/><text x="35.3688%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (32 samples, 0.05%)</title><rect x="35.1188%" y="725" width="0.0487%" height="15" fill="rgb(246,142,3)" fg:x="23085" fg:w="32"/><text x="35.3688%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (32 samples, 0.05%)</title><rect x="35.1188%" y="709" width="0.0487%" height="15" fill="rgb(241,25,7)" fg:x="23085" fg:w="32"/><text x="35.3688%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (28 samples, 0.04%)</title><rect x="35.1249%" y="693" width="0.0426%" height="15" fill="rgb(242,119,39)" fg:x="23089" fg:w="28"/><text x="35.3749%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (24 samples, 0.04%)</title><rect x="35.1310%" y="677" width="0.0365%" height="15" fill="rgb(241,98,45)" fg:x="23093" fg:w="24"/><text x="35.3810%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (23 samples, 0.03%)</title><rect x="35.1325%" y="661" width="0.0350%" height="15" fill="rgb(254,28,30)" fg:x="23094" fg:w="23"/><text x="35.3825%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (17 samples, 0.03%)</title><rect x="35.1416%" y="645" width="0.0259%" height="15" fill="rgb(241,142,54)" fg:x="23100" fg:w="17"/><text x="35.3916%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (17 samples, 0.03%)</title><rect x="35.1416%" y="629" width="0.0259%" height="15" fill="rgb(222,85,15)" fg:x="23100" fg:w="17"/><text x="35.3916%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (17 samples, 0.03%)</title><rect x="35.1416%" y="613" width="0.0259%" height="15" fill="rgb(210,85,47)" fg:x="23100" fg:w="17"/><text x="35.3916%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (28 samples, 0.04%)</title><rect x="35.9935%" y="757" width="0.0426%" height="15" fill="rgb(224,206,25)" fg:x="23660" fg:w="28"/><text x="36.2435%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (26 samples, 0.04%)</title><rect x="35.9966%" y="741" width="0.0396%" height="15" fill="rgb(243,201,19)" fg:x="23662" fg:w="26"/><text x="36.2466%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (26 samples, 0.04%)</title><rect x="35.9966%" y="725" width="0.0396%" height="15" fill="rgb(236,59,4)" fg:x="23662" fg:w="26"/><text x="36.2466%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (26 samples, 0.04%)</title><rect x="35.9966%" y="709" width="0.0396%" height="15" fill="rgb(254,179,45)" fg:x="23662" fg:w="26"/><text x="36.2466%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (26 samples, 0.04%)</title><rect x="35.9966%" y="693" width="0.0396%" height="15" fill="rgb(226,14,10)" fg:x="23662" fg:w="26"/><text x="36.2466%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (25 samples, 0.04%)</title><rect x="35.9981%" y="677" width="0.0380%" height="15" fill="rgb(244,27,41)" fg:x="23663" fg:w="25"/><text x="36.2481%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (25 samples, 0.04%)</title><rect x="35.9981%" y="661" width="0.0380%" height="15" fill="rgb(235,35,32)" fg:x="23663" fg:w="25"/><text x="36.2481%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (24 samples, 0.04%)</title><rect x="35.9996%" y="645" width="0.0365%" height="15" fill="rgb(218,68,31)" fg:x="23664" fg:w="24"/><text x="36.2496%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (21 samples, 0.03%)</title><rect x="36.0042%" y="629" width="0.0319%" height="15" fill="rgb(207,120,37)" fg:x="23667" fg:w="21"/><text x="36.2542%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (21 samples, 0.03%)</title><rect x="36.0042%" y="613" width="0.0319%" height="15" fill="rgb(227,98,0)" fg:x="23667" fg:w="21"/><text x="36.2542%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (21 samples, 0.03%)</title><rect x="36.0042%" y="597" width="0.0319%" height="15" fill="rgb(207,7,3)" fg:x="23667" fg:w="21"/><text x="36.2542%" y="607.50"></text></g><g><title>malloc_consolidate (576 samples, 0.88%)</title><rect x="35.1675%" y="773" width="0.8763%" height="15" fill="rgb(206,98,19)" fg:x="23117" fg:w="576"/><text x="35.4175%" y="783.50"></text></g><g><title>__calloc (1,776 samples, 2.70%)</title><rect x="33.5412%" y="805" width="2.7018%" height="15" fill="rgb(217,5,26)" fg:x="22048" fg:w="1776"/><text x="33.7912%" y="815.50">__..</text></g><g><title>_int_malloc (1,439 samples, 2.19%)</title><rect x="34.0539%" y="789" width="2.1891%" height="15" fill="rgb(235,190,38)" fg:x="22385" fg:w="1439"/><text x="34.3039%" y="799.50">_..</text></g><g><title>unlink_chunk.isra.0 (131 samples, 0.20%)</title><rect x="36.0438%" y="773" width="0.1993%" height="15" fill="rgb(247,86,24)" fg:x="23693" fg:w="131"/><text x="36.2938%" y="783.50"></text></g><g><title>_int_free (182 samples, 0.28%)</title><rect x="36.7009%" y="725" width="0.2769%" height="15" fill="rgb(205,101,16)" fg:x="24125" fg:w="182"/><text x="36.9509%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.01%)</title><rect x="37.6244%" y="709" width="0.0122%" height="15" fill="rgb(246,168,33)" fg:x="24732" fg:w="8"/><text x="37.8744%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.01%)</title><rect x="37.6244%" y="693" width="0.0122%" height="15" fill="rgb(231,114,1)" fg:x="24732" fg:w="8"/><text x="37.8744%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.01%)</title><rect x="37.6244%" y="677" width="0.0122%" height="15" fill="rgb(207,184,53)" fg:x="24732" fg:w="8"/><text x="37.8744%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.01%)</title><rect x="37.6244%" y="661" width="0.0122%" height="15" fill="rgb(224,95,51)" fg:x="24732" fg:w="8"/><text x="37.8744%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.01%)</title><rect x="37.6244%" y="645" width="0.0122%" height="15" fill="rgb(212,188,45)" fg:x="24732" fg:w="8"/><text x="37.8744%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.01%)</title><rect x="37.6244%" y="629" width="0.0122%" height="15" fill="rgb(223,154,38)" fg:x="24732" fg:w="8"/><text x="37.8744%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.01%)</title><rect x="37.6244%" y="613" width="0.0122%" height="15" fill="rgb(251,22,52)" fg:x="24732" fg:w="8"/><text x="37.8744%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.01%)</title><rect x="37.6244%" y="597" width="0.0122%" height="15" fill="rgb(229,209,22)" fg:x="24732" fg:w="8"/><text x="37.8744%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.01%)</title><rect x="37.6244%" y="581" width="0.0122%" height="15" fill="rgb(234,138,34)" fg:x="24732" fg:w="8"/><text x="37.8744%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.01%)</title><rect x="37.6244%" y="565" width="0.0122%" height="15" fill="rgb(212,95,11)" fg:x="24732" fg:w="8"/><text x="37.8744%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.01%)</title><rect x="37.6244%" y="549" width="0.0122%" height="15" fill="rgb(240,179,47)" fg:x="24732" fg:w="8"/><text x="37.8744%" y="559.50"></text></g><g><title>malloc_consolidate (94 samples, 0.14%)</title><rect x="37.6365%" y="709" width="0.1430%" height="15" fill="rgb(240,163,11)" fg:x="24740" fg:w="94"/><text x="37.8865%" y="719.50"></text></g><g><title>__posix_memalign (1,159 samples, 1.76%)</title><rect x="36.2491%" y="757" width="1.7632%" height="15" fill="rgb(236,37,12)" fg:x="23828" fg:w="1159"/><text x="36.4991%" y="767.50"></text></g><g><title>_int_memalign (939 samples, 1.43%)</title><rect x="36.5838%" y="741" width="1.4285%" height="15" fill="rgb(232,164,16)" fg:x="24048" fg:w="939"/><text x="36.8338%" y="751.50"></text></g><g><title>_int_malloc (680 samples, 1.03%)</title><rect x="36.9778%" y="725" width="1.0345%" height="15" fill="rgb(244,205,15)" fg:x="24307" fg:w="680"/><text x="37.2278%" y="735.50"></text></g><g><title>unlink_chunk.isra.0 (153 samples, 0.23%)</title><rect x="37.7795%" y="709" width="0.2328%" height="15" fill="rgb(223,117,47)" fg:x="24834" fg:w="153"/><text x="38.0295%" y="719.50"></text></g><g><title>__rdl_alloc (1,173 samples, 1.78%)</title><rect x="36.2430%" y="805" width="1.7845%" height="15" fill="rgb(244,107,35)" fg:x="23824" fg:w="1173"/><text x="36.4930%" y="815.50">_..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,173 samples, 1.78%)</title><rect x="36.2430%" y="789" width="1.7845%" height="15" fill="rgb(205,140,8)" fg:x="23824" fg:w="1173"/><text x="36.4930%" y="799.50">s..</text></g><g><title>std::sys::unix::alloc::aligned_malloc (1,169 samples, 1.78%)</title><rect x="36.2491%" y="773" width="1.7784%" height="15" fill="rgb(228,84,46)" fg:x="23828" fg:w="1169"/><text x="36.4991%" y="783.50">s..</text></g><g><title>__rdl_dealloc (8 samples, 0.01%)</title><rect x="38.0366%" y="805" width="0.0122%" height="15" fill="rgb(254,188,9)" fg:x="25003" fg:w="8"/><text x="38.2866%" y="815.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.01%)</title><rect x="38.0366%" y="789" width="0.0122%" height="15" fill="rgb(206,112,54)" fg:x="25003" fg:w="8"/><text x="38.2866%" y="799.50"></text></g><g><title>__rust_dealloc (7 samples, 0.01%)</title><rect x="38.0640%" y="805" width="0.0106%" height="15" fill="rgb(216,84,49)" fg:x="25021" fg:w="7"/><text x="38.3140%" y="815.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (4,677 samples, 7.12%)</title><rect x="32.4535%" y="901" width="7.1150%" height="15" fill="rgb(214,194,35)" fg:x="21333" fg:w="4677"/><text x="32.7035%" y="911.50">&lt;futures_u..</text></g><g><title>&lt;fastfull_search::datasources::posting_table::PostingStream as futures_core::stream::Stream&gt;::poll_next (4,677 samples, 7.12%)</title><rect x="32.4535%" y="885" width="7.1150%" height="15" fill="rgb(249,28,3)" fg:x="21333" fg:w="4677"/><text x="32.7035%" y="895.50">&lt;fastfull_..</text></g><g><title>fastfull_search::batch::posting_batch::PostingBatch::project_with_predicate (4,677 samples, 7.12%)</title><rect x="32.4535%" y="869" width="7.1150%" height="15" fill="rgb(222,56,52)" fg:x="21333" fg:w="4677"/><text x="32.7035%" y="879.50">fastfull_s..</text></g><g><title>fastfull_search::physical_expr::boolean_eval::PhysicalPredicate::eval_avx512 (4,677 samples, 7.12%)</title><rect x="32.4535%" y="853" width="7.1150%" height="15" fill="rgb(245,217,50)" fg:x="21333" fg:w="4677"/><text x="32.7035%" y="863.50">fastfull_s..</text></g><g><title>fastfull_search::physical_expr::boolean_eval::PhysicalPredicate::eval_avx512 (4,677 samples, 7.12%)</title><rect x="32.4535%" y="837" width="7.1150%" height="15" fill="rgb(213,201,24)" fg:x="21333" fg:w="4677"/><text x="32.7035%" y="847.50">fastfull_s..</text></g><g><title>fastfull_search::physical_expr::short_circuit_primitives::ShortCircuit::eval_avx512 (4,677 samples, 7.12%)</title><rect x="32.4535%" y="821" width="7.1150%" height="15" fill="rgb(248,116,28)" fg:x="21333" fg:w="4677"/><text x="32.7035%" y="831.50">fastfull_s..</text></g><g><title>_int_free (982 samples, 1.49%)</title><rect x="38.0747%" y="805" width="1.4939%" height="15" fill="rgb(219,72,43)" fg:x="25028" fg:w="982"/><text x="38.3247%" y="815.50"></text></g><g><title>&lt;datafusion_expr::expr::Expr as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="39.6142%" y="821" width="0.0137%" height="15" fill="rgb(209,138,14)" fg:x="26040" fg:w="9"/><text x="39.8642%" y="831.50"></text></g><g><title>&lt;datafusion_expr::expr::Expr as core::clone::Clone&gt;::clone (34 samples, 0.05%)</title><rect x="39.5944%" y="837" width="0.0517%" height="15" fill="rgb(222,18,33)" fg:x="26027" fg:w="34"/><text x="39.8444%" y="847.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.02%)</title><rect x="39.6279%" y="821" width="0.0183%" height="15" fill="rgb(213,199,7)" fg:x="26049" fg:w="12"/><text x="39.8779%" y="831.50"></text></g><g><title>&lt;datafusion_expr::logical_plan::plan::LogicalPlan as core::clone::Clone&gt;::clone (86 samples, 0.13%)</title><rect x="39.5686%" y="869" width="0.1308%" height="15" fill="rgb(250,110,10)" fg:x="26010" fg:w="86"/><text x="39.8186%" y="879.50"></text></g><g><title>&lt;datafusion_expr::expr::Expr as core::clone::Clone&gt;::clone (73 samples, 0.11%)</title><rect x="39.5883%" y="853" width="0.1111%" height="15" fill="rgb(248,123,6)" fg:x="26023" fg:w="73"/><text x="39.8383%" y="863.50"></text></g><g><title>__GI___libc_malloc (35 samples, 0.05%)</title><rect x="39.6461%" y="837" width="0.0532%" height="15" fill="rgb(206,91,31)" fg:x="26061" fg:w="35"/><text x="39.8961%" y="847.50"></text></g><g><title>_int_malloc (22 samples, 0.03%)</title><rect x="39.6659%" y="821" width="0.0335%" height="15" fill="rgb(211,154,13)" fg:x="26074" fg:w="22"/><text x="39.9159%" y="831.50"></text></g><g><title>&lt;datafusion_expr::expr::Expr as core::fmt::Debug&gt;::fmt (30 samples, 0.05%)</title><rect x="39.7831%" y="309" width="0.0456%" height="15" fill="rgb(225,148,7)" fg:x="26151" fg:w="30"/><text x="40.0331%" y="319.50"></text></g><g><title>core::fmt::Formatter::write_fmt (27 samples, 0.04%)</title><rect x="39.7876%" y="293" width="0.0411%" height="15" fill="rgb(220,160,43)" fg:x="26154" fg:w="27"/><text x="40.0376%" y="303.50"></text></g><g><title>core::fmt::write (25 samples, 0.04%)</title><rect x="39.7907%" y="277" width="0.0380%" height="15" fill="rgb(213,52,39)" fg:x="26156" fg:w="25"/><text x="40.0407%" y="287.50"></text></g><g><title>&lt;datafusion_common::column::Column as core::fmt::Display&gt;::fmt (19 samples, 0.03%)</title><rect x="39.7998%" y="261" width="0.0289%" height="15" fill="rgb(243,137,7)" fg:x="26162" fg:w="19"/><text x="40.0498%" y="271.50"></text></g><g><title>core::fmt::Formatter::write_fmt (11 samples, 0.02%)</title><rect x="39.8120%" y="245" width="0.0167%" height="15" fill="rgb(230,79,13)" fg:x="26170" fg:w="11"/><text x="40.0620%" y="255.50"></text></g><g><title>core::fmt::write (8 samples, 0.01%)</title><rect x="39.8165%" y="229" width="0.0122%" height="15" fill="rgb(247,105,23)" fg:x="26173" fg:w="8"/><text x="40.0665%" y="239.50"></text></g><g><title>_int_free (12 samples, 0.02%)</title><rect x="39.8546%" y="37" width="0.0183%" height="15" fill="rgb(223,179,41)" fg:x="26198" fg:w="12"/><text x="40.1046%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (43 samples, 0.07%)</title><rect x="39.8287%" y="197" width="0.0654%" height="15" fill="rgb(218,9,34)" fg:x="26181" fg:w="43"/><text x="40.0787%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (43 samples, 0.07%)</title><rect x="39.8287%" y="181" width="0.0654%" height="15" fill="rgb(222,106,8)" fg:x="26181" fg:w="43"/><text x="40.0787%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (43 samples, 0.07%)</title><rect x="39.8287%" y="165" width="0.0654%" height="15" fill="rgb(211,220,0)" fg:x="26181" fg:w="43"/><text x="40.0787%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (43 samples, 0.07%)</title><rect x="39.8287%" y="149" width="0.0654%" height="15" fill="rgb(229,52,16)" fg:x="26181" fg:w="43"/><text x="40.0787%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (43 samples, 0.07%)</title><rect x="39.8287%" y="133" width="0.0654%" height="15" fill="rgb(212,155,18)" fg:x="26181" fg:w="43"/><text x="40.0787%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (42 samples, 0.06%)</title><rect x="39.8302%" y="117" width="0.0639%" height="15" fill="rgb(242,21,14)" fg:x="26182" fg:w="42"/><text x="40.0802%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (42 samples, 0.06%)</title><rect x="39.8302%" y="101" width="0.0639%" height="15" fill="rgb(222,19,48)" fg:x="26182" fg:w="42"/><text x="40.0802%" y="111.50"></text></g><g><title>alloc::alloc::realloc (42 samples, 0.06%)</title><rect x="39.8302%" y="85" width="0.0639%" height="15" fill="rgb(232,45,27)" fg:x="26182" fg:w="42"/><text x="40.0802%" y="95.50"></text></g><g><title>__GI___libc_realloc (42 samples, 0.06%)</title><rect x="39.8302%" y="69" width="0.0639%" height="15" fill="rgb(249,103,42)" fg:x="26182" fg:w="42"/><text x="40.0802%" y="79.50"></text></g><g><title>_int_realloc (34 samples, 0.05%)</title><rect x="39.8424%" y="53" width="0.0517%" height="15" fill="rgb(246,81,33)" fg:x="26190" fg:w="34"/><text x="40.0924%" y="63.50"></text></g><g><title>_int_malloc (14 samples, 0.02%)</title><rect x="39.8728%" y="37" width="0.0213%" height="15" fill="rgb(252,33,42)" fg:x="26210" fg:w="14"/><text x="40.1228%" y="47.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (76 samples, 0.12%)</title><rect x="39.7831%" y="357" width="0.1156%" height="15" fill="rgb(209,212,41)" fg:x="26151" fg:w="76"/><text x="40.0331%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (76 samples, 0.12%)</title><rect x="39.7831%" y="341" width="0.1156%" height="15" fill="rgb(207,154,6)" fg:x="26151" fg:w="76"/><text x="40.0331%" y="351.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (76 samples, 0.12%)</title><rect x="39.7831%" y="325" width="0.1156%" height="15" fill="rgb(223,64,47)" fg:x="26151" fg:w="76"/><text x="40.0331%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_str (46 samples, 0.07%)</title><rect x="39.8287%" y="309" width="0.0700%" height="15" fill="rgb(211,161,38)" fg:x="26181" fg:w="46"/><text x="40.0787%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (46 samples, 0.07%)</title><rect x="39.8287%" y="293" width="0.0700%" height="15" fill="rgb(219,138,40)" fg:x="26181" fg:w="46"/><text x="40.0787%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (46 samples, 0.07%)</title><rect x="39.8287%" y="277" width="0.0700%" height="15" fill="rgb(241,228,46)" fg:x="26181" fg:w="46"/><text x="40.0787%" y="287.50"></text></g><g><title>alloc::string::String::push_str (46 samples, 0.07%)</title><rect x="39.8287%" y="261" width="0.0700%" height="15" fill="rgb(223,209,38)" fg:x="26181" fg:w="46"/><text x="40.0787%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (46 samples, 0.07%)</title><rect x="39.8287%" y="245" width="0.0700%" height="15" fill="rgb(236,164,45)" fg:x="26181" fg:w="46"/><text x="40.0787%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (46 samples, 0.07%)</title><rect x="39.8287%" y="229" width="0.0700%" height="15" fill="rgb(231,15,5)" fg:x="26181" fg:w="46"/><text x="40.0787%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (46 samples, 0.07%)</title><rect x="39.8287%" y="213" width="0.0700%" height="15" fill="rgb(252,35,15)" fg:x="26181" fg:w="46"/><text x="40.0787%" y="223.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (85 samples, 0.13%)</title><rect x="39.7831%" y="373" width="0.1293%" height="15" fill="rgb(248,181,18)" fg:x="26151" fg:w="85"/><text x="40.0331%" y="383.50"></text></g><g><title>core::fmt::builders::debug_struct_new (7 samples, 0.01%)</title><rect x="39.9017%" y="357" width="0.0106%" height="15" fill="rgb(233,39,42)" fg:x="26229" fg:w="7"/><text x="40.1517%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_str (7 samples, 0.01%)</title><rect x="39.9017%" y="341" width="0.0106%" height="15" fill="rgb(238,110,33)" fg:x="26229" fg:w="7"/><text x="40.1517%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (7 samples, 0.01%)</title><rect x="39.9017%" y="325" width="0.0106%" height="15" fill="rgb(233,195,10)" fg:x="26229" fg:w="7"/><text x="40.1517%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (7 samples, 0.01%)</title><rect x="39.9017%" y="309" width="0.0106%" height="15" fill="rgb(254,105,3)" fg:x="26229" fg:w="7"/><text x="40.1517%" y="319.50"></text></g><g><title>alloc::string::String::push_str (7 samples, 0.01%)</title><rect x="39.9017%" y="293" width="0.0106%" height="15" fill="rgb(221,225,9)" fg:x="26229" fg:w="7"/><text x="40.1517%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (7 samples, 0.01%)</title><rect x="39.9017%" y="277" width="0.0106%" height="15" fill="rgb(224,227,45)" fg:x="26229" fg:w="7"/><text x="40.1517%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (7 samples, 0.01%)</title><rect x="39.9017%" y="261" width="0.0106%" height="15" fill="rgb(229,198,43)" fg:x="26229" fg:w="7"/><text x="40.1517%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (7 samples, 0.01%)</title><rect x="39.9017%" y="245" width="0.0106%" height="15" fill="rgb(206,209,35)" fg:x="26229" fg:w="7"/><text x="40.1517%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7 samples, 0.01%)</title><rect x="39.9017%" y="229" width="0.0106%" height="15" fill="rgb(245,195,53)" fg:x="26229" fg:w="7"/><text x="40.1517%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.01%)</title><rect x="39.9017%" y="213" width="0.0106%" height="15" fill="rgb(240,92,26)" fg:x="26229" fg:w="7"/><text x="40.1517%" y="223.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (94 samples, 0.14%)</title><rect x="39.7709%" y="389" width="0.1430%" height="15" fill="rgb(207,40,23)" fg:x="26143" fg:w="94"/><text x="40.0209%" y="399.50"></text></g><g><title>core::fmt::float::&lt;impl core::fmt::Debug for f64&gt;::fmt (7 samples, 0.01%)</title><rect x="39.9154%" y="389" width="0.0106%" height="15" fill="rgb(223,111,35)" fg:x="26238" fg:w="7"/><text x="40.1654%" y="399.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (11 samples, 0.02%)</title><rect x="39.9261%" y="389" width="0.0167%" height="15" fill="rgb(229,147,28)" fg:x="26245" fg:w="11"/><text x="40.1761%" y="399.50"></text></g><g><title>core::num::flt2dec::to_shortest_str (7 samples, 0.01%)</title><rect x="39.9322%" y="373" width="0.0106%" height="15" fill="rgb(211,29,28)" fg:x="26249" fg:w="7"/><text x="40.1822%" y="383.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (126 samples, 0.19%)</title><rect x="39.7557%" y="437" width="0.1917%" height="15" fill="rgb(228,72,33)" fg:x="26133" fg:w="126"/><text x="40.0057%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (123 samples, 0.19%)</title><rect x="39.7602%" y="421" width="0.1871%" height="15" fill="rgb(205,214,31)" fg:x="26136" fg:w="123"/><text x="40.0102%" y="431.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (122 samples, 0.19%)</title><rect x="39.7618%" y="405" width="0.1856%" height="15" fill="rgb(224,111,15)" fg:x="26137" fg:w="122"/><text x="40.0118%" y="415.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (133 samples, 0.20%)</title><rect x="39.7526%" y="453" width="0.2023%" height="15" fill="rgb(253,21,26)" fg:x="26131" fg:w="133"/><text x="40.0026%" y="463.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (138 samples, 0.21%)</title><rect x="39.7481%" y="533" width="0.2099%" height="15" fill="rgb(245,139,43)" fg:x="26128" fg:w="138"/><text x="39.9981%" y="543.50"></text></g><g><title>core::fmt::builders::DebugSet::entry (135 samples, 0.21%)</title><rect x="39.7526%" y="517" width="0.2054%" height="15" fill="rgb(252,170,7)" fg:x="26131" fg:w="135"/><text x="40.0026%" y="527.50"></text></g><g><title>core::fmt::builders::DebugInner::entry (135 samples, 0.21%)</title><rect x="39.7526%" y="501" width="0.2054%" height="15" fill="rgb(231,118,14)" fg:x="26131" fg:w="135"/><text x="40.0026%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (135 samples, 0.21%)</title><rect x="39.7526%" y="485" width="0.2054%" height="15" fill="rgb(238,83,0)" fg:x="26131" fg:w="135"/><text x="40.0026%" y="495.50"></text></g><g><title>core::fmt::builders::DebugInner::entry::{{closure}} (135 samples, 0.21%)</title><rect x="39.7526%" y="469" width="0.2054%" height="15" fill="rgb(221,39,39)" fg:x="26131" fg:w="135"/><text x="40.0026%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (31 samples, 0.05%)</title><rect x="39.9580%" y="357" width="0.0472%" height="15" fill="rgb(222,119,46)" fg:x="26266" fg:w="31"/><text x="40.2080%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (31 samples, 0.05%)</title><rect x="39.9580%" y="341" width="0.0472%" height="15" fill="rgb(222,165,49)" fg:x="26266" fg:w="31"/><text x="40.2080%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (31 samples, 0.05%)</title><rect x="39.9580%" y="325" width="0.0472%" height="15" fill="rgb(219,113,52)" fg:x="26266" fg:w="31"/><text x="40.2080%" y="335.50"></text></g><g><title>alloc::alloc::realloc (31 samples, 0.05%)</title><rect x="39.9580%" y="309" width="0.0472%" height="15" fill="rgb(214,7,15)" fg:x="26266" fg:w="31"/><text x="40.2080%" y="319.50"></text></g><g><title>__GI___libc_realloc (31 samples, 0.05%)</title><rect x="39.9580%" y="293" width="0.0472%" height="15" fill="rgb(235,32,4)" fg:x="26266" fg:w="31"/><text x="40.2080%" y="303.50"></text></g><g><title>_int_realloc (22 samples, 0.03%)</title><rect x="39.9717%" y="277" width="0.0335%" height="15" fill="rgb(238,90,54)" fg:x="26275" fg:w="22"/><text x="40.2217%" y="287.50"></text></g><g><title>_int_malloc (20 samples, 0.03%)</title><rect x="39.9747%" y="261" width="0.0304%" height="15" fill="rgb(213,208,19)" fg:x="26277" fg:w="20"/><text x="40.2247%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="39.9945%" y="245" width="0.0106%" height="15" fill="rgb(233,156,4)" fg:x="26290" fg:w="7"/><text x="40.2445%" y="255.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (170 samples, 0.26%)</title><rect x="39.7481%" y="581" width="0.2586%" height="15" fill="rgb(207,194,5)" fg:x="26128" fg:w="170"/><text x="39.9981%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (170 samples, 0.26%)</title><rect x="39.7481%" y="565" width="0.2586%" height="15" fill="rgb(206,111,30)" fg:x="26128" fg:w="170"/><text x="39.9981%" y="575.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (170 samples, 0.26%)</title><rect x="39.7481%" y="549" width="0.2586%" height="15" fill="rgb(243,70,54)" fg:x="26128" fg:w="170"/><text x="39.9981%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (32 samples, 0.05%)</title><rect x="39.9580%" y="533" width="0.0487%" height="15" fill="rgb(242,28,8)" fg:x="26266" fg:w="32"/><text x="40.2080%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (32 samples, 0.05%)</title><rect x="39.9580%" y="517" width="0.0487%" height="15" fill="rgb(219,106,18)" fg:x="26266" fg:w="32"/><text x="40.2080%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (32 samples, 0.05%)</title><rect x="39.9580%" y="501" width="0.0487%" height="15" fill="rgb(244,222,10)" fg:x="26266" fg:w="32"/><text x="40.2080%" y="511.50"></text></g><g><title>alloc::string::String::push_str (32 samples, 0.05%)</title><rect x="39.9580%" y="485" width="0.0487%" height="15" fill="rgb(236,179,52)" fg:x="26266" fg:w="32"/><text x="40.2080%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (32 samples, 0.05%)</title><rect x="39.9580%" y="469" width="0.0487%" height="15" fill="rgb(213,23,39)" fg:x="26266" fg:w="32"/><text x="40.2080%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (32 samples, 0.05%)</title><rect x="39.9580%" y="453" width="0.0487%" height="15" fill="rgb(238,48,10)" fg:x="26266" fg:w="32"/><text x="40.2080%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (32 samples, 0.05%)</title><rect x="39.9580%" y="437" width="0.0487%" height="15" fill="rgb(251,196,23)" fg:x="26266" fg:w="32"/><text x="40.2080%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (32 samples, 0.05%)</title><rect x="39.9580%" y="421" width="0.0487%" height="15" fill="rgb(250,152,24)" fg:x="26266" fg:w="32"/><text x="40.2080%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (32 samples, 0.05%)</title><rect x="39.9580%" y="405" width="0.0487%" height="15" fill="rgb(209,150,17)" fg:x="26266" fg:w="32"/><text x="40.2080%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (32 samples, 0.05%)</title><rect x="39.9580%" y="389" width="0.0487%" height="15" fill="rgb(234,202,34)" fg:x="26266" fg:w="32"/><text x="40.2080%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (32 samples, 0.05%)</title><rect x="39.9580%" y="373" width="0.0487%" height="15" fill="rgb(253,148,53)" fg:x="26266" fg:w="32"/><text x="40.2080%" y="383.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (172 samples, 0.26%)</title><rect x="39.7481%" y="613" width="0.2617%" height="15" fill="rgb(218,129,16)" fg:x="26128" fg:w="172"/><text x="39.9981%" y="623.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (172 samples, 0.26%)</title><rect x="39.7481%" y="597" width="0.2617%" height="15" fill="rgb(216,85,19)" fg:x="26128" fg:w="172"/><text x="39.9981%" y="607.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (174 samples, 0.26%)</title><rect x="39.7481%" y="661" width="0.2647%" height="15" fill="rgb(235,228,7)" fg:x="26128" fg:w="174"/><text x="39.9981%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (174 samples, 0.26%)</title><rect x="39.7481%" y="645" width="0.2647%" height="15" fill="rgb(245,175,0)" fg:x="26128" fg:w="174"/><text x="39.9981%" y="655.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (174 samples, 0.26%)</title><rect x="39.7481%" y="629" width="0.2647%" height="15" fill="rgb(208,168,36)" fg:x="26128" fg:w="174"/><text x="39.9981%" y="639.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (190 samples, 0.29%)</title><rect x="39.7450%" y="693" width="0.2890%" height="15" fill="rgb(246,171,24)" fg:x="26126" fg:w="190"/><text x="39.9950%" y="703.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (189 samples, 0.29%)</title><rect x="39.7466%" y="677" width="0.2875%" height="15" fill="rgb(215,142,24)" fg:x="26127" fg:w="189"/><text x="39.9966%" y="687.50"></text></g><g><title>core::fmt::builders::debug_tuple_new (8 samples, 0.01%)</title><rect x="40.0219%" y="661" width="0.0122%" height="15" fill="rgb(250,187,7)" fg:x="26308" fg:w="8"/><text x="40.2719%" y="671.50"></text></g><g><title>core::fmt::Formatter::write_str (8 samples, 0.01%)</title><rect x="40.0219%" y="645" width="0.0122%" height="15" fill="rgb(228,66,33)" fg:x="26308" fg:w="8"/><text x="40.2719%" y="655.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (8 samples, 0.01%)</title><rect x="40.0219%" y="629" width="0.0122%" height="15" fill="rgb(234,215,21)" fg:x="26308" fg:w="8"/><text x="40.2719%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (8 samples, 0.01%)</title><rect x="40.0219%" y="613" width="0.0122%" height="15" fill="rgb(222,191,20)" fg:x="26308" fg:w="8"/><text x="40.2719%" y="623.50"></text></g><g><title>alloc::string::String::push_str (8 samples, 0.01%)</title><rect x="40.0219%" y="597" width="0.0122%" height="15" fill="rgb(245,79,54)" fg:x="26308" fg:w="8"/><text x="40.2719%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (8 samples, 0.01%)</title><rect x="40.0219%" y="581" width="0.0122%" height="15" fill="rgb(240,10,37)" fg:x="26308" fg:w="8"/><text x="40.2719%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.01%)</title><rect x="40.0219%" y="565" width="0.0122%" height="15" fill="rgb(214,192,32)" fg:x="26308" fg:w="8"/><text x="40.2719%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (8 samples, 0.01%)</title><rect x="40.0219%" y="549" width="0.0122%" height="15" fill="rgb(209,36,54)" fg:x="26308" fg:w="8"/><text x="40.2719%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.02%)</title><rect x="40.0356%" y="533" width="0.0167%" height="15" fill="rgb(220,10,11)" fg:x="26317" fg:w="11"/><text x="40.2856%" y="543.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.02%)</title><rect x="40.0356%" y="517" width="0.0167%" height="15" fill="rgb(221,106,17)" fg:x="26317" fg:w="11"/><text x="40.2856%" y="527.50"></text></g><g><title>_int_malloc (9 samples, 0.01%)</title><rect x="40.0386%" y="501" width="0.0137%" height="15" fill="rgb(251,142,44)" fg:x="26319" fg:w="9"/><text x="40.2886%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (13 samples, 0.02%)</title><rect x="40.0341%" y="693" width="0.0198%" height="15" fill="rgb(238,13,15)" fg:x="26316" fg:w="13"/><text x="40.2841%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (13 samples, 0.02%)</title><rect x="40.0341%" y="677" width="0.0198%" height="15" fill="rgb(208,107,27)" fg:x="26316" fg:w="13"/><text x="40.2841%" y="687.50"></text></g><g><title>alloc::string::String::push_str (13 samples, 0.02%)</title><rect x="40.0341%" y="661" width="0.0198%" height="15" fill="rgb(205,136,37)" fg:x="26316" fg:w="13"/><text x="40.2841%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (13 samples, 0.02%)</title><rect x="40.0341%" y="645" width="0.0198%" height="15" fill="rgb(250,205,27)" fg:x="26316" fg:w="13"/><text x="40.2841%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (13 samples, 0.02%)</title><rect x="40.0341%" y="629" width="0.0198%" height="15" fill="rgb(210,80,43)" fg:x="26316" fg:w="13"/><text x="40.2841%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (13 samples, 0.02%)</title><rect x="40.0341%" y="613" width="0.0198%" height="15" fill="rgb(247,160,36)" fg:x="26316" fg:w="13"/><text x="40.2841%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (12 samples, 0.02%)</title><rect x="40.0356%" y="597" width="0.0183%" height="15" fill="rgb(234,13,49)" fg:x="26317" fg:w="12"/><text x="40.2856%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 0.02%)</title><rect x="40.0356%" y="581" width="0.0183%" height="15" fill="rgb(234,122,0)" fg:x="26317" fg:w="12"/><text x="40.2856%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 0.02%)</title><rect x="40.0356%" y="565" width="0.0183%" height="15" fill="rgb(207,146,38)" fg:x="26317" fg:w="12"/><text x="40.2856%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (12 samples, 0.02%)</title><rect x="40.0356%" y="549" width="0.0183%" height="15" fill="rgb(207,177,25)" fg:x="26317" fg:w="12"/><text x="40.2856%" y="559.50"></text></g><g><title>&lt;datafusion_expr::logical_plan::plan::LogicalPlan::display::Wrapper as core::fmt::Display&gt;::fmt (215 samples, 0.33%)</title><rect x="39.7283%" y="741" width="0.3271%" height="15" fill="rgb(211,178,42)" fg:x="26115" fg:w="215"/><text x="39.9783%" y="751.50"></text></g><g><title>core::fmt::Formatter::write_fmt (207 samples, 0.31%)</title><rect x="39.7405%" y="725" width="0.3149%" height="15" fill="rgb(230,69,54)" fg:x="26123" fg:w="207"/><text x="39.9905%" y="735.50"></text></g><g><title>core::fmt::write (206 samples, 0.31%)</title><rect x="39.7420%" y="709" width="0.3134%" height="15" fill="rgb(214,135,41)" fg:x="26124" fg:w="206"/><text x="39.9920%" y="719.50"></text></g><g><title>&lt;datafusion_expr::logical_plan::display::IndentVisitor as datafusion_expr::logical_plan::plan::PlanVisitor&gt;::pre_visit (234 samples, 0.36%)</title><rect x="39.7085%" y="789" width="0.3560%" height="15" fill="rgb(237,67,25)" fg:x="26102" fg:w="234"/><text x="39.9585%" y="799.50"></text></g><g><title>core::fmt::Formatter::write_fmt (229 samples, 0.35%)</title><rect x="39.7161%" y="773" width="0.3484%" height="15" fill="rgb(222,189,50)" fg:x="26107" fg:w="229"/><text x="39.9661%" y="783.50"></text></g><g><title>core::fmt::write (223 samples, 0.34%)</title><rect x="39.7253%" y="757" width="0.3392%" height="15" fill="rgb(245,148,34)" fg:x="26113" fg:w="223"/><text x="39.9753%" y="767.50"></text></g><g><title>datafusion_expr::expr_visitor::inspect_expr_pre (12 samples, 0.02%)</title><rect x="40.0645%" y="789" width="0.0183%" height="15" fill="rgb(222,29,6)" fg:x="26336" fg:w="12"/><text x="40.3145%" y="799.50"></text></g><g><title>&lt;datafusion_expr::expr::Expr as datafusion_expr::expr_visitor::ExprVisitable&gt;::accept (12 samples, 0.02%)</title><rect x="40.0645%" y="773" width="0.0183%" height="15" fill="rgb(221,189,43)" fg:x="26336" fg:w="12"/><text x="40.3145%" y="783.50"></text></g><g><title>&lt;fastfull_search::datasources::posting_table::PostingTable as datafusion::datasource::datasource::TableProvider&gt;::schema (8 samples, 0.01%)</title><rect x="40.1406%" y="709" width="0.0122%" height="15" fill="rgb(207,36,27)" fg:x="26386" fg:w="8"/><text x="40.3906%" y="719.50"></text></g><g><title>_int_free (9 samples, 0.01%)</title><rect x="40.1527%" y="709" width="0.0137%" height="15" fill="rgb(217,90,24)" fg:x="26394" fg:w="9"/><text x="40.4027%" y="719.50"></text></g><g><title>alloc::string::String::with_capacity (12 samples, 0.02%)</title><rect x="40.1664%" y="693" width="0.0183%" height="15" fill="rgb(224,66,35)" fg:x="26403" fg:w="12"/><text x="40.4164%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (12 samples, 0.02%)</title><rect x="40.1664%" y="677" width="0.0183%" height="15" fill="rgb(221,13,50)" fg:x="26403" fg:w="12"/><text x="40.4164%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 0.02%)</title><rect x="40.1664%" y="661" width="0.0183%" height="15" fill="rgb(236,68,49)" fg:x="26403" fg:w="12"/><text x="40.4164%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.02%)</title><rect x="40.1664%" y="645" width="0.0183%" height="15" fill="rgb(229,146,28)" fg:x="26403" fg:w="12"/><text x="40.4164%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.02%)</title><rect x="40.1664%" y="629" width="0.0183%" height="15" fill="rgb(225,31,38)" fg:x="26403" fg:w="12"/><text x="40.4164%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.02%)</title><rect x="40.1664%" y="613" width="0.0183%" height="15" fill="rgb(250,208,3)" fg:x="26403" fg:w="12"/><text x="40.4164%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.02%)</title><rect x="40.1664%" y="597" width="0.0183%" height="15" fill="rgb(246,54,23)" fg:x="26403" fg:w="12"/><text x="40.4164%" y="607.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.02%)</title><rect x="40.1664%" y="581" width="0.0183%" height="15" fill="rgb(243,76,11)" fg:x="26403" fg:w="12"/><text x="40.4164%" y="591.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.02%)</title><rect x="40.1664%" y="565" width="0.0183%" height="15" fill="rgb(245,21,50)" fg:x="26403" fg:w="12"/><text x="40.4164%" y="575.50"></text></g><g><title>_int_free (9 samples, 0.01%)</title><rect x="40.2227%" y="405" width="0.0137%" height="15" fill="rgb(228,9,43)" fg:x="26440" fg:w="9"/><text x="40.4727%" y="415.50"></text></g><g><title>malloc_consolidate (8 samples, 0.01%)</title><rect x="40.2242%" y="389" width="0.0122%" height="15" fill="rgb(208,100,47)" fg:x="26441" fg:w="8"/><text x="40.4742%" y="399.50"></text></g><g><title>_int_malloc (46 samples, 0.07%)</title><rect x="40.2364%" y="405" width="0.0700%" height="15" fill="rgb(232,26,8)" fg:x="26449" fg:w="46"/><text x="40.4864%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (78 samples, 0.12%)</title><rect x="40.1892%" y="661" width="0.1187%" height="15" fill="rgb(216,166,38)" fg:x="26418" fg:w="78"/><text x="40.4392%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (78 samples, 0.12%)</title><rect x="40.1892%" y="645" width="0.1187%" height="15" fill="rgb(251,202,51)" fg:x="26418" fg:w="78"/><text x="40.4392%" y="655.50"></text></g><g><title>alloc::string::String::push_str (78 samples, 0.12%)</title><rect x="40.1892%" y="629" width="0.1187%" height="15" fill="rgb(254,216,34)" fg:x="26418" fg:w="78"/><text x="40.4392%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (78 samples, 0.12%)</title><rect x="40.1892%" y="613" width="0.1187%" height="15" fill="rgb(251,32,27)" fg:x="26418" fg:w="78"/><text x="40.4392%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (78 samples, 0.12%)</title><rect x="40.1892%" y="597" width="0.1187%" height="15" fill="rgb(208,127,28)" fg:x="26418" fg:w="78"/><text x="40.4392%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (78 samples, 0.12%)</title><rect x="40.1892%" y="581" width="0.1187%" height="15" fill="rgb(224,137,22)" fg:x="26418" fg:w="78"/><text x="40.4392%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (78 samples, 0.12%)</title><rect x="40.1892%" y="565" width="0.1187%" height="15" fill="rgb(254,70,32)" fg:x="26418" fg:w="78"/><text x="40.4392%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (78 samples, 0.12%)</title><rect x="40.1892%" y="549" width="0.1187%" height="15" fill="rgb(229,75,37)" fg:x="26418" fg:w="78"/><text x="40.4392%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (78 samples, 0.12%)</title><rect x="40.1892%" y="533" width="0.1187%" height="15" fill="rgb(252,64,23)" fg:x="26418" fg:w="78"/><text x="40.4392%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (78 samples, 0.12%)</title><rect x="40.1892%" y="517" width="0.1187%" height="15" fill="rgb(232,162,48)" fg:x="26418" fg:w="78"/><text x="40.4392%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (78 samples, 0.12%)</title><rect x="40.1892%" y="501" width="0.1187%" height="15" fill="rgb(246,160,12)" fg:x="26418" fg:w="78"/><text x="40.4392%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (77 samples, 0.12%)</title><rect x="40.1908%" y="485" width="0.1171%" height="15" fill="rgb(247,166,0)" fg:x="26419" fg:w="77"/><text x="40.4408%" y="495.50"></text></g><g><title>alloc::alloc::Global::grow_impl (77 samples, 0.12%)</title><rect x="40.1908%" y="469" width="0.1171%" height="15" fill="rgb(249,219,21)" fg:x="26419" fg:w="77"/><text x="40.4408%" y="479.50"></text></g><g><title>alloc::alloc::realloc (77 samples, 0.12%)</title><rect x="40.1908%" y="453" width="0.1171%" height="15" fill="rgb(205,209,3)" fg:x="26419" fg:w="77"/><text x="40.4408%" y="463.50"></text></g><g><title>__GI___libc_realloc (77 samples, 0.12%)</title><rect x="40.1908%" y="437" width="0.1171%" height="15" fill="rgb(243,44,1)" fg:x="26419" fg:w="77"/><text x="40.4408%" y="447.50"></text></g><g><title>_int_realloc (71 samples, 0.11%)</title><rect x="40.1999%" y="421" width="0.1080%" height="15" fill="rgb(206,159,16)" fg:x="26425" fg:w="71"/><text x="40.4499%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (94 samples, 0.14%)</title><rect x="40.1664%" y="709" width="0.1430%" height="15" fill="rgb(244,77,30)" fg:x="26403" fg:w="94"/><text x="40.4164%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (79 samples, 0.12%)</title><rect x="40.1892%" y="693" width="0.1202%" height="15" fill="rgb(218,69,12)" fg:x="26418" fg:w="79"/><text x="40.4392%" y="703.50"></text></g><g><title>core::fmt::write (79 samples, 0.12%)</title><rect x="40.1892%" y="677" width="0.1202%" height="15" fill="rgb(212,87,7)" fg:x="26418" fg:w="79"/><text x="40.4392%" y="687.50"></text></g><g><title>__memmove_avx_unaligned_erms (7 samples, 0.01%)</title><rect x="40.3216%" y="693" width="0.0106%" height="15" fill="rgb(245,114,25)" fg:x="26505" fg:w="7"/><text x="40.5716%" y="703.50"></text></g><g><title>alloc::str::&lt;impl alloc::slice::Join&lt;&amp;str&gt; for [S]&gt;::join (17 samples, 0.03%)</title><rect x="40.3094%" y="709" width="0.0259%" height="15" fill="rgb(210,61,42)" fg:x="26497" fg:w="17"/><text x="40.5594%" y="719.50"></text></g><g><title>_int_free (14 samples, 0.02%)</title><rect x="40.3809%" y="421" width="0.0213%" height="15" fill="rgb(211,52,33)" fg:x="26544" fg:w="14"/><text x="40.6309%" y="431.50"></text></g><g><title>malloc_consolidate (7 samples, 0.01%)</title><rect x="40.3916%" y="405" width="0.0106%" height="15" fill="rgb(234,58,33)" fg:x="26551" fg:w="7"/><text x="40.6416%" y="415.50"></text></g><g><title>_int_malloc (24 samples, 0.04%)</title><rect x="40.4022%" y="421" width="0.0365%" height="15" fill="rgb(220,115,36)" fg:x="26558" fg:w="24"/><text x="40.6522%" y="431.50"></text></g><g><title>__GI___libc_realloc (61 samples, 0.09%)</title><rect x="40.3475%" y="453" width="0.0928%" height="15" fill="rgb(243,153,54)" fg:x="26522" fg:w="61"/><text x="40.5975%" y="463.50"></text></g><g><title>_int_realloc (50 samples, 0.08%)</title><rect x="40.3642%" y="437" width="0.0761%" height="15" fill="rgb(251,47,18)" fg:x="26533" fg:w="50"/><text x="40.6142%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (69 samples, 0.10%)</title><rect x="40.3429%" y="581" width="0.1050%" height="15" fill="rgb(242,102,42)" fg:x="26519" fg:w="69"/><text x="40.5929%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (69 samples, 0.10%)</title><rect x="40.3429%" y="565" width="0.1050%" height="15" fill="rgb(234,31,38)" fg:x="26519" fg:w="69"/><text x="40.5929%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (69 samples, 0.10%)</title><rect x="40.3429%" y="549" width="0.1050%" height="15" fill="rgb(221,117,51)" fg:x="26519" fg:w="69"/><text x="40.5929%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (69 samples, 0.10%)</title><rect x="40.3429%" y="533" width="0.1050%" height="15" fill="rgb(212,20,18)" fg:x="26519" fg:w="69"/><text x="40.5929%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (67 samples, 0.10%)</title><rect x="40.3459%" y="517" width="0.1019%" height="15" fill="rgb(245,133,36)" fg:x="26521" fg:w="67"/><text x="40.5959%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (66 samples, 0.10%)</title><rect x="40.3475%" y="501" width="0.1004%" height="15" fill="rgb(212,6,19)" fg:x="26522" fg:w="66"/><text x="40.5975%" y="511.50"></text></g><g><title>alloc::alloc::Global::grow_impl (66 samples, 0.10%)</title><rect x="40.3475%" y="485" width="0.1004%" height="15" fill="rgb(218,1,36)" fg:x="26522" fg:w="66"/><text x="40.5975%" y="495.50"></text></g><g><title>alloc::alloc::realloc (66 samples, 0.10%)</title><rect x="40.3475%" y="469" width="0.1004%" height="15" fill="rgb(246,84,54)" fg:x="26522" fg:w="66"/><text x="40.5975%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (74 samples, 0.11%)</title><rect x="40.3399%" y="677" width="0.1126%" height="15" fill="rgb(242,110,6)" fg:x="26517" fg:w="74"/><text x="40.5899%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (73 samples, 0.11%)</title><rect x="40.3414%" y="661" width="0.1111%" height="15" fill="rgb(214,47,5)" fg:x="26518" fg:w="73"/><text x="40.5914%" y="671.50"></text></g><g><title>alloc::string::String::push_str (73 samples, 0.11%)</title><rect x="40.3414%" y="645" width="0.1111%" height="15" fill="rgb(218,159,25)" fg:x="26518" fg:w="73"/><text x="40.5914%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (73 samples, 0.11%)</title><rect x="40.3414%" y="629" width="0.1111%" height="15" fill="rgb(215,211,28)" fg:x="26518" fg:w="73"/><text x="40.5914%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (73 samples, 0.11%)</title><rect x="40.3414%" y="613" width="0.1111%" height="15" fill="rgb(238,59,32)" fg:x="26518" fg:w="73"/><text x="40.5914%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (73 samples, 0.11%)</title><rect x="40.3414%" y="597" width="0.1111%" height="15" fill="rgb(226,82,3)" fg:x="26518" fg:w="73"/><text x="40.5914%" y="607.50"></text></g><g><title>&lt;datafusion_expr::logical_plan::plan::LogicalPlan::display::Wrapper as core::fmt::Display&gt;::fmt (230 samples, 0.35%)</title><rect x="40.1056%" y="725" width="0.3499%" height="15" fill="rgb(240,164,32)" fg:x="26363" fg:w="230"/><text x="40.3556%" y="735.50"></text></g><g><title>core::fmt::Formatter::write_fmt (79 samples, 0.12%)</title><rect x="40.3353%" y="709" width="0.1202%" height="15" fill="rgb(232,46,7)" fg:x="26514" fg:w="79"/><text x="40.5853%" y="719.50"></text></g><g><title>core::fmt::write (78 samples, 0.12%)</title><rect x="40.3368%" y="693" width="0.1187%" height="15" fill="rgb(229,129,53)" fg:x="26515" fg:w="78"/><text x="40.5868%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (508 samples, 0.77%)</title><rect x="39.6994%" y="869" width="0.7728%" height="15" fill="rgb(234,188,29)" fg:x="26096" fg:w="508"/><text x="39.9494%" y="879.50"></text></g><g><title>core::fmt::Write::write_fmt (508 samples, 0.77%)</title><rect x="39.6994%" y="853" width="0.7728%" height="15" fill="rgb(246,141,4)" fg:x="26096" fg:w="508"/><text x="39.9494%" y="863.50"></text></g><g><title>core::fmt::write (508 samples, 0.77%)</title><rect x="39.6994%" y="837" width="0.7728%" height="15" fill="rgb(229,23,39)" fg:x="26096" fg:w="508"/><text x="39.9494%" y="847.50"></text></g><g><title>&lt;datafusion_expr::logical_plan::plan::LogicalPlan::display_indent::Wrapper as core::fmt::Display&gt;::fmt (508 samples, 0.77%)</title><rect x="39.6994%" y="821" width="0.7728%" height="15" fill="rgb(206,12,3)" fg:x="26096" fg:w="508"/><text x="39.9494%" y="831.50"></text></g><g><title>datafusion_expr::logical_plan::plan::LogicalPlan::accept (508 samples, 0.77%)</title><rect x="39.6994%" y="805" width="0.7728%" height="15" fill="rgb(252,226,20)" fg:x="26096" fg:w="508"/><text x="39.9494%" y="815.50"></text></g><g><title>datafusion_expr::logical_plan::plan::LogicalPlan::accept (256 samples, 0.39%)</title><rect x="40.0828%" y="789" width="0.3894%" height="15" fill="rgb(216,123,35)" fg:x="26348" fg:w="256"/><text x="40.3328%" y="799.50"></text></g><g><title>&lt;datafusion_expr::logical_plan::display::IndentVisitor as datafusion_expr::logical_plan::plan::PlanVisitor&gt;::pre_visit (254 samples, 0.39%)</title><rect x="40.0858%" y="773" width="0.3864%" height="15" fill="rgb(212,68,40)" fg:x="26350" fg:w="254"/><text x="40.3358%" y="783.50"></text></g><g><title>core::fmt::Formatter::write_fmt (252 samples, 0.38%)</title><rect x="40.0888%" y="757" width="0.3834%" height="15" fill="rgb(254,125,32)" fg:x="26352" fg:w="252"/><text x="40.3388%" y="767.50"></text></g><g><title>core::fmt::write (248 samples, 0.38%)</title><rect x="40.0949%" y="741" width="0.3773%" height="15" fill="rgb(253,97,22)" fg:x="26356" fg:w="248"/><text x="40.3449%" y="751.50"></text></g><g><title>core::fmt::run (11 samples, 0.02%)</title><rect x="40.4555%" y="725" width="0.0167%" height="15" fill="rgb(241,101,14)" fg:x="26593" fg:w="11"/><text x="40.7055%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="40.5118%" y="837" width="0.0137%" height="15" fill="rgb(238,103,29)" fg:x="26630" fg:w="9"/><text x="40.7618%" y="847.50"></text></g><g><title>&lt;datafusion_expr::expr::Expr as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="40.5148%" y="821" width="0.0106%" height="15" fill="rgb(233,195,47)" fg:x="26632" fg:w="7"/><text x="40.7648%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27 samples, 0.04%)</title><rect x="40.5315%" y="821" width="0.0411%" height="15" fill="rgb(246,218,30)" fg:x="26643" fg:w="27"/><text x="40.7815%" y="831.50"></text></g><g><title>fastfull_search::optimizer::logical_optimizer::rewrite_boolean_predicate::normalize_predicate (30 samples, 0.05%)</title><rect x="40.5285%" y="837" width="0.0456%" height="15" fill="rgb(219,145,47)" fg:x="26641" fg:w="30"/><text x="40.7785%" y="847.50"></text></g><g><title>&lt;datafusion_expr::expr::Expr as core::clone::Clone&gt;::clone (13 samples, 0.02%)</title><rect x="40.6030%" y="805" width="0.0198%" height="15" fill="rgb(243,12,26)" fg:x="26690" fg:w="13"/><text x="40.8530%" y="815.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.02%)</title><rect x="40.6228%" y="805" width="0.0213%" height="15" fill="rgb(214,87,16)" fg:x="26703" fg:w="14"/><text x="40.8728%" y="815.50"></text></g><g><title>_int_malloc (8 samples, 0.01%)</title><rect x="40.6319%" y="789" width="0.0122%" height="15" fill="rgb(208,99,42)" fg:x="26709" fg:w="8"/><text x="40.8819%" y="799.50"></text></g><g><title>&lt;datafusion_expr::expr::Expr as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="40.6441%" y="789" width="0.0137%" height="15" fill="rgb(253,99,2)" fg:x="26717" fg:w="9"/><text x="40.8941%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="40.6472%" y="773" width="0.0106%" height="15" fill="rgb(220,168,23)" fg:x="26719" fg:w="7"/><text x="40.8972%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="40.6472%" y="757" width="0.0106%" height="15" fill="rgb(242,38,24)" fg:x="26719" fg:w="7"/><text x="40.8972%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.01%)</title><rect x="40.6472%" y="741" width="0.0106%" height="15" fill="rgb(225,182,9)" fg:x="26719" fg:w="7"/><text x="40.8972%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.01%)</title><rect x="40.6472%" y="725" width="0.0106%" height="15" fill="rgb(243,178,37)" fg:x="26719" fg:w="7"/><text x="40.8972%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.01%)</title><rect x="40.6472%" y="709" width="0.0106%" height="15" fill="rgb(232,139,19)" fg:x="26719" fg:w="7"/><text x="40.8972%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.01%)</title><rect x="40.6472%" y="693" width="0.0106%" height="15" fill="rgb(225,201,24)" fg:x="26719" fg:w="7"/><text x="40.8972%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.01%)</title><rect x="40.6472%" y="677" width="0.0106%" height="15" fill="rgb(221,47,46)" fg:x="26719" fg:w="7"/><text x="40.8972%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.01%)</title><rect x="40.6472%" y="661" width="0.0106%" height="15" fill="rgb(249,23,13)" fg:x="26719" fg:w="7"/><text x="40.8972%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.01%)</title><rect x="40.6472%" y="645" width="0.0106%" height="15" fill="rgb(219,9,5)" fg:x="26719" fg:w="7"/><text x="40.8972%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.01%)</title><rect x="40.6472%" y="629" width="0.0106%" height="15" fill="rgb(254,171,16)" fg:x="26719" fg:w="7"/><text x="40.8972%" y="639.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.01%)</title><rect x="40.6472%" y="613" width="0.0106%" height="15" fill="rgb(230,171,20)" fg:x="26719" fg:w="7"/><text x="40.8972%" y="623.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.01%)</title><rect x="40.6472%" y="597" width="0.0106%" height="15" fill="rgb(210,71,41)" fg:x="26719" fg:w="7"/><text x="40.8972%" y="607.50"></text></g><g><title>fastfull_search::optimizer::logical_optimizer::rewrite_boolean_predicate::predicate (63 samples, 0.10%)</title><rect x="40.5741%" y="837" width="0.0958%" height="15" fill="rgb(206,173,20)" fg:x="26671" fg:w="63"/><text x="40.8241%" y="847.50"></text></g><g><title>fastfull_search::optimizer::logical_optimizer::rewrite_boolean_predicate::predicate (49 samples, 0.07%)</title><rect x="40.5954%" y="821" width="0.0745%" height="15" fill="rgb(233,88,34)" fg:x="26685" fg:w="49"/><text x="40.8454%" y="831.50"></text></g><g><title>fastfull_search::optimizer::logical_optimizer::rewrite_boolean_predicate::predicate (17 samples, 0.03%)</title><rect x="40.6441%" y="805" width="0.0259%" height="15" fill="rgb(223,209,46)" fg:x="26717" fg:w="17"/><text x="40.8941%" y="815.50"></text></g><g><title>&lt;datafusion_expr::expr::Expr as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="40.7065%" y="789" width="0.0137%" height="15" fill="rgb(250,43,18)" fg:x="26758" fg:w="9"/><text x="40.9565%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.02%)</title><rect x="40.7050%" y="805" width="0.0167%" height="15" fill="rgb(208,13,10)" fg:x="26757" fg:w="11"/><text x="40.9550%" y="815.50"></text></g><g><title>&lt;datafusion_expr::expr::Expr as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="40.7217%" y="805" width="0.0106%" height="15" fill="rgb(212,200,36)" fg:x="26768" fg:w="7"/><text x="40.9717%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (122 samples, 0.19%)</title><rect x="40.6821%" y="821" width="0.1856%" height="15" fill="rgb(225,90,30)" fg:x="26742" fg:w="122"/><text x="40.9321%" y="831.50"></text></g><g><title>__GI___libc_malloc (89 samples, 0.14%)</title><rect x="40.7323%" y="805" width="0.1354%" height="15" fill="rgb(236,182,39)" fg:x="26775" fg:w="89"/><text x="40.9823%" y="815.50"></text></g><g><title>_int_malloc (65 samples, 0.10%)</title><rect x="40.7689%" y="789" width="0.0989%" height="15" fill="rgb(212,144,35)" fg:x="26799" fg:w="65"/><text x="41.0189%" y="799.50"></text></g><g><title>_int_free (15 samples, 0.02%)</title><rect x="40.8769%" y="821" width="0.0228%" height="15" fill="rgb(228,63,44)" fg:x="26870" fg:w="15"/><text x="41.1269%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;datafusion_expr::logical_plan::plan::Predicate&gt; (15 samples, 0.02%)</title><rect x="40.9043%" y="821" width="0.0228%" height="15" fill="rgb(228,109,6)" fg:x="26888" fg:w="15"/><text x="41.1543%" y="831.50"></text></g><g><title>__GI___libc_malloc (27 samples, 0.04%)</title><rect x="40.9392%" y="789" width="0.0411%" height="15" fill="rgb(238,117,24)" fg:x="26911" fg:w="27"/><text x="41.1892%" y="799.50"></text></g><g><title>_int_malloc (20 samples, 0.03%)</title><rect x="40.9499%" y="773" width="0.0304%" height="15" fill="rgb(242,26,26)" fg:x="26918" fg:w="20"/><text x="41.1999%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (34 samples, 0.05%)</title><rect x="40.9301%" y="805" width="0.0517%" height="15" fill="rgb(221,92,48)" fg:x="26905" fg:w="34"/><text x="41.1801%" y="815.50"></text></g><g><title>fastfull_search::optimizer::logical_optimizer::rewrite_boolean_predicate::flatten_and_predicates (55 samples, 0.08%)</title><rect x="40.9271%" y="821" width="0.0837%" height="15" fill="rgb(209,209,32)" fg:x="26903" fg:w="55"/><text x="41.1771%" y="831.50"></text></g><g><title>fastfull_search::optimizer::logical_optimizer::rewrite_boolean_predicate::flatten_and_predicates (10 samples, 0.02%)</title><rect x="40.9955%" y="805" width="0.0152%" height="15" fill="rgb(221,70,22)" fg:x="26948" fg:w="10"/><text x="41.2455%" y="815.50"></text></g><g><title>&lt;fastfull_search::optimizer::logical_optimizer::rewrite_boolean_predicate::RewriteBooleanPredicate as datafusion_optimizer::optimizer::OptimizerRule&gt;::try_optimize (350 samples, 0.53%)</title><rect x="40.4829%" y="853" width="0.5324%" height="15" fill="rgb(248,145,5)" fg:x="26611" fg:w="350"/><text x="40.7329%" y="863.50"></text></g><g><title>fastfull_search::optimizer::logical_optimizer::rewrite_boolean_predicate::rewrite_predicate (227 samples, 0.35%)</title><rect x="40.6700%" y="837" width="0.3453%" height="15" fill="rgb(226,116,26)" fg:x="26734" fg:w="227"/><text x="40.9200%" y="847.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="42.8454%" y="757" width="0.0106%" height="15" fill="rgb(244,5,17)" fg:x="28164" fg:w="7"/><text x="43.0954%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="42.8454%" y="741" width="0.0106%" height="15" fill="rgb(252,159,33)" fg:x="28164" fg:w="7"/><text x="43.0954%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="42.8454%" y="725" width="0.0106%" height="15" fill="rgb(206,71,0)" fg:x="28164" fg:w="7"/><text x="43.0954%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="42.8454%" y="709" width="0.0106%" height="15" fill="rgb(233,118,54)" fg:x="28164" fg:w="7"/><text x="43.0954%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="42.8454%" y="693" width="0.0106%" height="15" fill="rgb(234,83,48)" fg:x="28164" fg:w="7"/><text x="43.0954%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="42.8454%" y="677" width="0.0106%" height="15" fill="rgb(228,3,54)" fg:x="28164" fg:w="7"/><text x="43.0954%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="42.8454%" y="661" width="0.0106%" height="15" fill="rgb(226,155,13)" fg:x="28164" fg:w="7"/><text x="43.0954%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="42.8454%" y="645" width="0.0106%" height="15" fill="rgb(241,28,37)" fg:x="28164" fg:w="7"/><text x="43.0954%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="42.8454%" y="629" width="0.0106%" height="15" fill="rgb(233,93,10)" fg:x="28164" fg:w="7"/><text x="43.0954%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="42.8454%" y="613" width="0.0106%" height="15" fill="rgb(225,113,19)" fg:x="28164" fg:w="7"/><text x="43.0954%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="42.8454%" y="597" width="0.0106%" height="15" fill="rgb(241,2,18)" fg:x="28164" fg:w="7"/><text x="43.0954%" y="607.50"></text></g><g><title>malloc_consolidate (672 samples, 1.02%)</title><rect x="42.1380%" y="773" width="1.0223%" height="15" fill="rgb(228,207,21)" fg:x="27699" fg:w="672"/><text x="42.3880%" y="783.50"></text></g><g><title>unlink_chunk.isra.0 (200 samples, 0.30%)</title><rect x="42.8561%" y="757" width="0.3043%" height="15" fill="rgb(213,211,35)" fg:x="28171" fg:w="200"/><text x="43.1061%" y="767.50"></text></g><g><title>__GI___libc_malloc (1,397 samples, 2.13%)</title><rect x="41.0381%" y="805" width="2.1252%" height="15" fill="rgb(209,83,10)" fg:x="26976" fg:w="1397"/><text x="41.2881%" y="815.50">_..</text></g><g><title>_int_malloc (1,394 samples, 2.12%)</title><rect x="41.0427%" y="789" width="2.1207%" height="15" fill="rgb(209,164,1)" fg:x="26979" fg:w="1394"/><text x="41.2927%" y="799.50">_..</text></g><g><title>core::iter::adapters::try_process (1,419 samples, 2.16%)</title><rect x="41.0290%" y="837" width="2.1587%" height="15" fill="rgb(213,184,43)" fg:x="26970" fg:w="1419"/><text x="41.2790%" y="847.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,418 samples, 2.16%)</title><rect x="41.0305%" y="821" width="2.1572%" height="15" fill="rgb(231,61,34)" fg:x="26971" fg:w="1418"/><text x="41.2805%" y="831.50">&lt;..</text></g><g><title>datafusion_optimizer::optimizer::Optimizer::optimize_recursively (15 samples, 0.02%)</title><rect x="43.1649%" y="805" width="0.0228%" height="15" fill="rgb(235,75,3)" fg:x="28374" fg:w="15"/><text x="43.4149%" y="815.50"></text></g><g><title>datafusion_optimizer::optimizer::Optimizer::optimize_inputs (8 samples, 0.01%)</title><rect x="43.1755%" y="789" width="0.0122%" height="15" fill="rgb(220,106,47)" fg:x="28381" fg:w="8"/><text x="43.4255%" y="799.50"></text></g><g><title>do_query::main_inner::{{closure}} (9,459 samples, 14.39%)</title><rect x="28.8024%" y="917" width="14.3898%" height="15" fill="rgb(210,196,33)" fg:x="18933" fg:w="9459"/><text x="29.0524%" y="927.50">do_query::main_inner::..</text></g><g><title>datafusion::execution::context::SessionState::optimize (2,382 samples, 3.62%)</title><rect x="39.5686%" y="901" width="3.6237%" height="15" fill="rgb(229,154,42)" fg:x="26010" fg:w="2382"/><text x="39.8186%" y="911.50">data..</text></g><g><title>datafusion_optimizer::optimizer::Optimizer::optimize (2,382 samples, 3.62%)</title><rect x="39.5686%" y="885" width="3.6237%" height="15" fill="rgb(228,114,26)" fg:x="26010" fg:w="2382"/><text x="39.8186%" y="895.50">data..</text></g><g><title>datafusion_optimizer::optimizer::Optimizer::optimize_recursively (1,788 samples, 2.72%)</title><rect x="40.4722%" y="869" width="2.7201%" height="15" fill="rgb(208,144,1)" fg:x="26604" fg:w="1788"/><text x="40.7222%" y="879.50">da..</text></g><g><title>datafusion_optimizer::optimizer::Optimizer::optimize_inputs (1,427 samples, 2.17%)</title><rect x="41.0214%" y="853" width="2.1709%" height="15" fill="rgb(239,112,37)" fg:x="26965" fg:w="1427"/><text x="41.2714%" y="863.50">d..</text></g><g><title>fastfull_search::batch::posting_batch::PostingBatch::project_with_predicate (9 samples, 0.01%)</title><rect x="43.1923%" y="917" width="0.0137%" height="15" fill="rgb(210,96,50)" fg:x="28392" fg:w="9"/><text x="43.4423%" y="927.50"></text></g><g><title>fastfull_search::physical_expr::boolean_eval::PhysicalPredicate::eval_avx512 (10 samples, 0.02%)</title><rect x="43.2196%" y="917" width="0.0152%" height="15" fill="rgb(222,178,2)" fg:x="28410" fg:w="10"/><text x="43.4696%" y="927.50"></text></g><g><title>fastfull_search::physical_expr::short_circuit_primitives::ShortCircuit::eval_avx512 (11 samples, 0.02%)</title><rect x="43.2349%" y="917" width="0.0167%" height="15" fill="rgb(226,74,18)" fg:x="28420" fg:w="11"/><text x="43.4849%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.01%)</title><rect x="43.2683%" y="917" width="0.0106%" height="15" fill="rgb(225,67,54)" fg:x="28442" fg:w="7"/><text x="43.5183%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (27 samples, 0.04%)</title><rect x="43.2790%" y="917" width="0.0411%" height="15" fill="rgb(251,92,32)" fg:x="28449" fg:w="27"/><text x="43.5290%" y="927.50"></text></g><g><title>malloc_consolidate (54 samples, 0.08%)</title><rect x="43.3200%" y="917" width="0.0821%" height="15" fill="rgb(228,149,22)" fg:x="28476" fg:w="54"/><text x="43.5700%" y="927.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.02%)</title><rect x="43.5315%" y="853" width="0.0228%" height="15" fill="rgb(243,54,13)" fg:x="28615" fg:w="15"/><text x="43.7815%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;str&gt;&gt;::from_iter (22 samples, 0.03%)</title><rect x="43.5285%" y="869" width="0.0335%" height="15" fill="rgb(243,180,28)" fg:x="28613" fg:w="22"/><text x="43.7785%" y="879.50"></text></g><g><title>__GI___libc_free (78 samples, 0.12%)</title><rect x="43.6882%" y="853" width="0.1187%" height="15" fill="rgb(208,167,24)" fg:x="28718" fg:w="78"/><text x="43.9382%" y="863.50"></text></g><g><title>__rdl_dealloc (8 samples, 0.01%)</title><rect x="43.8069%" y="853" width="0.0122%" height="15" fill="rgb(245,73,45)" fg:x="28796" fg:w="8"/><text x="44.0569%" y="863.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.01%)</title><rect x="43.8069%" y="837" width="0.0122%" height="15" fill="rgb(237,203,48)" fg:x="28796" fg:w="8"/><text x="44.0569%" y="847.50"></text></g><g><title>[[kernel.kallsyms]] (78 samples, 0.12%)</title><rect x="44.4519%" y="837" width="0.1187%" height="15" fill="rgb(211,197,16)" fg:x="29220" fg:w="78"/><text x="44.7019%" y="847.50"></text></g><g><title>[[kernel.kallsyms]] (64 samples, 0.10%)</title><rect x="44.4732%" y="821" width="0.0974%" height="15" fill="rgb(243,99,51)" fg:x="29234" fg:w="64"/><text x="44.7232%" y="831.50"></text></g><g><title>[[kernel.kallsyms]] (64 samples, 0.10%)</title><rect x="44.4732%" y="805" width="0.0974%" height="15" fill="rgb(215,123,29)" fg:x="29234" fg:w="64"/><text x="44.7232%" y="815.50"></text></g><g><title>[[kernel.kallsyms]] (61 samples, 0.09%)</title><rect x="44.4777%" y="789" width="0.0928%" height="15" fill="rgb(239,186,37)" fg:x="29237" fg:w="61"/><text x="44.7277%" y="799.50"></text></g><g><title>[[kernel.kallsyms]] (59 samples, 0.09%)</title><rect x="44.4808%" y="773" width="0.0898%" height="15" fill="rgb(252,136,39)" fg:x="29239" fg:w="59"/><text x="44.7308%" y="783.50"></text></g><g><title>[[kernel.kallsyms]] (46 samples, 0.07%)</title><rect x="44.5006%" y="757" width="0.0700%" height="15" fill="rgb(223,213,32)" fg:x="29252" fg:w="46"/><text x="44.7506%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (28 samples, 0.04%)</title><rect x="44.5279%" y="741" width="0.0426%" height="15" fill="rgb(233,115,5)" fg:x="29270" fg:w="28"/><text x="44.7779%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (23 samples, 0.03%)</title><rect x="44.5356%" y="725" width="0.0350%" height="15" fill="rgb(207,226,44)" fg:x="29275" fg:w="23"/><text x="44.7856%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.02%)</title><rect x="44.5508%" y="709" width="0.0198%" height="15" fill="rgb(208,126,0)" fg:x="29285" fg:w="13"/><text x="44.8008%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.02%)</title><rect x="44.5508%" y="693" width="0.0198%" height="15" fill="rgb(244,66,21)" fg:x="29285" fg:w="13"/><text x="44.8008%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (12 samples, 0.02%)</title><rect x="44.5523%" y="677" width="0.0183%" height="15" fill="rgb(222,97,12)" fg:x="29286" fg:w="12"/><text x="44.8023%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="44.5599%" y="661" width="0.0106%" height="15" fill="rgb(219,213,19)" fg:x="29291" fg:w="7"/><text x="44.8099%" y="671.50"></text></g><g><title>_int_free (491 samples, 0.75%)</title><rect x="43.8251%" y="853" width="0.7469%" height="15" fill="rgb(252,169,30)" fg:x="28808" fg:w="491"/><text x="44.0751%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="44.7698%" y="821" width="0.0152%" height="15" fill="rgb(206,32,51)" fg:x="29429" fg:w="10"/><text x="45.0198%" y="831.50"></text></g><g><title>__GI___libc_free (42 samples, 0.06%)</title><rect x="44.7850%" y="821" width="0.0639%" height="15" fill="rgb(250,172,42)" fg:x="29439" fg:w="42"/><text x="45.0350%" y="831.50"></text></g><g><title>_int_free (129 samples, 0.20%)</title><rect x="44.8550%" y="821" width="0.1962%" height="15" fill="rgb(209,34,43)" fg:x="29485" fg:w="129"/><text x="45.1050%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (248 samples, 0.38%)</title><rect x="44.6953%" y="837" width="0.3773%" height="15" fill="rgb(223,11,35)" fg:x="29380" fg:w="248"/><text x="44.9453%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_schema::datatype::DataType&gt; (14 samples, 0.02%)</title><rect x="45.0513%" y="821" width="0.0213%" height="15" fill="rgb(251,219,26)" fg:x="29614" fg:w="14"/><text x="45.3013%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="45.0726%" y="837" width="0.0213%" height="15" fill="rgb(231,119,3)" fg:x="29628" fg:w="14"/><text x="45.3226%" y="847.50"></text></g><g><title>__GI___libc_free (105 samples, 0.16%)</title><rect x="45.0999%" y="837" width="0.1597%" height="15" fill="rgb(216,97,11)" fg:x="29646" fg:w="105"/><text x="45.3499%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (821 samples, 1.25%)</title><rect x="44.5721%" y="853" width="1.2490%" height="15" fill="rgb(223,59,9)" fg:x="29299" fg:w="821"/><text x="44.8221%" y="863.50"></text></g><g><title>_int_free (364 samples, 0.55%)</title><rect x="45.2673%" y="837" width="0.5537%" height="15" fill="rgb(233,93,31)" fg:x="29756" fg:w="364"/><text x="45.5173%" y="847.50"></text></g><g><title>__GI___libc_free (86 samples, 0.13%)</title><rect x="46.0066%" y="837" width="0.1308%" height="15" fill="rgb(239,81,33)" fg:x="30242" fg:w="86"/><text x="46.2566%" y="847.50"></text></g><g><title>_int_free (366 samples, 0.56%)</title><rect x="46.1466%" y="837" width="0.5568%" height="15" fill="rgb(213,120,34)" fg:x="30334" fg:w="366"/><text x="46.3966%" y="847.50"></text></g><g><title>__GI___libc_free (29 samples, 0.04%)</title><rect x="46.9818%" y="805" width="0.0441%" height="15" fill="rgb(243,49,53)" fg:x="30883" fg:w="29"/><text x="47.2318%" y="815.50"></text></g><g><title>__rust_dealloc (7 samples, 0.01%)</title><rect x="47.0305%" y="805" width="0.0106%" height="15" fill="rgb(247,216,33)" fg:x="30915" fg:w="7"/><text x="47.2805%" y="815.50"></text></g><g><title>_int_free (186 samples, 0.28%)</title><rect x="47.0411%" y="805" width="0.2830%" height="15" fill="rgb(226,26,14)" fg:x="30922" fg:w="186"/><text x="47.2911%" y="815.50"></text></g><g><title>__GI___libc_free (45 samples, 0.07%)</title><rect x="47.4229%" y="789" width="0.0685%" height="15" fill="rgb(215,49,53)" fg:x="31173" fg:w="45"/><text x="47.6729%" y="799.50"></text></g><g><title>_int_free (154 samples, 0.23%)</title><rect x="47.5005%" y="789" width="0.2343%" height="15" fill="rgb(245,162,40)" fg:x="31224" fg:w="154"/><text x="47.7505%" y="799.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (272 samples, 0.41%)</title><rect x="47.3241%" y="805" width="0.4138%" height="15" fill="rgb(229,68,17)" fg:x="31108" fg:w="272"/><text x="47.5741%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,760 samples, 4.20%)</title><rect x="43.5619%" y="869" width="4.1987%" height="15" fill="rgb(213,182,10)" fg:x="28635" fg:w="2760"/><text x="43.8119%" y="879.50">&lt;allo..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (1,275 samples, 1.94%)</title><rect x="45.8210%" y="853" width="1.9396%" height="15" fill="rgb(245,125,30)" fg:x="30120" fg:w="1275"/><text x="46.0710%" y="863.50">c..</text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (695 samples, 1.06%)</title><rect x="46.7034%" y="837" width="1.0573%" height="15" fill="rgb(232,202,2)" fg:x="30700" fg:w="695"/><text x="46.9534%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (623 samples, 0.95%)</title><rect x="46.8129%" y="821" width="0.9478%" height="15" fill="rgb(237,140,51)" fg:x="30772" fg:w="623"/><text x="47.0629%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_schema::datatype::DataType&gt; (15 samples, 0.02%)</title><rect x="47.7379%" y="805" width="0.0228%" height="15" fill="rgb(236,157,25)" fg:x="31380" fg:w="15"/><text x="47.9879%" y="815.50"></text></g><g><title>__memcmp_avx2_movbe (52 samples, 0.08%)</title><rect x="47.8550%" y="821" width="0.0791%" height="15" fill="rgb(219,209,0)" fg:x="31457" fg:w="52"/><text x="48.1050%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (115 samples, 0.17%)</title><rect x="47.7713%" y="853" width="0.1749%" height="15" fill="rgb(240,116,54)" fg:x="31402" fg:w="115"/><text x="48.0213%" y="863.50"></text></g><g><title>arrow_schema::schema::Schema::index_of (115 samples, 0.17%)</title><rect x="47.7713%" y="837" width="0.1749%" height="15" fill="rgb(216,10,36)" fg:x="31402" fg:w="115"/><text x="48.0213%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.01%)</title><rect x="47.9341%" y="821" width="0.0122%" height="15" fill="rgb(222,72,44)" fg:x="31509" fg:w="8"/><text x="48.1841%" y="831.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.02%)</title><rect x="47.9463%" y="853" width="0.0183%" height="15" fill="rgb(232,159,9)" fg:x="31517" fg:w="12"/><text x="48.1963%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (17 samples, 0.03%)</title><rect x="47.9873%" y="837" width="0.0259%" height="15" fill="rgb(210,39,32)" fg:x="31544" fg:w="17"/><text x="48.2373%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tantivy::tokenizer::lower_caser::LowerCaserTokenStream&gt; (9 samples, 0.01%)</title><rect x="48.0254%" y="837" width="0.0137%" height="15" fill="rgb(216,194,45)" fg:x="31569" fg:w="9"/><text x="48.2754%" y="847.50"></text></g><g><title>tantivy::tokenizer::tokenizer::TextAnalyzer::token_stream (15 samples, 0.02%)</title><rect x="48.0391%" y="837" width="0.0228%" height="15" fill="rgb(218,18,35)" fg:x="31578" fg:w="15"/><text x="48.2891%" y="847.50"></text></g><g><title>&lt;tantivy::tokenizer::simple_tokenizer::SimpleTokenizer as tantivy::tokenizer::tokenizer::Tokenizer&gt;::token_stream (7 samples, 0.01%)</title><rect x="48.0512%" y="821" width="0.0106%" height="15" fill="rgb(207,83,51)" fg:x="31586" fg:w="7"/><text x="48.3012%" y="831.50"></text></g><g><title>&lt;tantivy::tokenizer::remove_long::RemoveLongFilterStream as tantivy::tokenizer::tokenizer::TokenStream&gt;::advance (7 samples, 0.01%)</title><rect x="48.0771%" y="805" width="0.0106%" height="15" fill="rgb(225,63,43)" fg:x="31603" fg:w="7"/><text x="48.3271%" y="815.50"></text></g><g><title>&lt;tantivy::tokenizer::simple_tokenizer::SimpleTokenStream as tantivy::tokenizer::tokenizer::TokenStream&gt;::advance (7 samples, 0.01%)</title><rect x="48.0771%" y="789" width="0.0106%" height="15" fill="rgb(207,57,36)" fg:x="31603" fg:w="7"/><text x="48.3271%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (216 samples, 0.33%)</title><rect x="47.7607%" y="869" width="0.3286%" height="15" fill="rgb(216,99,33)" fg:x="31395" fg:w="216"/><text x="48.0107%" y="879.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (77 samples, 0.12%)</title><rect x="47.9721%" y="853" width="0.1171%" height="15" fill="rgb(225,42,16)" fg:x="31534" fg:w="77"/><text x="48.2221%" y="863.50"></text></g><g><title>tantivy::tokenizer::tokenizer::TokenStream::next (18 samples, 0.03%)</title><rect x="48.0619%" y="837" width="0.0274%" height="15" fill="rgb(220,201,45)" fg:x="31593" fg:w="18"/><text x="48.3119%" y="847.50"></text></g><g><title>&lt;tantivy::tokenizer::lower_caser::LowerCaserTokenStream as tantivy::tokenizer::tokenizer::TokenStream&gt;::advance (18 samples, 0.03%)</title><rect x="48.0619%" y="821" width="0.0274%" height="15" fill="rgb(225,33,4)" fg:x="31593" fg:w="18"/><text x="48.3119%" y="831.50"></text></g><g><title>&lt;fastfull_search::optimizer::physical_optimizer::min_operation_range::MinOperationRange as datafusion::physical_optimizer::optimizer::PhysicalOptimizerRule&gt;::optimize (17 samples, 0.03%)</title><rect x="48.1547%" y="837" width="0.0259%" height="15" fill="rgb(224,33,50)" fg:x="31654" fg:w="17"/><text x="48.4047%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastfull_search::optimizer::physical_optimizer::min_operation_range::GetMinRange&gt; (17 samples, 0.03%)</title><rect x="48.1547%" y="821" width="0.0259%" height="15" fill="rgb(246,198,51)" fg:x="31654" fg:w="17"/><text x="48.4047%" y="831.50"></text></g><g><title>&lt;fastfull_search::optimizer::physical_optimizer::primitives_combination::PrimitivesCombination as datafusion::physical_optimizer::optimizer::PhysicalOptimizerRule&gt;::optimize (16 samples, 0.02%)</title><rect x="48.1805%" y="837" width="0.0243%" height="15" fill="rgb(205,22,4)" fg:x="31671" fg:w="16"/><text x="48.4305%" y="847.50"></text></g><g><title>datafusion::physical_plan::rewrite::TreeNodeRewritable::transform_down (16 samples, 0.02%)</title><rect x="48.1805%" y="821" width="0.0243%" height="15" fill="rgb(206,3,8)" fg:x="31671" fg:w="16"/><text x="48.4305%" y="831.50"></text></g><g><title>&lt;fastfull_search::optimizer::planner::boolean_planner::BooleanPhysicalPlanner as datafusion::physical_plan::planner::PhysicalPlanner&gt;::create_physical_plan::_{{closure}} (69 samples, 0.10%)</title><rect x="48.1090%" y="853" width="0.1050%" height="15" fill="rgb(251,23,15)" fg:x="31624" fg:w="69"/><text x="48.3590%" y="863.50"></text></g><g><title>&lt;fastfull_search::context::boolean_context::BooleanPlanner as datafusion::execution::context::QueryPlanner&gt;::create_physical_plan::{{closure}} (90 samples, 0.14%)</title><rect x="48.0893%" y="869" width="0.1369%" height="15" fill="rgb(252,88,28)" fg:x="31611" fg:w="90"/><text x="48.3393%" y="879.50"></text></g><g><title>__GI___libc_malloc (35 samples, 0.05%)</title><rect x="49.1831%" y="821" width="0.0532%" height="15" fill="rgb(212,127,14)" fg:x="32330" fg:w="35"/><text x="49.4331%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (129 samples, 0.20%)</title><rect x="49.0522%" y="837" width="0.1962%" height="15" fill="rgb(247,145,37)" fg:x="32244" fg:w="129"/><text x="49.3022%" y="847.50"></text></g><g><title>&lt;arrow_schema::datatype::DataType as core::cmp::PartialEq&gt;::eq (51 samples, 0.08%)</title><rect x="49.8053%" y="805" width="0.0776%" height="15" fill="rgb(209,117,53)" fg:x="32739" fg:w="51"/><text x="50.0553%" y="815.50"></text></g><g><title>&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (316 samples, 0.48%)</title><rect x="49.4478%" y="821" width="0.4807%" height="15" fill="rgb(212,90,42)" fg:x="32504" fg:w="316"/><text x="49.6978%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_schema::datatype::DataType&gt; (25 samples, 0.04%)</title><rect x="49.8905%" y="805" width="0.0380%" height="15" fill="rgb(218,164,37)" fg:x="32795" fg:w="25"/><text x="50.1405%" y="815.50"></text></g><g><title>__GI___libc_free (78 samples, 0.12%)</title><rect x="49.9285%" y="821" width="0.1187%" height="15" fill="rgb(246,65,34)" fg:x="32820" fg:w="78"/><text x="50.1785%" y="831.50"></text></g><g><title>_int_free (48 samples, 0.07%)</title><rect x="50.0548%" y="821" width="0.0730%" height="15" fill="rgb(231,100,33)" fg:x="32903" fg:w="48"/><text x="50.3048%" y="831.50"></text></g><g><title>__GI___libc_malloc (133 samples, 0.20%)</title><rect x="50.4275%" y="805" width="0.2023%" height="15" fill="rgb(228,126,14)" fg:x="33148" fg:w="133"/><text x="50.6775%" y="815.50"></text></g><g><title>_int_malloc (91 samples, 0.14%)</title><rect x="50.4914%" y="789" width="0.1384%" height="15" fill="rgb(215,173,21)" fg:x="33190" fg:w="91"/><text x="50.7414%" y="799.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.02%)</title><rect x="50.6298%" y="805" width="0.0198%" height="15" fill="rgb(210,6,40)" fg:x="33281" fg:w="13"/><text x="50.8798%" y="815.50"></text></g><g><title>_int_free (333 samples, 0.51%)</title><rect x="51.2794%" y="709" width="0.5066%" height="15" fill="rgb(212,48,18)" fg:x="33708" fg:w="333"/><text x="51.5294%" y="719.50"></text></g><g><title>__posix_memalign (1,344 samples, 2.04%)</title><rect x="50.6678%" y="741" width="2.0446%" height="15" fill="rgb(230,214,11)" fg:x="33306" fg:w="1344"/><text x="50.9178%" y="751.50">_..</text></g><g><title>_int_memalign (1,020 samples, 1.55%)</title><rect x="51.1607%" y="725" width="1.5517%" height="15" fill="rgb(254,105,39)" fg:x="33630" fg:w="1020"/><text x="51.4107%" y="735.50"></text></g><g><title>_int_malloc (609 samples, 0.93%)</title><rect x="51.7860%" y="709" width="0.9265%" height="15" fill="rgb(245,158,5)" fg:x="34041" fg:w="609"/><text x="52.0360%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.02%)</title><rect x="52.6957%" y="693" width="0.0167%" height="15" fill="rgb(249,208,11)" fg:x="34639" fg:w="11"/><text x="52.9457%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.02%)</title><rect x="52.6957%" y="677" width="0.0167%" height="15" fill="rgb(210,39,28)" fg:x="34639" fg:w="11"/><text x="52.9457%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.02%)</title><rect x="52.6957%" y="661" width="0.0167%" height="15" fill="rgb(211,56,53)" fg:x="34639" fg:w="11"/><text x="52.9457%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.02%)</title><rect x="52.6957%" y="645" width="0.0167%" height="15" fill="rgb(226,201,30)" fg:x="34639" fg:w="11"/><text x="52.9457%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.02%)</title><rect x="52.6957%" y="629" width="0.0167%" height="15" fill="rgb(239,101,34)" fg:x="34639" fg:w="11"/><text x="52.9457%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (10 samples, 0.02%)</title><rect x="52.6972%" y="613" width="0.0152%" height="15" fill="rgb(226,209,5)" fg:x="34640" fg:w="10"/><text x="52.9472%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (10 samples, 0.02%)</title><rect x="52.6972%" y="597" width="0.0152%" height="15" fill="rgb(250,105,47)" fg:x="34640" fg:w="10"/><text x="52.9472%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (10 samples, 0.02%)</title><rect x="52.6972%" y="581" width="0.0152%" height="15" fill="rgb(230,72,3)" fg:x="34640" fg:w="10"/><text x="52.9472%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (10 samples, 0.02%)</title><rect x="52.6972%" y="565" width="0.0152%" height="15" fill="rgb(232,218,39)" fg:x="34640" fg:w="10"/><text x="52.9472%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (10 samples, 0.02%)</title><rect x="52.6972%" y="549" width="0.0152%" height="15" fill="rgb(248,166,6)" fg:x="34640" fg:w="10"/><text x="52.9472%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (10 samples, 0.02%)</title><rect x="52.6972%" y="533" width="0.0152%" height="15" fill="rgb(247,89,20)" fg:x="34640" fg:w="10"/><text x="52.9472%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.01%)</title><rect x="52.7003%" y="517" width="0.0122%" height="15" fill="rgb(248,130,54)" fg:x="34642" fg:w="8"/><text x="52.9503%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="52.7018%" y="501" width="0.0106%" height="15" fill="rgb(234,196,4)" fg:x="34643" fg:w="7"/><text x="52.9518%" y="511.50"></text></g><g><title>__rdl_alloc (1,348 samples, 2.05%)</title><rect x="50.6663%" y="789" width="2.0507%" height="15" fill="rgb(250,143,31)" fg:x="33305" fg:w="1348"/><text x="50.9163%" y="799.50">_..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,348 samples, 2.05%)</title><rect x="50.6663%" y="773" width="2.0507%" height="15" fill="rgb(211,110,34)" fg:x="33305" fg:w="1348"/><text x="50.9163%" y="783.50">s..</text></g><g><title>std::sys::unix::alloc::aligned_malloc (1,347 samples, 2.05%)</title><rect x="50.6678%" y="757" width="2.0492%" height="15" fill="rgb(215,124,48)" fg:x="33306" fg:w="1347"/><text x="50.9178%" y="767.50">s..</text></g><g><title>arrow_buffer::alloc::allocate_aligned (1,353 samples, 2.06%)</title><rect x="50.6618%" y="805" width="2.0583%" height="15" fill="rgb(216,46,13)" fg:x="33302" fg:w="1353"/><text x="50.9118%" y="815.50">a..</text></g><g><title>arrow_buffer::buffer::immutable::Buffer::from_slice_ref (1,708 samples, 2.60%)</title><rect x="50.1278%" y="821" width="2.5984%" height="15" fill="rgb(205,184,25)" fg:x="32951" fg:w="1708"/><text x="50.3778%" y="831.50">ar..</text></g><g><title>__GI___libc_malloc (285 samples, 0.43%)</title><rect x="52.9406%" y="773" width="0.4336%" height="15" fill="rgb(228,1,10)" fg:x="34800" fg:w="285"/><text x="53.1906%" y="783.50"></text></g><g><title>_int_malloc (244 samples, 0.37%)</title><rect x="53.0030%" y="757" width="0.3712%" height="15" fill="rgb(213,116,27)" fg:x="34841" fg:w="244"/><text x="53.2530%" y="767.50"></text></g><g><title>unlink_chunk.isra.0 (97 samples, 0.15%)</title><rect x="53.2266%" y="741" width="0.1476%" height="15" fill="rgb(241,95,50)" fg:x="34988" fg:w="97"/><text x="53.4766%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (17 samples, 0.03%)</title><rect x="53.3483%" y="725" width="0.0259%" height="15" fill="rgb(238,48,32)" fg:x="35068" fg:w="17"/><text x="53.5983%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (15 samples, 0.02%)</title><rect x="53.3514%" y="709" width="0.0228%" height="15" fill="rgb(235,113,49)" fg:x="35070" fg:w="15"/><text x="53.6014%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (15 samples, 0.02%)</title><rect x="53.3514%" y="693" width="0.0228%" height="15" fill="rgb(205,127,43)" fg:x="35070" fg:w="15"/><text x="53.6014%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.02%)</title><rect x="53.3529%" y="677" width="0.0213%" height="15" fill="rgb(250,162,2)" fg:x="35071" fg:w="14"/><text x="53.6029%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (12 samples, 0.02%)</title><rect x="53.3559%" y="661" width="0.0183%" height="15" fill="rgb(220,13,41)" fg:x="35073" fg:w="12"/><text x="53.6059%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (10 samples, 0.02%)</title><rect x="53.3590%" y="645" width="0.0152%" height="15" fill="rgb(249,221,25)" fg:x="35075" fg:w="10"/><text x="53.6090%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="53.3636%" y="629" width="0.0106%" height="15" fill="rgb(215,208,19)" fg:x="35078" fg:w="7"/><text x="53.6136%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.01%)</title><rect x="53.3636%" y="613" width="0.0106%" height="15" fill="rgb(236,175,2)" fg:x="35078" fg:w="7"/><text x="53.6136%" y="623.50"></text></g><g><title>__rdl_alloc (7 samples, 0.01%)</title><rect x="53.3742%" y="773" width="0.0106%" height="15" fill="rgb(241,52,2)" fg:x="35085" fg:w="7"/><text x="53.6242%" y="783.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.01%)</title><rect x="53.3742%" y="757" width="0.0106%" height="15" fill="rgb(248,140,14)" fg:x="35085" fg:w="7"/><text x="53.6242%" y="767.50"></text></g><g><title>arrow_data::data::ArrayDataBuilder::add_buffer (436 samples, 0.66%)</title><rect x="52.7261%" y="821" width="0.6633%" height="15" fill="rgb(253,22,42)" fg:x="34659" fg:w="436"/><text x="52.9761%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (343 samples, 0.52%)</title><rect x="52.8676%" y="805" width="0.5218%" height="15" fill="rgb(234,61,47)" fg:x="34752" fg:w="343"/><text x="53.1176%" y="815.50"></text></g><g><title>alloc::raw_vec::finish_grow (313 samples, 0.48%)</title><rect x="52.9133%" y="789" width="0.4762%" height="15" fill="rgb(208,226,15)" fg:x="34782" fg:w="313"/><text x="53.1633%" y="799.50"></text></g><g><title>&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::UInt64Type&gt; as core::convert::From&lt;alloc::vec::Vec&lt;&lt;arrow_array::types::UInt64Type as arrow_array::array::primitive_array::ArrowPrimitiveType&gt;::Native&gt;&gt;&gt;::from (2,832 samples, 4.31%)</title><rect x="49.2485%" y="837" width="4.3083%" height="15" fill="rgb(217,221,4)" fg:x="32373" fg:w="2832"/><text x="49.4985%" y="847.50">&lt;arro..</text></g><g><title>arrow_data::data::ArrayDataBuilder::build_unchecked (110 samples, 0.17%)</title><rect x="53.3894%" y="821" width="0.1673%" height="15" fill="rgb(212,174,34)" fg:x="35095" fg:w="110"/><text x="53.6394%" y="831.50"></text></g><g><title>arrow_data::data::ArrayData::new_unchecked (37 samples, 0.06%)</title><rect x="53.5005%" y="805" width="0.0563%" height="15" fill="rgb(253,83,4)" fg:x="35168" fg:w="37"/><text x="53.7505%" y="815.50"></text></g><g><title>__GI___libc_free (13 samples, 0.02%)</title><rect x="53.5568%" y="837" width="0.0198%" height="15" fill="rgb(250,195,49)" fg:x="35205" fg:w="13"/><text x="53.8068%" y="847.50"></text></g><g><title>__GI___libc_malloc (4,258 samples, 6.48%)</title><rect x="53.5765%" y="837" width="6.4776%" height="15" fill="rgb(241,192,25)" fg:x="35218" fg:w="4258"/><text x="53.8265%" y="847.50">__GI___l..</text></g><g><title>_int_malloc (3,639 samples, 5.54%)</title><rect x="54.5182%" y="821" width="5.5359%" height="15" fill="rgb(208,124,10)" fg:x="35837" fg:w="3639"/><text x="54.7682%" y="831.50">_int_ma..</text></g><g><title>[[kernel.kallsyms]] (260 samples, 0.40%)</title><rect x="59.6586%" y="805" width="0.3955%" height="15" fill="rgb(222,33,0)" fg:x="39216" fg:w="260"/><text x="59.9086%" y="815.50"></text></g><g><title>[[kernel.kallsyms]] (214 samples, 0.33%)</title><rect x="59.7286%" y="789" width="0.3256%" height="15" fill="rgb(234,209,28)" fg:x="39262" fg:w="214"/><text x="59.9786%" y="799.50"></text></g><g><title>[[kernel.kallsyms]] (213 samples, 0.32%)</title><rect x="59.7301%" y="773" width="0.3240%" height="15" fill="rgb(224,11,23)" fg:x="39263" fg:w="213"/><text x="59.9801%" y="783.50"></text></g><g><title>[[kernel.kallsyms]] (204 samples, 0.31%)</title><rect x="59.7438%" y="757" width="0.3103%" height="15" fill="rgb(232,99,1)" fg:x="39272" fg:w="204"/><text x="59.9938%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (196 samples, 0.30%)</title><rect x="59.7560%" y="741" width="0.2982%" height="15" fill="rgb(237,95,45)" fg:x="39280" fg:w="196"/><text x="60.0060%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (174 samples, 0.26%)</title><rect x="59.7895%" y="725" width="0.2647%" height="15" fill="rgb(208,109,11)" fg:x="39302" fg:w="174"/><text x="60.0395%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (121 samples, 0.18%)</title><rect x="59.8701%" y="709" width="0.1841%" height="15" fill="rgb(216,190,48)" fg:x="39355" fg:w="121"/><text x="60.1201%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (101 samples, 0.15%)</title><rect x="59.9005%" y="693" width="0.1536%" height="15" fill="rgb(251,171,36)" fg:x="39375" fg:w="101"/><text x="60.1505%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (87 samples, 0.13%)</title><rect x="59.9218%" y="677" width="0.1324%" height="15" fill="rgb(230,62,22)" fg:x="39389" fg:w="87"/><text x="60.1718%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (81 samples, 0.12%)</title><rect x="59.9309%" y="661" width="0.1232%" height="15" fill="rgb(225,114,35)" fg:x="39395" fg:w="81"/><text x="60.1809%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (78 samples, 0.12%)</title><rect x="59.9355%" y="645" width="0.1187%" height="15" fill="rgb(215,118,42)" fg:x="39398" fg:w="78"/><text x="60.1855%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (40 samples, 0.06%)</title><rect x="59.9933%" y="629" width="0.0609%" height="15" fill="rgb(243,119,21)" fg:x="39436" fg:w="40"/><text x="60.2433%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (23 samples, 0.03%)</title><rect x="60.0192%" y="613" width="0.0350%" height="15" fill="rgb(252,177,53)" fg:x="39453" fg:w="23"/><text x="60.2692%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.02%)</title><rect x="60.0344%" y="597" width="0.0198%" height="15" fill="rgb(237,209,29)" fg:x="39463" fg:w="13"/><text x="60.2844%" y="607.50"></text></g><g><title>__rdl_alloc (25 samples, 0.04%)</title><rect x="60.0542%" y="837" width="0.0380%" height="15" fill="rgb(212,65,23)" fg:x="39476" fg:w="25"/><text x="60.3042%" y="847.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (25 samples, 0.04%)</title><rect x="60.0542%" y="821" width="0.0380%" height="15" fill="rgb(230,222,46)" fg:x="39476" fg:w="25"/><text x="60.3042%" y="831.50"></text></g><g><title>__rust_alloc (17 samples, 0.03%)</title><rect x="60.0998%" y="837" width="0.0259%" height="15" fill="rgb(215,135,32)" fg:x="39506" fg:w="17"/><text x="60.3498%" y="847.50"></text></g><g><title>_int_free (88 samples, 0.13%)</title><rect x="60.1333%" y="837" width="0.1339%" height="15" fill="rgb(246,101,22)" fg:x="39528" fg:w="88"/><text x="60.3833%" y="847.50"></text></g><g><title>arrow_array::record_batch::RecordBatch::try_new (845 samples, 1.29%)</title><rect x="60.2671%" y="837" width="1.2855%" height="15" fill="rgb(206,107,13)" fg:x="39616" fg:w="845"/><text x="60.5171%" y="847.50"></text></g><g><title>arrow_array::record_batch::RecordBatch::try_new_impl (103 samples, 0.16%)</title><rect x="61.3959%" y="821" width="0.1567%" height="15" fill="rgb(250,100,44)" fg:x="40358" fg:w="103"/><text x="61.6459%" y="831.50"></text></g><g><title>arrow_array::array::Array::len (18 samples, 0.03%)</title><rect x="61.5252%" y="805" width="0.0274%" height="15" fill="rgb(231,147,38)" fg:x="40443" fg:w="18"/><text x="61.7752%" y="815.50"></text></g><g><title>__GI___libc_malloc (22 samples, 0.03%)</title><rect x="61.6530%" y="821" width="0.0335%" height="15" fill="rgb(229,8,40)" fg:x="40527" fg:w="22"/><text x="61.9030%" y="831.50"></text></g><g><title>__memmove_avx_unaligned_erms (9 samples, 0.01%)</title><rect x="61.6865%" y="821" width="0.0137%" height="15" fill="rgb(221,135,30)" fg:x="40549" fg:w="9"/><text x="61.9365%" y="831.50"></text></g><g><title>arrow_schema::field::Field::new (103 samples, 0.16%)</title><rect x="61.5526%" y="837" width="0.1567%" height="15" fill="rgb(249,193,18)" fg:x="40461" fg:w="103"/><text x="61.8026%" y="847.50"></text></g><g><title>arrow_schema::schema::Schema::new (362 samples, 0.55%)</title><rect x="61.7093%" y="837" width="0.5507%" height="15" fill="rgb(209,133,39)" fg:x="40564" fg:w="362"/><text x="61.9593%" y="847.50"></text></g><g><title>__GI___libc_malloc (135 samples, 0.21%)</title><rect x="87.4509%" y="805" width="0.2054%" height="15" fill="rgb(232,100,14)" fg:x="57485" fg:w="135"/><text x="87.7009%" y="815.50"></text></g><g><title>_int_malloc (108 samples, 0.16%)</title><rect x="87.4920%" y="789" width="0.1643%" height="15" fill="rgb(224,185,1)" fg:x="57512" fg:w="108"/><text x="87.7420%" y="799.50"></text></g><g><title>unlink_chunk.isra.0 (7 samples, 0.01%)</title><rect x="87.6457%" y="773" width="0.0106%" height="15" fill="rgb(223,139,8)" fg:x="57613" fg:w="7"/><text x="87.8957%" y="783.50"></text></g><g><title>_int_free (235 samples, 0.36%)</title><rect x="88.2314%" y="725" width="0.3575%" height="15" fill="rgb(232,213,38)" fg:x="57998" fg:w="235"/><text x="88.4814%" y="735.50"></text></g><g><title>__posix_memalign (612 samples, 0.93%)</title><rect x="87.6685%" y="757" width="0.9310%" height="15" fill="rgb(207,94,22)" fg:x="57628" fg:w="612"/><text x="87.9185%" y="767.50"></text></g><g><title>_int_memalign (346 samples, 0.53%)</title><rect x="88.0731%" y="741" width="0.5264%" height="15" fill="rgb(219,183,54)" fg:x="57894" fg:w="346"/><text x="88.3231%" y="751.50"></text></g><g><title>_int_malloc (7 samples, 0.01%)</title><rect x="88.5889%" y="725" width="0.0106%" height="15" fill="rgb(216,185,54)" fg:x="58233" fg:w="7"/><text x="88.8389%" y="735.50"></text></g><g><title>__rdl_alloc (623 samples, 0.95%)</title><rect x="87.6563%" y="805" width="0.9478%" height="15" fill="rgb(254,217,39)" fg:x="57620" fg:w="623"/><text x="87.9063%" y="815.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (623 samples, 0.95%)</title><rect x="87.6563%" y="789" width="0.9478%" height="15" fill="rgb(240,178,23)" fg:x="57620" fg:w="623"/><text x="87.9063%" y="799.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (615 samples, 0.94%)</title><rect x="87.6685%" y="773" width="0.9356%" height="15" fill="rgb(218,11,47)" fg:x="57628" fg:w="615"/><text x="87.9185%" y="783.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,126 samples, 1.71%)</title><rect x="86.9398%" y="821" width="1.7130%" height="15" fill="rgb(218,51,51)" fg:x="57149" fg:w="1126"/><text x="87.1898%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (27 samples, 0.04%)</title><rect x="88.6117%" y="805" width="0.0411%" height="15" fill="rgb(238,126,27)" fg:x="58248" fg:w="27"/><text x="88.8617%" y="815.50"></text></g><g><title>[[kernel.kallsyms]] (38 samples, 0.06%)</title><rect x="88.7958%" y="645" width="0.0578%" height="15" fill="rgb(249,202,22)" fg:x="58369" fg:w="38"/><text x="89.0458%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (24 samples, 0.04%)</title><rect x="88.8171%" y="629" width="0.0365%" height="15" fill="rgb(254,195,49)" fg:x="58383" fg:w="24"/><text x="89.0671%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (131 samples, 0.20%)</title><rect x="88.6558%" y="821" width="0.1993%" height="15" fill="rgb(208,123,14)" fg:x="58277" fg:w="131"/><text x="88.9058%" y="831.50"></text></g><g><title>[[kernel.kallsyms]] (127 samples, 0.19%)</title><rect x="88.6619%" y="805" width="0.1932%" height="15" fill="rgb(224,200,8)" fg:x="58281" fg:w="127"/><text x="88.9119%" y="815.50"></text></g><g><title>[[kernel.kallsyms]] (126 samples, 0.19%)</title><rect x="88.6634%" y="789" width="0.1917%" height="15" fill="rgb(217,61,36)" fg:x="58282" fg:w="126"/><text x="88.9134%" y="799.50"></text></g><g><title>[[kernel.kallsyms]] (126 samples, 0.19%)</title><rect x="88.6634%" y="773" width="0.1917%" height="15" fill="rgb(206,35,45)" fg:x="58282" fg:w="126"/><text x="88.9134%" y="783.50"></text></g><g><title>[[kernel.kallsyms]] (126 samples, 0.19%)</title><rect x="88.6634%" y="757" width="0.1917%" height="15" fill="rgb(217,65,33)" fg:x="58282" fg:w="126"/><text x="88.9134%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (123 samples, 0.19%)</title><rect x="88.6680%" y="741" width="0.1871%" height="15" fill="rgb(222,158,48)" fg:x="58285" fg:w="123"/><text x="88.9180%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (123 samples, 0.19%)</title><rect x="88.6680%" y="725" width="0.1871%" height="15" fill="rgb(254,2,54)" fg:x="58285" fg:w="123"/><text x="88.9180%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (122 samples, 0.19%)</title><rect x="88.6695%" y="709" width="0.1856%" height="15" fill="rgb(250,143,38)" fg:x="58286" fg:w="122"/><text x="88.9195%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (118 samples, 0.18%)</title><rect x="88.6756%" y="693" width="0.1795%" height="15" fill="rgb(248,25,0)" fg:x="58290" fg:w="118"/><text x="88.9256%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (116 samples, 0.18%)</title><rect x="88.6786%" y="677" width="0.1765%" height="15" fill="rgb(206,152,27)" fg:x="58292" fg:w="116"/><text x="88.9286%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (113 samples, 0.17%)</title><rect x="88.6832%" y="661" width="0.1719%" height="15" fill="rgb(240,77,30)" fg:x="58295" fg:w="113"/><text x="88.9332%" y="671.50"></text></g><g><title>__GI___libc_free (126 samples, 0.19%)</title><rect x="88.8551%" y="821" width="0.1917%" height="15" fill="rgb(231,5,3)" fg:x="58408" fg:w="126"/><text x="89.1051%" y="831.50"></text></g><g><title>[[kernel.kallsyms]] (20 samples, 0.03%)</title><rect x="91.6923%" y="805" width="0.0304%" height="15" fill="rgb(207,226,32)" fg:x="60273" fg:w="20"/><text x="91.9423%" y="815.50"></text></g><g><title>[[kernel.kallsyms]] (20 samples, 0.03%)</title><rect x="91.6923%" y="789" width="0.0304%" height="15" fill="rgb(222,207,47)" fg:x="60273" fg:w="20"/><text x="91.9423%" y="799.50"></text></g><g><title>[[kernel.kallsyms]] (20 samples, 0.03%)</title><rect x="91.6923%" y="773" width="0.0304%" height="15" fill="rgb(229,115,45)" fg:x="60273" fg:w="20"/><text x="91.9423%" y="783.50"></text></g><g><title>[[kernel.kallsyms]] (20 samples, 0.03%)</title><rect x="91.6923%" y="757" width="0.0304%" height="15" fill="rgb(224,191,6)" fg:x="60273" fg:w="20"/><text x="91.9423%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (20 samples, 0.03%)</title><rect x="91.6923%" y="741" width="0.0304%" height="15" fill="rgb(230,227,24)" fg:x="60273" fg:w="20"/><text x="91.9423%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (20 samples, 0.03%)</title><rect x="91.6923%" y="725" width="0.0304%" height="15" fill="rgb(228,80,19)" fg:x="60273" fg:w="20"/><text x="91.9423%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (20 samples, 0.03%)</title><rect x="91.6923%" y="709" width="0.0304%" height="15" fill="rgb(247,229,0)" fg:x="60273" fg:w="20"/><text x="91.9423%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (20 samples, 0.03%)</title><rect x="91.6923%" y="693" width="0.0304%" height="15" fill="rgb(237,194,15)" fg:x="60273" fg:w="20"/><text x="91.9423%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (20 samples, 0.03%)</title><rect x="91.6923%" y="677" width="0.0304%" height="15" fill="rgb(219,203,20)" fg:x="60273" fg:w="20"/><text x="91.9423%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (20 samples, 0.03%)</title><rect x="91.6923%" y="661" width="0.0304%" height="15" fill="rgb(234,128,8)" fg:x="60273" fg:w="20"/><text x="91.9423%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (20 samples, 0.03%)</title><rect x="91.6923%" y="645" width="0.0304%" height="15" fill="rgb(248,202,8)" fg:x="60273" fg:w="20"/><text x="91.9423%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (277 samples, 0.42%)</title><rect x="93.3246%" y="789" width="0.4214%" height="15" fill="rgb(206,104,37)" fg:x="61346" fg:w="277"/><text x="93.5746%" y="799.50"></text></g><g><title>[[kernel.kallsyms]] (250 samples, 0.38%)</title><rect x="93.3657%" y="773" width="0.3803%" height="15" fill="rgb(223,8,27)" fg:x="61373" fg:w="250"/><text x="93.6157%" y="783.50"></text></g><g><title>[[kernel.kallsyms]] (248 samples, 0.38%)</title><rect x="93.3687%" y="757" width="0.3773%" height="15" fill="rgb(216,217,28)" fg:x="61375" fg:w="248"/><text x="93.6187%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (244 samples, 0.37%)</title><rect x="93.3748%" y="741" width="0.3712%" height="15" fill="rgb(249,199,1)" fg:x="61379" fg:w="244"/><text x="93.6248%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (238 samples, 0.36%)</title><rect x="93.3839%" y="725" width="0.3621%" height="15" fill="rgb(240,85,17)" fg:x="61385" fg:w="238"/><text x="93.6339%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (224 samples, 0.34%)</title><rect x="93.4052%" y="709" width="0.3408%" height="15" fill="rgb(206,108,45)" fg:x="61399" fg:w="224"/><text x="93.6552%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (203 samples, 0.31%)</title><rect x="93.4372%" y="693" width="0.3088%" height="15" fill="rgb(245,210,41)" fg:x="61420" fg:w="203"/><text x="93.6872%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (188 samples, 0.29%)</title><rect x="93.4600%" y="677" width="0.2860%" height="15" fill="rgb(206,13,37)" fg:x="61435" fg:w="188"/><text x="93.7100%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (139 samples, 0.21%)</title><rect x="93.5345%" y="661" width="0.2115%" height="15" fill="rgb(250,61,18)" fg:x="61484" fg:w="139"/><text x="93.7845%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (136 samples, 0.21%)</title><rect x="93.5391%" y="645" width="0.2069%" height="15" fill="rgb(235,172,48)" fg:x="61487" fg:w="136"/><text x="93.7891%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (126 samples, 0.19%)</title><rect x="93.5543%" y="629" width="0.1917%" height="15" fill="rgb(249,201,17)" fg:x="61497" fg:w="126"/><text x="93.8043%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (62 samples, 0.09%)</title><rect x="93.6517%" y="613" width="0.0943%" height="15" fill="rgb(219,208,6)" fg:x="61561" fg:w="62"/><text x="93.9017%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (39 samples, 0.06%)</title><rect x="93.6867%" y="597" width="0.0593%" height="15" fill="rgb(248,31,23)" fg:x="61584" fg:w="39"/><text x="93.9367%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (10 samples, 0.02%)</title><rect x="93.7308%" y="581" width="0.0152%" height="15" fill="rgb(245,15,42)" fg:x="61613" fg:w="10"/><text x="93.9808%" y="591.50"></text></g><g><title>__calloc (3,096 samples, 4.71%)</title><rect x="89.0468%" y="821" width="4.7099%" height="15" fill="rgb(222,217,39)" fg:x="58534" fg:w="3096"/><text x="89.2968%" y="831.50">__cal..</text></g><g><title>_int_malloc (1,337 samples, 2.03%)</title><rect x="91.7227%" y="805" width="2.0340%" height="15" fill="rgb(210,219,27)" fg:x="60293" fg:w="1337"/><text x="91.9727%" y="815.50">_..</text></g><g><title>unlink_chunk.isra.0 (7 samples, 0.01%)</title><rect x="93.7460%" y="789" width="0.0106%" height="15" fill="rgb(252,166,36)" fg:x="61623" fg:w="7"/><text x="93.9960%" y="799.50"></text></g><g><title>_int_free (122 samples, 0.19%)</title><rect x="93.9803%" y="741" width="0.1856%" height="15" fill="rgb(245,132,34)" fg:x="61777" fg:w="122"/><text x="94.2303%" y="751.50"></text></g><g><title>__posix_memalign (852 samples, 1.30%)</title><rect x="93.7627%" y="773" width="1.2961%" height="15" fill="rgb(236,54,3)" fg:x="61634" fg:w="852"/><text x="94.0127%" y="783.50"></text></g><g><title>_int_memalign (752 samples, 1.14%)</title><rect x="93.9149%" y="757" width="1.1440%" height="15" fill="rgb(241,173,43)" fg:x="61734" fg:w="752"/><text x="94.1649%" y="767.50"></text></g><g><title>_int_malloc (587 samples, 0.89%)</title><rect x="94.1659%" y="741" width="0.8930%" height="15" fill="rgb(215,190,9)" fg:x="61899" fg:w="587"/><text x="94.4159%" y="751.50"></text></g><g><title>unlink_chunk.isra.0 (42 samples, 0.06%)</title><rect x="94.9950%" y="725" width="0.0639%" height="15" fill="rgb(242,101,16)" fg:x="62444" fg:w="42"/><text x="95.2450%" y="735.50"></text></g><g><title>__rdl_alloc (859 samples, 1.31%)</title><rect x="93.7567%" y="821" width="1.3068%" height="15" fill="rgb(223,190,21)" fg:x="61630" fg:w="859"/><text x="94.0067%" y="831.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (859 samples, 1.31%)</title><rect x="93.7567%" y="805" width="1.3068%" height="15" fill="rgb(215,228,25)" fg:x="61630" fg:w="859"/><text x="94.0067%" y="815.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (855 samples, 1.30%)</title><rect x="93.7627%" y="789" width="1.3007%" height="15" fill="rgb(225,36,22)" fg:x="61634" fg:w="855"/><text x="94.0127%" y="799.50"></text></g><g><title>__rdl_alloc_zeroed (42 samples, 0.06%)</title><rect x="95.0634%" y="821" width="0.0639%" height="15" fill="rgb(251,106,46)" fg:x="62489" fg:w="42"/><text x="95.3134%" y="831.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (35 samples, 0.05%)</title><rect x="95.0741%" y="805" width="0.0532%" height="15" fill="rgb(208,90,1)" fg:x="62496" fg:w="35"/><text x="95.3241%" y="815.50"></text></g><g><title>__rdl_dealloc (29 samples, 0.04%)</title><rect x="95.1273%" y="821" width="0.0441%" height="15" fill="rgb(243,10,4)" fg:x="62531" fg:w="29"/><text x="95.3773%" y="831.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (29 samples, 0.04%)</title><rect x="95.1273%" y="805" width="0.0441%" height="15" fill="rgb(212,137,27)" fg:x="62531" fg:w="29"/><text x="95.3773%" y="815.50"></text></g><g><title>__rust_alloc_zeroed (8 samples, 0.01%)</title><rect x="95.1730%" y="821" width="0.0122%" height="15" fill="rgb(231,220,49)" fg:x="62561" fg:w="8"/><text x="95.4230%" y="831.50"></text></g><g><title>__rust_dealloc (16 samples, 0.02%)</title><rect x="95.1851%" y="821" width="0.0243%" height="15" fill="rgb(237,96,20)" fg:x="62569" fg:w="16"/><text x="95.4351%" y="831.50"></text></g><g><title>malloc_consolidate (17 samples, 0.03%)</title><rect x="96.8038%" y="805" width="0.0259%" height="15" fill="rgb(239,229,30)" fg:x="63633" fg:w="17"/><text x="97.0538%" y="815.50"></text></g><g><title>_int_free (1,081 samples, 1.64%)</title><rect x="95.2095%" y="821" width="1.6445%" height="15" fill="rgb(219,65,33)" fg:x="62585" fg:w="1081"/><text x="95.4595%" y="831.50"></text></g><g><title>unlink_chunk.isra.0 (16 samples, 0.02%)</title><rect x="96.8296%" y="805" width="0.0243%" height="15" fill="rgb(243,134,7)" fg:x="63650" fg:w="16"/><text x="97.0796%" y="815.50"></text></g><g><title>&lt;fastfull_search::datasources::posting_table::PostingStream as futures_core::stream::Stream&gt;::poll_next (31,931 samples, 48.58%)</title><rect x="48.2794%" y="853" width="48.5761%" height="15" fill="rgb(216,177,54)" fg:x="31736" fg:w="31931"/><text x="48.5294%" y="863.50">&lt;fastfull_search::datasources::posting_table::PostingStream as futures_core::str..</text></g><g><title>fastfull_search::batch::posting_batch::PostingBatch::project_with_predicate (22,741 samples, 34.60%)</title><rect x="62.2600%" y="837" width="34.5955%" height="15" fill="rgb(211,160,20)" fg:x="40926" fg:w="22741"/><text x="62.5100%" y="847.50">fastfull_search::batch::posting_batch::PostingBatch::pro..</text></g><g><title>__memmove_avx_unaligned_erms (14 samples, 0.02%)</title><rect x="96.8829%" y="789" width="0.0213%" height="15" fill="rgb(239,85,39)" fg:x="63685" fg:w="14"/><text x="97.1329%" y="799.50"></text></g><g><title>_int_free (9 samples, 0.01%)</title><rect x="96.9042%" y="789" width="0.0137%" height="15" fill="rgb(232,125,22)" fg:x="63699" fg:w="9"/><text x="97.1542%" y="799.50"></text></g><g><title>malloc_consolidate (67 samples, 0.10%)</title><rect x="97.1050%" y="773" width="0.1019%" height="15" fill="rgb(244,57,34)" fg:x="63831" fg:w="67"/><text x="97.3550%" y="783.50"></text></g><g><title>__GI___libc_realloc (234 samples, 0.36%)</title><rect x="96.8616%" y="821" width="0.3560%" height="15" fill="rgb(214,203,32)" fg:x="63671" fg:w="234"/><text x="97.1116%" y="831.50"></text></g><g><title>_int_realloc (221 samples, 0.34%)</title><rect x="96.8814%" y="805" width="0.3362%" height="15" fill="rgb(207,58,43)" fg:x="63684" fg:w="221"/><text x="97.1314%" y="815.50"></text></g><g><title>_int_malloc (197 samples, 0.30%)</title><rect x="96.9179%" y="789" width="0.2997%" height="15" fill="rgb(215,193,15)" fg:x="63708" fg:w="197"/><text x="97.1679%" y="799.50"></text></g><g><title>unlink_chunk.isra.0 (7 samples, 0.01%)</title><rect x="97.2069%" y="773" width="0.0106%" height="15" fill="rgb(232,15,44)" fg:x="63898" fg:w="7"/><text x="97.4569%" y="783.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (32,205 samples, 48.99%)</title><rect x="48.2262%" y="869" width="48.9929%" height="15" fill="rgb(212,3,48)" fg:x="31701" fg:w="32205"/><text x="48.4762%" y="879.50">&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (239 samples, 0.36%)</title><rect x="96.8555%" y="853" width="0.3636%" height="15" fill="rgb(218,128,7)" fg:x="63667" fg:w="239"/><text x="97.1055%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (236 samples, 0.36%)</title><rect x="96.8601%" y="837" width="0.3590%" height="15" fill="rgb(226,216,39)" fg:x="63670" fg:w="236"/><text x="97.1101%" y="847.50"></text></g><g><title>[[kernel.kallsyms]] (165 samples, 0.25%)</title><rect x="97.2267%" y="645" width="0.2510%" height="15" fill="rgb(243,47,51)" fg:x="63911" fg:w="165"/><text x="97.4767%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (161 samples, 0.24%)</title><rect x="97.2328%" y="629" width="0.2449%" height="15" fill="rgb(241,183,40)" fg:x="63915" fg:w="161"/><text x="97.4828%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (160 samples, 0.24%)</title><rect x="97.2343%" y="613" width="0.2434%" height="15" fill="rgb(231,217,32)" fg:x="63916" fg:w="160"/><text x="97.4843%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (159 samples, 0.24%)</title><rect x="97.2358%" y="597" width="0.2419%" height="15" fill="rgb(229,61,38)" fg:x="63917" fg:w="159"/><text x="97.4858%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (155 samples, 0.24%)</title><rect x="97.2419%" y="581" width="0.2358%" height="15" fill="rgb(225,210,5)" fg:x="63921" fg:w="155"/><text x="97.4919%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (154 samples, 0.23%)</title><rect x="97.2434%" y="565" width="0.2343%" height="15" fill="rgb(231,79,45)" fg:x="63922" fg:w="154"/><text x="97.4934%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (136 samples, 0.21%)</title><rect x="97.2708%" y="549" width="0.2069%" height="15" fill="rgb(224,100,7)" fg:x="63940" fg:w="136"/><text x="97.5208%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (102 samples, 0.16%)</title><rect x="97.3225%" y="533" width="0.1552%" height="15" fill="rgb(241,198,18)" fg:x="63974" fg:w="102"/><text x="97.5725%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (89 samples, 0.14%)</title><rect x="97.3423%" y="517" width="0.1354%" height="15" fill="rgb(252,97,53)" fg:x="63987" fg:w="89"/><text x="97.5923%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (70 samples, 0.11%)</title><rect x="97.3712%" y="501" width="0.1065%" height="15" fill="rgb(220,88,7)" fg:x="64006" fg:w="70"/><text x="97.6212%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (61 samples, 0.09%)</title><rect x="97.3849%" y="485" width="0.0928%" height="15" fill="rgb(213,176,14)" fg:x="64015" fg:w="61"/><text x="97.6349%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (56 samples, 0.09%)</title><rect x="97.3925%" y="469" width="0.0852%" height="15" fill="rgb(246,73,7)" fg:x="64020" fg:w="56"/><text x="97.6425%" y="479.50"></text></g><g><title>[[kernel.kallsyms]] (55 samples, 0.08%)</title><rect x="97.3940%" y="453" width="0.0837%" height="15" fill="rgb(245,64,36)" fg:x="64021" fg:w="55"/><text x="97.6440%" y="463.50"></text></g><g><title>[[kernel.kallsyms]] (50 samples, 0.08%)</title><rect x="97.4016%" y="437" width="0.0761%" height="15" fill="rgb(245,80,10)" fg:x="64026" fg:w="50"/><text x="97.6516%" y="447.50"></text></g><g><title>[[kernel.kallsyms]] (44 samples, 0.07%)</title><rect x="97.4108%" y="421" width="0.0669%" height="15" fill="rgb(232,107,50)" fg:x="64032" fg:w="44"/><text x="97.6608%" y="431.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (172 samples, 0.26%)</title><rect x="97.2237%" y="773" width="0.2617%" height="15" fill="rgb(253,3,0)" fg:x="63909" fg:w="172"/><text x="97.4737%" y="783.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (172 samples, 0.26%)</title><rect x="97.2237%" y="757" width="0.2617%" height="15" fill="rgb(212,99,53)" fg:x="63909" fg:w="172"/><text x="97.4737%" y="767.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (172 samples, 0.26%)</title><rect x="97.2237%" y="741" width="0.2617%" height="15" fill="rgb(249,111,54)" fg:x="63909" fg:w="172"/><text x="97.4737%" y="751.50"></text></g><g><title>&lt;std::io::stdio::StdinRaw as std::io::Read&gt;::read_buf (172 samples, 0.26%)</title><rect x="97.2237%" y="725" width="0.2617%" height="15" fill="rgb(249,55,30)" fg:x="63909" fg:w="172"/><text x="97.4737%" y="735.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdin as std::io::Read&gt;::read_buf (172 samples, 0.26%)</title><rect x="97.2237%" y="709" width="0.2617%" height="15" fill="rgb(237,47,42)" fg:x="63909" fg:w="172"/><text x="97.4737%" y="719.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (172 samples, 0.26%)</title><rect x="97.2237%" y="693" width="0.2617%" height="15" fill="rgb(211,20,18)" fg:x="63909" fg:w="172"/><text x="97.4737%" y="703.50"></text></g><g><title>__libc_read (171 samples, 0.26%)</title><rect x="97.2252%" y="677" width="0.2601%" height="15" fill="rgb(231,203,46)" fg:x="63910" fg:w="171"/><text x="97.4752%" y="687.50"></text></g><g><title>__libc_read (171 samples, 0.26%)</title><rect x="97.2252%" y="661" width="0.2601%" height="15" fill="rgb(237,142,3)" fg:x="63910" fg:w="171"/><text x="97.4752%" y="671.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (184 samples, 0.28%)</title><rect x="97.2191%" y="869" width="0.2799%" height="15" fill="rgb(241,107,1)" fg:x="63906" fg:w="184"/><text x="97.4691%" y="879.50"></text></g><g><title>&lt;std::io::stdio::StdinLock as std::io::BufRead&gt;::read_line (183 samples, 0.28%)</title><rect x="97.2206%" y="853" width="0.2784%" height="15" fill="rgb(229,83,13)" fg:x="63907" fg:w="183"/><text x="97.4706%" y="863.50"></text></g><g><title>std::io::BufRead::read_line (183 samples, 0.28%)</title><rect x="97.2206%" y="837" width="0.2784%" height="15" fill="rgb(241,91,40)" fg:x="63907" fg:w="183"/><text x="97.4706%" y="847.50"></text></g><g><title>std::io::append_to_string (183 samples, 0.28%)</title><rect x="97.2206%" y="821" width="0.2784%" height="15" fill="rgb(225,3,45)" fg:x="63907" fg:w="183"/><text x="97.4706%" y="831.50"></text></g><g><title>std::io::BufRead::read_line::{{closure}} (181 samples, 0.28%)</title><rect x="97.2237%" y="805" width="0.2754%" height="15" fill="rgb(244,223,14)" fg:x="63909" fg:w="181"/><text x="97.4737%" y="815.50"></text></g><g><title>std::io::read_until (181 samples, 0.28%)</title><rect x="97.2237%" y="789" width="0.2754%" height="15" fill="rgb(224,124,37)" fg:x="63909" fg:w="181"/><text x="97.4737%" y="799.50"></text></g><g><title>__GI___libc_free (12 samples, 0.02%)</title><rect x="97.4990%" y="869" width="0.0183%" height="15" fill="rgb(251,171,30)" fg:x="64090" fg:w="12"/><text x="97.7490%" y="879.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.01%)</title><rect x="97.5173%" y="869" width="0.0106%" height="15" fill="rgb(236,46,54)" fg:x="64102" fg:w="7"/><text x="97.7673%" y="879.50"></text></g><g><title>__memmove_avx_unaligned_erms (51 samples, 0.08%)</title><rect x="97.5279%" y="869" width="0.0776%" height="15" fill="rgb(245,213,5)" fg:x="64109" fg:w="51"/><text x="97.7779%" y="879.50"></text></g><g><title>malloc_consolidate (45 samples, 0.07%)</title><rect x="97.6466%" y="853" width="0.0685%" height="15" fill="rgb(230,144,27)" fg:x="64187" fg:w="45"/><text x="97.8966%" y="863.50"></text></g><g><title>unlink_chunk.isra.0 (9 samples, 0.01%)</title><rect x="97.7013%" y="837" width="0.0137%" height="15" fill="rgb(220,86,6)" fg:x="64223" fg:w="9"/><text x="97.9513%" y="847.50"></text></g><g><title>_int_free (71 samples, 0.11%)</title><rect x="97.6101%" y="869" width="0.1080%" height="15" fill="rgb(240,20,13)" fg:x="64163" fg:w="71"/><text x="97.8601%" y="879.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (12 samples, 0.02%)</title><rect x="97.7363%" y="853" width="0.0183%" height="15" fill="rgb(217,89,34)" fg:x="64246" fg:w="12"/><text x="97.9863%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.02%)</title><rect x="97.7363%" y="837" width="0.0183%" height="15" fill="rgb(229,13,5)" fg:x="64246" fg:w="12"/><text x="97.9863%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.02%)</title><rect x="97.7363%" y="821" width="0.0183%" height="15" fill="rgb(244,67,35)" fg:x="64246" fg:w="12"/><text x="97.9863%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.02%)</title><rect x="97.7363%" y="805" width="0.0183%" height="15" fill="rgb(221,40,2)" fg:x="64246" fg:w="12"/><text x="97.9863%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.02%)</title><rect x="97.7363%" y="789" width="0.0183%" height="15" fill="rgb(237,157,21)" fg:x="64246" fg:w="12"/><text x="97.9863%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 0.02%)</title><rect x="97.7363%" y="773" width="0.0183%" height="15" fill="rgb(222,94,11)" fg:x="64246" fg:w="12"/><text x="97.9863%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.02%)</title><rect x="97.7363%" y="757" width="0.0183%" height="15" fill="rgb(249,113,6)" fg:x="64246" fg:w="12"/><text x="97.9863%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.02%)</title><rect x="97.7363%" y="741" width="0.0183%" height="15" fill="rgb(238,137,36)" fg:x="64246" fg:w="12"/><text x="97.9863%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.02%)</title><rect x="97.7363%" y="725" width="0.0183%" height="15" fill="rgb(210,102,26)" fg:x="64246" fg:w="12"/><text x="97.9863%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.02%)</title><rect x="97.7363%" y="709" width="0.0183%" height="15" fill="rgb(218,30,30)" fg:x="64246" fg:w="12"/><text x="97.9863%" y="719.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.02%)</title><rect x="97.7363%" y="693" width="0.0183%" height="15" fill="rgb(214,67,26)" fg:x="64246" fg:w="12"/><text x="97.9863%" y="703.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.02%)</title><rect x="97.7363%" y="677" width="0.0183%" height="15" fill="rgb(251,9,53)" fg:x="64246" fg:w="12"/><text x="97.9863%" y="687.50"></text></g><g><title>_int_malloc (9 samples, 0.01%)</title><rect x="97.7409%" y="661" width="0.0137%" height="15" fill="rgb(228,204,25)" fg:x="64249" fg:w="9"/><text x="97.9909%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (25 samples, 0.04%)</title><rect x="97.7181%" y="869" width="0.0380%" height="15" fill="rgb(207,153,8)" fg:x="64234" fg:w="25"/><text x="97.9681%" y="879.50"></text></g><g><title>_int_free (7 samples, 0.01%)</title><rect x="97.7652%" y="853" width="0.0106%" height="15" fill="rgb(242,9,16)" fg:x="64265" fg:w="7"/><text x="98.0152%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (30 samples, 0.05%)</title><rect x="97.7561%" y="869" width="0.0456%" height="15" fill="rgb(217,211,10)" fg:x="64259" fg:w="30"/><text x="98.0061%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (17 samples, 0.03%)</title><rect x="97.7759%" y="853" width="0.0259%" height="15" fill="rgb(219,228,52)" fg:x="64272" fg:w="17"/><text x="98.0259%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;datafusion_common::dfschema::DFField&gt; (8 samples, 0.01%)</title><rect x="97.7896%" y="837" width="0.0122%" height="15" fill="rgb(231,92,29)" fg:x="64281" fg:w="8"/><text x="98.0396%" y="847.50"></text></g><g><title>_int_free (7 samples, 0.01%)</title><rect x="97.7911%" y="821" width="0.0106%" height="15" fill="rgb(232,8,23)" fg:x="64282" fg:w="7"/><text x="98.0411%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;datafusion::execution::context::SessionState&gt; (28 samples, 0.04%)</title><rect x="97.8033%" y="869" width="0.0426%" height="15" fill="rgb(216,211,34)" fg:x="64290" fg:w="28"/><text x="98.0533%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;datafusion::execution::context::SessionConfig&gt; (8 samples, 0.01%)</title><rect x="97.8337%" y="853" width="0.0122%" height="15" fill="rgb(236,151,0)" fg:x="64310" fg:w="8"/><text x="98.0837%" y="863.50"></text></g><g><title>_int_free (12 samples, 0.02%)</title><rect x="97.8519%" y="853" width="0.0183%" height="15" fill="rgb(209,168,3)" fg:x="64322" fg:w="12"/><text x="98.1019%" y="863.50"></text></g><g><title>_int_free (8 samples, 0.01%)</title><rect x="97.8748%" y="837" width="0.0122%" height="15" fill="rgb(208,129,28)" fg:x="64337" fg:w="8"/><text x="98.1248%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;datafusion_expr::logical_plan::plan::Predicate&gt;&gt; (16 samples, 0.02%)</title><rect x="97.8702%" y="853" width="0.0243%" height="15" fill="rgb(229,78,22)" fg:x="64334" fg:w="16"/><text x="98.1202%" y="863.50"></text></g><g><title>_int_free (17 samples, 0.03%)</title><rect x="97.8976%" y="837" width="0.0259%" height="15" fill="rgb(228,187,13)" fg:x="64352" fg:w="17"/><text x="98.1476%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;datafusion_expr::logical_plan::plan::LogicalPlan&gt; (69 samples, 0.10%)</title><rect x="97.8459%" y="869" width="0.1050%" height="15" fill="rgb(240,119,24)" fg:x="64318" fg:w="69"/><text x="98.0959%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;datafusion_expr::expr::Expr&gt; (37 samples, 0.06%)</title><rect x="97.8945%" y="853" width="0.0563%" height="15" fill="rgb(209,194,42)" fg:x="64350" fg:w="37"/><text x="98.1445%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;datafusion_expr::expr::Expr&gt; (18 samples, 0.03%)</title><rect x="97.9234%" y="837" width="0.0274%" height="15" fill="rgb(247,200,46)" fg:x="64369" fg:w="18"/><text x="98.1734%" y="847.50"></text></g><g><title>_int_free (12 samples, 0.02%)</title><rect x="97.9797%" y="837" width="0.0183%" height="15" fill="rgb(218,76,16)" fg:x="64406" fg:w="12"/><text x="98.2297%" y="847.50"></text></g><g><title>__GI___libc_free (15 samples, 0.02%)</title><rect x="98.0634%" y="805" width="0.0228%" height="15" fill="rgb(225,21,48)" fg:x="64461" fg:w="15"/><text x="98.3134%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.05%)</title><rect x="98.0512%" y="821" width="0.0456%" height="15" fill="rgb(239,223,50)" fg:x="64453" fg:w="30"/><text x="98.3012%" y="831.50"></text></g><g><title>_int_free (19 samples, 0.03%)</title><rect x="98.1060%" y="821" width="0.0289%" height="15" fill="rgb(244,45,21)" fg:x="64489" fg:w="19"/><text x="98.3560%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (14 samples, 0.02%)</title><rect x="98.1349%" y="821" width="0.0213%" height="15" fill="rgb(232,33,43)" fg:x="64508" fg:w="14"/><text x="98.3849%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (9 samples, 0.01%)</title><rect x="98.1425%" y="805" width="0.0137%" height="15" fill="rgb(209,8,3)" fg:x="64513" fg:w="9"/><text x="98.3925%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn datafusion::physical_plan::RecordBatchStream+Item = core::result::Result&lt;arrow_array::record_batch::RecordBatch,datafusion_common::error::DataFusionError&gt;+core::marker::Send&gt;&gt;,alloc::vec::Vec&lt;arrow_array::record_batch::RecordBatch&gt;&gt;&gt; (136 samples, 0.21%)</title><rect x="97.9524%" y="869" width="0.2069%" height="15" fill="rgb(214,25,53)" fg:x="64388" fg:w="136"/><text x="98.2024%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastfull_search::datasources::posting_table::PostingStream&gt; (128 samples, 0.19%)</title><rect x="97.9645%" y="853" width="0.1947%" height="15" fill="rgb(254,186,54)" fg:x="64396" fg:w="128"/><text x="98.2145%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (106 samples, 0.16%)</title><rect x="97.9980%" y="837" width="0.1613%" height="15" fill="rgb(208,174,49)" fg:x="64418" fg:w="106"/><text x="98.2480%" y="847.50"></text></g><g><title>core::str::pattern::StrSearcher::new (9 samples, 0.01%)</title><rect x="98.1592%" y="869" width="0.0137%" height="15" fill="rgb(233,191,51)" fg:x="64524" fg:w="9"/><text x="98.4092%" y="879.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (7 samples, 0.01%)</title><rect x="98.1623%" y="853" width="0.0106%" height="15" fill="rgb(222,134,10)" fg:x="64526" fg:w="7"/><text x="98.4123%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.03%)</title><rect x="98.2049%" y="821" width="0.0259%" height="15" fill="rgb(230,226,20)" fg:x="64554" fg:w="17"/><text x="98.4549%" y="831.50"></text></g><g><title>dashmap::set::DashSet&lt;K,S&gt;::contains (12 samples, 0.02%)</title><rect x="98.2125%" y="805" width="0.0183%" height="15" fill="rgb(251,111,25)" fg:x="64559" fg:w="12"/><text x="98.4625%" y="815.50"></text></g><g><title>&lt;(ExtendA,ExtendB) as core::iter::traits::collect::Extend&lt;(A,B)&gt;&gt;::extend (30 samples, 0.05%)</title><rect x="98.2018%" y="837" width="0.0456%" height="15" fill="rgb(224,40,46)" fg:x="64552" fg:w="30"/><text x="98.4518%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 0.02%)</title><rect x="98.2307%" y="821" width="0.0167%" height="15" fill="rgb(236,108,47)" fg:x="64571" fg:w="11"/><text x="98.4807%" y="831.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="98.2338%" y="805" width="0.0137%" height="15" fill="rgb(234,93,0)" fg:x="64573" fg:w="9"/><text x="98.4838%" y="815.50"></text></g><g><title>&lt;fastfull_search::datasources::posting_table::PostingExec as datafusion::physical_plan::ExecutionPlan&gt;::execute (61 samples, 0.09%)</title><rect x="98.1821%" y="853" width="0.0928%" height="15" fill="rgb(224,213,32)" fg:x="64539" fg:w="61"/><text x="98.4321%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (16 samples, 0.02%)</title><rect x="98.2505%" y="837" width="0.0243%" height="15" fill="rgb(251,11,48)" fg:x="64584" fg:w="16"/><text x="98.5005%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;datafusion::execution::context::SessionConfig&gt; (11 samples, 0.02%)</title><rect x="98.2581%" y="821" width="0.0167%" height="15" fill="rgb(236,173,5)" fg:x="64589" fg:w="11"/><text x="98.5081%" y="831.50"></text></g><g><title>_int_free (9 samples, 0.01%)</title><rect x="98.3083%" y="821" width="0.0137%" height="15" fill="rgb(230,95,12)" fg:x="64622" fg:w="9"/><text x="98.5583%" y="831.50"></text></g><g><title>datafusion::physical_plan::execute_stream (99 samples, 0.15%)</title><rect x="98.1760%" y="869" width="0.1506%" height="15" fill="rgb(232,209,1)" fg:x="64535" fg:w="99"/><text x="98.4260%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (32 samples, 0.05%)</title><rect x="98.2779%" y="853" width="0.0487%" height="15" fill="rgb(232,6,1)" fg:x="64602" fg:w="32"/><text x="98.5279%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastfull_search::datasources::posting_table::PostingExec&gt; (28 samples, 0.04%)</title><rect x="98.2840%" y="837" width="0.0426%" height="15" fill="rgb(210,224,50)" fg:x="64606" fg:w="28"/><text x="98.5340%" y="847.50"></text></g><g><title>datafusion_expr::logical_plan::builder::LogicalPlanBuilder::boolean (16 samples, 0.02%)</title><rect x="98.3266%" y="869" width="0.0243%" height="15" fill="rgb(228,127,35)" fg:x="64634" fg:w="16"/><text x="98.5766%" y="879.50"></text></g><g><title>datafusion_expr::logical_plan::plan::Boolean::try_new (9 samples, 0.01%)</title><rect x="98.3372%" y="853" width="0.0137%" height="15" fill="rgb(245,102,45)" fg:x="64641" fg:w="9"/><text x="98.5872%" y="863.50"></text></g><g><title>datafusion_expr::logical_plan::plan::Boolean::try_new_with_predicate (9 samples, 0.01%)</title><rect x="98.3372%" y="837" width="0.0137%" height="15" fill="rgb(214,1,49)" fg:x="64641" fg:w="9"/><text x="98.5872%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.02%)</title><rect x="98.4498%" y="741" width="0.0243%" height="15" fill="rgb(226,163,40)" fg:x="64715" fg:w="16"/><text x="98.6998%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.02%)</title><rect x="98.4498%" y="725" width="0.0243%" height="15" fill="rgb(239,212,28)" fg:x="64715" fg:w="16"/><text x="98.6998%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.02%)</title><rect x="98.4498%" y="709" width="0.0243%" height="15" fill="rgb(220,20,13)" fg:x="64715" fg:w="16"/><text x="98.6998%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.02%)</title><rect x="98.4498%" y="693" width="0.0243%" height="15" fill="rgb(210,164,35)" fg:x="64715" fg:w="16"/><text x="98.6998%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.02%)</title><rect x="98.4498%" y="677" width="0.0243%" height="15" fill="rgb(248,109,41)" fg:x="64715" fg:w="16"/><text x="98.6998%" y="687.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.02%)</title><rect x="98.4498%" y="661" width="0.0243%" height="15" fill="rgb(238,23,50)" fg:x="64715" fg:w="16"/><text x="98.6998%" y="671.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.02%)</title><rect x="98.4498%" y="645" width="0.0243%" height="15" fill="rgb(211,48,49)" fg:x="64715" fg:w="16"/><text x="98.6998%" y="655.50"></text></g><g><title>_int_malloc (11 samples, 0.02%)</title><rect x="98.4574%" y="629" width="0.0167%" height="15" fill="rgb(223,36,21)" fg:x="64720" fg:w="11"/><text x="98.7074%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (63 samples, 0.10%)</title><rect x="98.3814%" y="821" width="0.0958%" height="15" fill="rgb(207,123,46)" fg:x="64670" fg:w="63"/><text x="98.6314%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (18 samples, 0.03%)</title><rect x="98.4498%" y="805" width="0.0274%" height="15" fill="rgb(240,218,32)" fg:x="64715" fg:w="18"/><text x="98.6998%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (18 samples, 0.03%)</title><rect x="98.4498%" y="789" width="0.0274%" height="15" fill="rgb(252,5,43)" fg:x="64715" fg:w="18"/><text x="98.6998%" y="799.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.03%)</title><rect x="98.4498%" y="773" width="0.0274%" height="15" fill="rgb(252,84,19)" fg:x="64715" fg:w="18"/><text x="98.6998%" y="783.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (18 samples, 0.03%)</title><rect x="98.4498%" y="757" width="0.0274%" height="15" fill="rgb(243,152,39)" fg:x="64715" fg:w="18"/><text x="98.6998%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (89 samples, 0.14%)</title><rect x="98.3631%" y="837" width="0.1354%" height="15" fill="rgb(234,160,15)" fg:x="64658" fg:w="89"/><text x="98.6131%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (112 samples, 0.17%)</title><rect x="98.3631%" y="853" width="0.1704%" height="15" fill="rgb(237,34,20)" fg:x="64658" fg:w="112"/><text x="98.6131%" y="863.50"></text></g><g><title>__GI___libc_malloc (23 samples, 0.03%)</title><rect x="98.4985%" y="837" width="0.0350%" height="15" fill="rgb(229,97,13)" fg:x="64747" fg:w="23"/><text x="98.7485%" y="847.50"></text></g><g><title>_int_malloc (21 samples, 0.03%)</title><rect x="98.5015%" y="821" width="0.0319%" height="15" fill="rgb(234,71,50)" fg:x="64749" fg:w="21"/><text x="98.7515%" y="831.50"></text></g><g><title>malloc_consolidate (12 samples, 0.02%)</title><rect x="98.5152%" y="805" width="0.0183%" height="15" fill="rgb(253,155,4)" fg:x="64758" fg:w="12"/><text x="98.7652%" y="815.50"></text></g><g><title>unlink_chunk.isra.0 (7 samples, 0.01%)</title><rect x="98.5228%" y="789" width="0.0106%" height="15" fill="rgb(222,185,37)" fg:x="64763" fg:w="7"/><text x="98.7728%" y="799.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (38 samples, 0.06%)</title><rect x="98.5776%" y="837" width="0.0578%" height="15" fill="rgb(251,177,13)" fg:x="64799" fg:w="38"/><text x="98.8276%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (11 samples, 0.02%)</title><rect x="98.6187%" y="821" width="0.0167%" height="15" fill="rgb(250,179,40)" fg:x="64826" fg:w="11"/><text x="98.8687%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (18 samples, 0.03%)</title><rect x="98.6445%" y="821" width="0.0274%" height="15" fill="rgb(242,44,2)" fg:x="64843" fg:w="18"/><text x="98.8945%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.02%)</title><rect x="98.6521%" y="805" width="0.0198%" height="15" fill="rgb(216,177,13)" fg:x="64848" fg:w="13"/><text x="98.9021%" y="815.50"></text></g><g><title>datafusion_common::dfschema::DFSchema::new_with_metadata (98 samples, 0.15%)</title><rect x="98.5578%" y="853" width="0.1491%" height="15" fill="rgb(216,106,43)" fg:x="64786" fg:w="98"/><text x="98.8078%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (46 samples, 0.07%)</title><rect x="98.6369%" y="837" width="0.0700%" height="15" fill="rgb(216,183,2)" fg:x="64838" fg:w="46"/><text x="98.8869%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (23 samples, 0.03%)</title><rect x="98.6719%" y="821" width="0.0350%" height="15" fill="rgb(249,75,3)" fg:x="64861" fg:w="23"/><text x="98.9219%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.03%)</title><rect x="98.6810%" y="805" width="0.0259%" height="15" fill="rgb(219,67,39)" fg:x="64867" fg:w="17"/><text x="98.9310%" y="815.50"></text></g><g><title>datafusion_expr::logical_plan::builder::LogicalPlanBuilder::scan (235 samples, 0.36%)</title><rect x="98.3525%" y="869" width="0.3575%" height="15" fill="rgb(253,228,2)" fg:x="64651" fg:w="235"/><text x="98.6025%" y="879.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.01%)</title><rect x="98.7419%" y="853" width="0.0122%" height="15" fill="rgb(235,138,27)" fg:x="64907" fg:w="8"/><text x="98.9919%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="98.7434%" y="837" width="0.0106%" height="15" fill="rgb(236,97,51)" fg:x="64908" fg:w="7"/><text x="98.9934%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.01%)</title><rect x="98.7434%" y="821" width="0.0106%" height="15" fill="rgb(240,80,30)" fg:x="64908" fg:w="7"/><text x="98.9934%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.01%)</title><rect x="98.7434%" y="805" width="0.0106%" height="15" fill="rgb(230,178,19)" fg:x="64908" fg:w="7"/><text x="98.9934%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.01%)</title><rect x="98.7434%" y="789" width="0.0106%" height="15" fill="rgb(210,190,27)" fg:x="64908" fg:w="7"/><text x="98.9934%" y="799.50"></text></g><g><title>fastfull_search::context::boolean_context::BooleanContext::state (48 samples, 0.07%)</title><rect x="98.7115%" y="869" width="0.0730%" height="15" fill="rgb(222,107,31)" fg:x="64887" fg:w="48"/><text x="98.9615%" y="879.50"></text></g><g><title>datafusion_physical_expr::execution_props::ExecutionProps::start_execution (15 samples, 0.02%)</title><rect x="98.7617%" y="853" width="0.0228%" height="15" fill="rgb(216,127,34)" fg:x="64920" fg:w="15"/><text x="99.0117%" y="863.50"></text></g><g><title>chrono::offset::utc::Utc::now (13 samples, 0.02%)</title><rect x="98.7647%" y="837" width="0.0198%" height="15" fill="rgb(234,116,52)" fg:x="64922" fg:w="13"/><text x="99.0147%" y="847.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (8 samples, 0.01%)</title><rect x="98.7723%" y="821" width="0.0122%" height="15" fill="rgb(222,124,15)" fg:x="64927" fg:w="8"/><text x="99.0223%" y="831.50"></text></g><g><title>__clock_gettime_2 (8 samples, 0.01%)</title><rect x="98.7723%" y="805" width="0.0122%" height="15" fill="rgb(231,179,28)" fg:x="64927" fg:w="8"/><text x="99.0223%" y="815.50"></text></g><g><title>_int_free (18 samples, 0.03%)</title><rect x="98.7982%" y="789" width="0.0274%" height="15" fill="rgb(226,93,45)" fg:x="64944" fg:w="18"/><text x="99.0482%" y="799.50"></text></g><g><title>malloc_consolidate (16 samples, 0.02%)</title><rect x="98.8012%" y="773" width="0.0243%" height="15" fill="rgb(215,8,51)" fg:x="64946" fg:w="16"/><text x="99.0512%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (28 samples, 0.04%)</title><rect x="98.7906%" y="853" width="0.0426%" height="15" fill="rgb(223,106,5)" fg:x="64939" fg:w="28"/><text x="99.0406%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (26 samples, 0.04%)</title><rect x="98.7936%" y="837" width="0.0396%" height="15" fill="rgb(250,191,5)" fg:x="64941" fg:w="26"/><text x="99.0436%" y="847.50"></text></g><g><title>__GI___libc_realloc (26 samples, 0.04%)</title><rect x="98.7936%" y="821" width="0.0396%" height="15" fill="rgb(242,132,44)" fg:x="64941" fg:w="26"/><text x="99.0436%" y="831.50"></text></g><g><title>_int_realloc (25 samples, 0.04%)</title><rect x="98.7951%" y="805" width="0.0380%" height="15" fill="rgb(251,152,29)" fg:x="64942" fg:w="25"/><text x="99.0451%" y="815.50"></text></g><g><title>_int_free (7 samples, 0.01%)</title><rect x="98.8530%" y="773" width="0.0106%" height="15" fill="rgb(218,179,5)" fg:x="64980" fg:w="7"/><text x="99.1030%" y="783.50"></text></g><g><title>malloc_consolidate (7 samples, 0.01%)</title><rect x="98.8530%" y="757" width="0.0106%" height="15" fill="rgb(227,67,19)" fg:x="64980" fg:w="7"/><text x="99.1030%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.02%)</title><rect x="98.8469%" y="837" width="0.0213%" height="15" fill="rgb(233,119,31)" fg:x="64976" fg:w="14"/><text x="99.0969%" y="847.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.02%)</title><rect x="98.8469%" y="821" width="0.0213%" height="15" fill="rgb(241,120,22)" fg:x="64976" fg:w="14"/><text x="99.0969%" y="831.50"></text></g><g><title>__GI___libc_realloc (14 samples, 0.02%)</title><rect x="98.8469%" y="805" width="0.0213%" height="15" fill="rgb(224,102,30)" fg:x="64976" fg:w="14"/><text x="99.0969%" y="815.50"></text></g><g><title>_int_realloc (11 samples, 0.02%)</title><rect x="98.8514%" y="789" width="0.0167%" height="15" fill="rgb(210,164,37)" fg:x="64979" fg:w="11"/><text x="99.1014%" y="799.50"></text></g><g><title>fastfull_search::context::boolean_context::binary_expr_columns (60 samples, 0.09%)</title><rect x="98.7845%" y="869" width="0.0913%" height="15" fill="rgb(226,191,16)" fg:x="64935" fg:w="60"/><text x="99.0345%" y="879.50"></text></g><g><title>fastfull_search::context::boolean_context::binary_expr_columns (28 samples, 0.04%)</title><rect x="98.8332%" y="853" width="0.0426%" height="15" fill="rgb(214,40,45)" fg:x="64967" fg:w="28"/><text x="99.0832%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlparser::tokenizer::Token&gt; (7 samples, 0.01%)</title><rect x="98.9123%" y="837" width="0.0106%" height="15" fill="rgb(244,29,26)" fg:x="65019" fg:w="7"/><text x="99.1623%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.01%)</title><rect x="98.9610%" y="805" width="0.0122%" height="15" fill="rgb(216,16,5)" fg:x="65051" fg:w="8"/><text x="99.2110%" y="815.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="98.9625%" y="789" width="0.0106%" height="15" fill="rgb(249,76,35)" fg:x="65052" fg:w="7"/><text x="99.2125%" y="799.50"></text></g><g><title>_int_free (12 samples, 0.02%)</title><rect x="99.0066%" y="789" width="0.0183%" height="15" fill="rgb(207,11,44)" fg:x="65081" fg:w="12"/><text x="99.2566%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (7 samples, 0.01%)</title><rect x="99.0249%" y="789" width="0.0106%" height="15" fill="rgb(228,190,49)" fg:x="65093" fg:w="7"/><text x="99.2749%" y="799.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.01%)</title><rect x="99.0249%" y="773" width="0.0106%" height="15" fill="rgb(214,173,12)" fg:x="65093" fg:w="7"/><text x="99.2749%" y="783.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (13 samples, 0.02%)</title><rect x="99.0355%" y="789" width="0.0198%" height="15" fill="rgb(218,26,35)" fg:x="65100" fg:w="13"/><text x="99.2855%" y="799.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search (58 samples, 0.09%)</title><rect x="99.0553%" y="789" width="0.0882%" height="15" fill="rgb(220,200,19)" fg:x="65113" fg:w="58"/><text x="99.3053%" y="799.50"></text></g><g><title>__memcmp_avx2_movbe (28 samples, 0.04%)</title><rect x="99.1009%" y="773" width="0.0426%" height="15" fill="rgb(239,95,49)" fg:x="65143" fg:w="28"/><text x="99.3509%" y="783.50"></text></g><g><title>&lt;datafusion_common::column::Column as core::convert::From&lt;&amp;str&gt;&gt;::from (199 samples, 0.30%)</title><rect x="98.8940%" y="853" width="0.3027%" height="15" fill="rgb(235,85,53)" fg:x="65007" fg:w="199"/><text x="99.1440%" y="863.50"></text></g><g><title>sqlparser::tokenizer::Tokenizer::tokenize (178 samples, 0.27%)</title><rect x="98.9260%" y="837" width="0.2708%" height="15" fill="rgb(233,133,31)" fg:x="65028" fg:w="178"/><text x="99.1760%" y="847.50"></text></g><g><title>sqlparser::tokenizer::Tokenizer::tokenize_with_location (162 samples, 0.25%)</title><rect x="98.9503%" y="821" width="0.2464%" height="15" fill="rgb(218,25,20)" fg:x="65044" fg:w="162"/><text x="99.2003%" y="831.50"></text></g><g><title>sqlparser::tokenizer::Tokenizer::next_token (147 samples, 0.22%)</title><rect x="98.9731%" y="805" width="0.2236%" height="15" fill="rgb(252,210,38)" fg:x="65059" fg:w="147"/><text x="99.2231%" y="815.50"></text></g><g><title>sqlparser::tokenizer::Tokenizer::tokenize_word (35 samples, 0.05%)</title><rect x="99.1435%" y="789" width="0.0532%" height="15" fill="rgb(242,134,21)" fg:x="65171" fg:w="35"/><text x="99.3935%" y="799.50"></text></g><g><title>fastfull_search::query::boolean_query::BooleanPredicateBuilder::must (243 samples, 0.37%)</title><rect x="98.8773%" y="869" width="0.3697%" height="15" fill="rgb(213,28,48)" fg:x="64996" fg:w="243"/><text x="99.1273%" y="879.50"></text></g><g><title>datafusion_expr::expr_fn::boolean_and (31 samples, 0.05%)</title><rect x="99.1998%" y="853" width="0.0472%" height="15" fill="rgb(250,196,2)" fg:x="65208" fg:w="31"/><text x="99.4498%" y="863.50"></text></g><g><title>datafusion_expr::expr_fn::boolean_query_expr (31 samples, 0.05%)</title><rect x="99.1998%" y="837" width="0.0472%" height="15" fill="rgb(227,5,17)" fg:x="65208" fg:w="31"/><text x="99.4498%" y="847.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.02%)</title><rect x="99.2241%" y="821" width="0.0228%" height="15" fill="rgb(221,226,24)" fg:x="65224" fg:w="15"/><text x="99.4741%" y="831.50"></text></g><g><title>fastfull_search::query::boolean_query::BooleanQuery::create_physical_plan (13 samples, 0.02%)</title><rect x="99.2515%" y="869" width="0.0198%" height="15" fill="rgb(211,5,48)" fg:x="65242" fg:w="13"/><text x="99.5015%" y="879.50"></text></g><g><title>__memmove_avx_unaligned_erms (12 samples, 0.02%)</title><rect x="99.2531%" y="853" width="0.0183%" height="15" fill="rgb(219,150,6)" fg:x="65243" fg:w="12"/><text x="99.5031%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.01%)</title><rect x="99.2804%" y="757" width="0.0122%" height="15" fill="rgb(251,46,16)" fg:x="65261" fg:w="8"/><text x="99.5304%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.01%)</title><rect x="99.2804%" y="741" width="0.0122%" height="15" fill="rgb(220,204,40)" fg:x="65261" fg:w="8"/><text x="99.5304%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.01%)</title><rect x="99.2804%" y="725" width="0.0122%" height="15" fill="rgb(211,85,2)" fg:x="65261" fg:w="8"/><text x="99.5304%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.01%)</title><rect x="99.2804%" y="709" width="0.0122%" height="15" fill="rgb(229,17,7)" fg:x="65261" fg:w="8"/><text x="99.5304%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.01%)</title><rect x="99.2804%" y="693" width="0.0122%" height="15" fill="rgb(239,72,28)" fg:x="65261" fg:w="8"/><text x="99.5304%" y="703.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.01%)</title><rect x="99.2804%" y="677" width="0.0122%" height="15" fill="rgb(230,47,54)" fg:x="65261" fg:w="8"/><text x="99.5304%" y="687.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.01%)</title><rect x="99.2804%" y="661" width="0.0122%" height="15" fill="rgb(214,50,8)" fg:x="65261" fg:w="8"/><text x="99.5304%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="99.2804%" y="837" width="0.0137%" height="15" fill="rgb(216,198,43)" fg:x="65261" fg:w="9"/><text x="99.5304%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="99.2804%" y="821" width="0.0137%" height="15" fill="rgb(234,20,35)" fg:x="65261" fg:w="9"/><text x="99.5304%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.01%)</title><rect x="99.2804%" y="805" width="0.0137%" height="15" fill="rgb(254,45,19)" fg:x="65261" fg:w="9"/><text x="99.5304%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.01%)</title><rect x="99.2804%" y="789" width="0.0137%" height="15" fill="rgb(219,14,44)" fg:x="65261" fg:w="9"/><text x="99.5304%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.01%)</title><rect x="99.2804%" y="773" width="0.0137%" height="15" fill="rgb(217,220,26)" fg:x="65261" fg:w="9"/><text x="99.5304%" y="783.50"></text></g><g><title>&lt;datafusion::execution::context::SessionConfig as core::clone::Clone&gt;::clone (14 samples, 0.02%)</title><rect x="99.2941%" y="837" width="0.0213%" height="15" fill="rgb(213,158,28)" fg:x="65270" fg:w="14"/><text x="99.5441%" y="847.50"></text></g><g><title>fastfull_search::query::boolean_query::BooleanQuery::task_ctx (29 samples, 0.04%)</title><rect x="99.2743%" y="869" width="0.0441%" height="15" fill="rgb(252,51,52)" fg:x="65257" fg:w="29"/><text x="99.5243%" y="879.50"></text></g><g><title>&lt;datafusion::execution::context::TaskContext as core::convert::From&lt;&amp;datafusion::execution::context::SessionState&gt;&gt;::from (29 samples, 0.04%)</title><rect x="99.2743%" y="853" width="0.0441%" height="15" fill="rgb(246,89,16)" fg:x="65257" fg:w="29"/><text x="99.5243%" y="863.50"></text></g><g><title>[[kernel.kallsyms]] (182 samples, 0.28%)</title><rect x="99.3352%" y="613" width="0.2769%" height="15" fill="rgb(216,158,49)" fg:x="65297" fg:w="182"/><text x="99.5852%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (177 samples, 0.27%)</title><rect x="99.3428%" y="597" width="0.2693%" height="15" fill="rgb(236,107,19)" fg:x="65302" fg:w="177"/><text x="99.5928%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (167 samples, 0.25%)</title><rect x="99.3580%" y="581" width="0.2541%" height="15" fill="rgb(228,185,30)" fg:x="65312" fg:w="167"/><text x="99.6080%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (165 samples, 0.25%)</title><rect x="99.3611%" y="565" width="0.2510%" height="15" fill="rgb(246,134,8)" fg:x="65314" fg:w="165"/><text x="99.6111%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (162 samples, 0.25%)</title><rect x="99.3656%" y="549" width="0.2464%" height="15" fill="rgb(214,143,50)" fg:x="65317" fg:w="162"/><text x="99.6156%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (154 samples, 0.23%)</title><rect x="99.3778%" y="533" width="0.2343%" height="15" fill="rgb(228,75,8)" fg:x="65325" fg:w="154"/><text x="99.6278%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (137 samples, 0.21%)</title><rect x="99.4037%" y="517" width="0.2084%" height="15" fill="rgb(207,175,4)" fg:x="65342" fg:w="137"/><text x="99.6537%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (120 samples, 0.18%)</title><rect x="99.4295%" y="501" width="0.1826%" height="15" fill="rgb(205,108,24)" fg:x="65359" fg:w="120"/><text x="99.6795%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (99 samples, 0.15%)</title><rect x="99.4615%" y="485" width="0.1506%" height="15" fill="rgb(244,120,49)" fg:x="65380" fg:w="99"/><text x="99.7115%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (80 samples, 0.12%)</title><rect x="99.4904%" y="469" width="0.1217%" height="15" fill="rgb(223,47,38)" fg:x="65399" fg:w="80"/><text x="99.7404%" y="479.50"></text></g><g><title>[[kernel.kallsyms]] (63 samples, 0.10%)</title><rect x="99.5162%" y="453" width="0.0958%" height="15" fill="rgb(229,179,11)" fg:x="65416" fg:w="63"/><text x="99.7662%" y="463.50"></text></g><g><title>[[kernel.kallsyms]] (61 samples, 0.09%)</title><rect x="99.5193%" y="437" width="0.0928%" height="15" fill="rgb(231,122,1)" fg:x="65418" fg:w="61"/><text x="99.7693%" y="447.50"></text></g><g><title>[[kernel.kallsyms]] (61 samples, 0.09%)</title><rect x="99.5193%" y="421" width="0.0928%" height="15" fill="rgb(245,119,9)" fg:x="65418" fg:w="61"/><text x="99.7693%" y="431.50"></text></g><g><title>[[kernel.kallsyms]] (55 samples, 0.08%)</title><rect x="99.5284%" y="405" width="0.0837%" height="15" fill="rgb(241,163,25)" fg:x="65424" fg:w="55"/><text x="99.7784%" y="415.50"></text></g><g><title>[[kernel.kallsyms]] (36 samples, 0.05%)</title><rect x="99.5573%" y="389" width="0.0548%" height="15" fill="rgb(217,214,3)" fg:x="65443" fg:w="36"/><text x="99.8073%" y="399.50"></text></g><g><title>[[kernel.kallsyms]] (33 samples, 0.05%)</title><rect x="99.5619%" y="373" width="0.0502%" height="15" fill="rgb(240,86,28)" fg:x="65446" fg:w="33"/><text x="99.8119%" y="383.50"></text></g><g><title>[[kernel.kallsyms]] (12 samples, 0.02%)</title><rect x="99.5938%" y="357" width="0.0183%" height="15" fill="rgb(215,47,9)" fg:x="65467" fg:w="12"/><text x="99.8438%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.02%)</title><rect x="99.5953%" y="341" width="0.0167%" height="15" fill="rgb(252,25,45)" fg:x="65468" fg:w="11"/><text x="99.8453%" y="351.50"></text></g><g><title>__libc_write (188 samples, 0.29%)</title><rect x="99.3276%" y="645" width="0.2860%" height="15" fill="rgb(251,164,9)" fg:x="65292" fg:w="188"/><text x="99.5776%" y="655.50"></text></g><g><title>__libc_write (184 samples, 0.28%)</title><rect x="99.3337%" y="629" width="0.2799%" height="15" fill="rgb(233,194,0)" fg:x="65296" fg:w="184"/><text x="99.5837%" y="639.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (190 samples, 0.29%)</title><rect x="99.3276%" y="709" width="0.2890%" height="15" fill="rgb(249,111,24)" fg:x="65292" fg:w="190"/><text x="99.5776%" y="719.50"></text></g><g><title>std::io::Write::write_all (190 samples, 0.29%)</title><rect x="99.3276%" y="693" width="0.2890%" height="15" fill="rgb(250,223,3)" fg:x="65292" fg:w="190"/><text x="99.5776%" y="703.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (190 samples, 0.29%)</title><rect x="99.3276%" y="677" width="0.2890%" height="15" fill="rgb(236,178,37)" fg:x="65292" fg:w="190"/><text x="99.5776%" y="687.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (190 samples, 0.29%)</title><rect x="99.3276%" y="661" width="0.2890%" height="15" fill="rgb(241,158,50)" fg:x="65292" fg:w="190"/><text x="99.5776%" y="671.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (198 samples, 0.30%)</title><rect x="99.3185%" y="837" width="0.3012%" height="15" fill="rgb(213,121,41)" fg:x="65286" fg:w="198"/><text x="99.5685%" y="847.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (198 samples, 0.30%)</title><rect x="99.3185%" y="821" width="0.3012%" height="15" fill="rgb(240,92,3)" fg:x="65286" fg:w="198"/><text x="99.5685%" y="831.50"></text></g><g><title>std::io::Write::write_fmt (198 samples, 0.30%)</title><rect x="99.3185%" y="805" width="0.3012%" height="15" fill="rgb(205,123,3)" fg:x="65286" fg:w="198"/><text x="99.5685%" y="815.50"></text></g><g><title>core::fmt::write (196 samples, 0.30%)</title><rect x="99.3215%" y="789" width="0.2982%" height="15" fill="rgb(205,97,47)" fg:x="65288" fg:w="196"/><text x="99.5715%" y="799.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (195 samples, 0.30%)</title><rect x="99.3230%" y="773" width="0.2967%" height="15" fill="rgb(247,152,14)" fg:x="65289" fg:w="195"/><text x="99.5730%" y="783.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (192 samples, 0.29%)</title><rect x="99.3276%" y="757" width="0.2921%" height="15" fill="rgb(248,195,53)" fg:x="65292" fg:w="192"/><text x="99.5776%" y="767.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (192 samples, 0.29%)</title><rect x="99.3276%" y="741" width="0.2921%" height="15" fill="rgb(226,201,16)" fg:x="65292" fg:w="192"/><text x="99.5776%" y="751.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (192 samples, 0.29%)</title><rect x="99.3276%" y="725" width="0.2921%" height="15" fill="rgb(205,98,0)" fg:x="65292" fg:w="192"/><text x="99.5776%" y="735.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (36,951 samples, 56.21%)</title><rect x="43.4083%" y="917" width="56.2129%" height="15" fill="rgb(214,191,48)" fg:x="28534" fg:w="36951"/><text x="43.6583%" y="927.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>do_query::main::_{{closure}} (36,951 samples, 56.21%)</title><rect x="43.4083%" y="901" width="56.2129%" height="15" fill="rgb(237,112,39)" fg:x="28534" fg:w="36951"/><text x="43.6583%" y="911.50">do_query::main::_{{closure}}</text></g><g><title>do_query::main_inner::{{closure}} (36,951 samples, 56.21%)</title><rect x="43.4083%" y="885" width="56.2129%" height="15" fill="rgb(247,203,27)" fg:x="28534" fg:w="36951"/><text x="43.6583%" y="895.50">do_query::main_inner::{{closure}}</text></g><g><title>std::io::stdio::_print (199 samples, 0.30%)</title><rect x="99.3185%" y="869" width="0.3027%" height="15" fill="rgb(235,124,28)" fg:x="65286" fg:w="199"/><text x="99.5685%" y="879.50"></text></g><g><title>std::io::stdio::print_to (199 samples, 0.30%)</title><rect x="99.3185%" y="853" width="0.3027%" height="15" fill="rgb(208,207,46)" fg:x="65286" fg:w="199"/><text x="99.5685%" y="863.50"></text></g><g><title>[unknown] (52,977 samples, 80.59%)</title><rect x="19.0556%" y="933" width="80.5930%" height="15" fill="rgb(234,176,4)" fg:x="12526" fg:w="52977"/><text x="19.3056%" y="943.50">[unknown]</text></g><g><title>unlink_chunk.isra.0 (18 samples, 0.03%)</title><rect x="99.6212%" y="917" width="0.0274%" height="15" fill="rgb(230,133,28)" fg:x="65485" fg:w="18"/><text x="99.8712%" y="927.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.02%)</title><rect x="99.6486%" y="933" width="0.0183%" height="15" fill="rgb(211,137,40)" fg:x="65503" fg:w="12"/><text x="99.8986%" y="943.50"></text></g><g><title>__calloc (20 samples, 0.03%)</title><rect x="99.6684%" y="933" width="0.0304%" height="15" fill="rgb(254,35,13)" fg:x="65516" fg:w="20"/><text x="99.9184%" y="943.50"></text></g><g><title>__rdl_alloc (11 samples, 0.02%)</title><rect x="99.7049%" y="933" width="0.0167%" height="15" fill="rgb(225,49,51)" fg:x="65540" fg:w="11"/><text x="99.9549%" y="943.50"></text></g><g><title>_int_free (62 samples, 0.09%)</title><rect x="99.7307%" y="933" width="0.0943%" height="15" fill="rgb(251,10,15)" fg:x="65557" fg:w="62"/><text x="99.9807%" y="943.50"></text></g><g><title>_int_malloc (11 samples, 0.02%)</title><rect x="99.8251%" y="933" width="0.0167%" height="15" fill="rgb(228,207,15)" fg:x="65619" fg:w="11"/><text x="100.0751%" y="943.50"></text></g><g><title>_int_memalign (19 samples, 0.03%)</title><rect x="99.8418%" y="933" width="0.0289%" height="15" fill="rgb(241,99,19)" fg:x="65630" fg:w="19"/><text x="100.0918%" y="943.50"></text></g><g><title>arrow_array::record_batch::RecordBatch::try_new_impl (8 samples, 0.01%)</title><rect x="99.8905%" y="933" width="0.0122%" height="15" fill="rgb(207,104,49)" fg:x="65662" fg:w="8"/><text x="100.1405%" y="943.50"></text></g><g><title>arrow_buffer::util::bit_util::round_upto_power_of_2 (7 samples, 0.01%)</title><rect x="99.9072%" y="933" width="0.0106%" height="15" fill="rgb(234,99,18)" fg:x="65673" fg:w="7"/><text x="100.1572%" y="943.50"></text></g><g><title>malloc_consolidate (9 samples, 0.01%)</title><rect x="99.9483%" y="917" width="0.0137%" height="15" fill="rgb(213,191,49)" fg:x="65700" fg:w="9"/><text x="100.1983%" y="927.50"></text></g><g><title>main_arena (25 samples, 0.04%)</title><rect x="99.9483%" y="933" width="0.0380%" height="15" fill="rgb(210,226,19)" fg:x="65700" fg:w="25"/><text x="100.1983%" y="943.50"></text></g><g><title>unlink_chunk.isra.0 (16 samples, 0.02%)</title><rect x="99.9620%" y="917" width="0.0243%" height="15" fill="rgb(229,97,18)" fg:x="65709" fg:w="16"/><text x="100.2120%" y="927.50"></text></g><g><title>all (65,734 samples, 100%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(211,167,15)" fg:x="0" fg:w="65734"/><text x="0.2500%" y="975.50"></text></g><g><title>do_query (65,734 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(210,169,34)" fg:x="0" fg:w="65734"/><text x="0.2500%" y="959.50">do_query</text></g></svg></svg>